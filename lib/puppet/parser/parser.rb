#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 775)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'245,246,231,50,232,51,225,243,162,74,78,223,210,176,180,147,187,213',
'52,222,244,50,171,173,177,179,161,225,226,74,78,219,220,74,78,335,338',
'99,334,101,149,331,48,235,233,172,175,185,306,182,183,166,167,169,170',
'96,174,178,74,78,225,358,99,168,101,125,71,185,74,78,87,89,219,220,94',
'346,123,-222,79,97,96,128,90,347,61,103,74,78,61,231,99,71,210,64,-218',
'87,89,213,-151,94,125,71,161,79,97,87,253,90,157,94,103,123,289,198',
'138,288,128,90,64,71,313,-221,65,87,89,66,65,94,64,66,47,79,74,78,125',
'90,99,35,101,45,46,36,74,78,64,123,64,156,64,144,128,125,74,78,96,262',
'99,35,101,-107,35,116,123,335,36,71,334,128,11,87,89,11,35,94,96,71',
'36,79,97,87,253,90,-219,94,103,71,-154,198,316,87,89,90,64,94,-220,318',
'-155,79,97,74,78,90,64,99,103,101,-171,324,303,74,78,61,64,99,-107,-107',
'-107,-107,326,166,167,96,35,161,174,178,116,182,183,166,167,168,71,11',
'174,178,87,89,-223,158,94,168,71,330,79,97,87,89,90,65,94,103,66,-158',
'79,301,74,78,90,64,86,218,74,78,219,220,99,300,101,64,299,64,107,182',
'183,166,167,-157,77,-152,174,178,74,78,96,292,99,168,101,71,47,174,178',
'87,89,71,151,94,168,87,89,79,35,94,96,90,36,79,97,321,-156,90,166,167',
'103,71,64,174,178,87,89,51,64,94,168,174,178,79,97,74,78,90,168,99,103',
'101,146,111,-151,74,78,-153,64,99,333,101,157,-154,291,74,78,96,266',
'99,227,101,225,260,225,226,332,96,71,144,225,226,87,89,229,340,94,96',
'71,138,79,97,87,89,90,138,94,103,71,343,79,97,87,89,90,64,94,103,133',
'287,79,97,74,78,90,64,99,103,101,-153,-152,350,74,78,208,64,99,352,101',
'111,64,353,74,78,96,261,99,215,101,225,260,107,162,105,96,71,356,64',
'144,87,89,229,231,94,96,71,363,79,97,87,89,90,55,94,103,71,229,79,97',
'87,89,90,64,94,103,233,366,79,97,74,78,90,64,99,103,101,53,237,44,74',
'78,-205,64,99,368,101,240,38,242,74,78,96,374,99,375,101,-24,-24,-24',
'-24,,96,71,,,,87,89,,,94,96,71,,79,97,87,89,90,,94,103,71,,79,97,87',
'89,90,64,94,103,,,79,97,74,78,90,64,99,103,101,,,,74,78,,64,99,,101',
',,,74,78,96,,99,,101,41,42,43,39,,96,71,,,,87,89,,,94,96,71,,79,97,87',
'89,90,,94,103,71,,79,97,87,89,90,64,94,103,,,79,97,74,78,90,64,,103',
',345,,74,78,,,64,,255,,,74,78,,,99,41,42,43,39,-22,-22,-22,-22,,,71',
',,,87,253,74,78,94,71,99,,198,87,253,,90,94,71,,,198,87,253,,90,94,64',
',,198,74,78,,90,99,64,101,,71,,,,87,202,64,,94,74,78,,198,99,96,101',
'90,,,,,,,,,71,,64,,87,89,96,,94,,,,79,97,,,90,71,,103,,87,89,,,94,,64',
',79,97,74,78,90,,99,103,101,,216,,,,,64,,,,,176,180,,,96,,,,,171,173',
'177,179,,,71,,,,87,89,,,94,,,,79,97,,,90,172,175,103,,182,183,166,167',
'169,170,64,174,178,74,78,,,99,168,101,,,,74,78,,,99,,101,,,,74,78,96',
',99,,101,,,,,,96,71,,,,87,89,,,94,96,71,,79,97,87,89,90,,94,103,71,',
'79,97,87,89,90,64,94,103,,,79,97,74,78,90,64,99,103,101,,,,74,78,,64',
'99,,101,,,,,,96,,,,,,,,,,96,71,,,,87,89,,,94,,71,,79,97,87,89,90,,94',
'103,329,,79,97,,,90,64,,103,176,180,,,,,,64,,171,173,177,179,,74,78',
',,,,74,78,,,99,,101,,,,,,172,175,,,182,183,166,167,169,170,96,174,178',
',,71,,,168,87,253,71,,94,,87,89,198,,94,,90,,79,97,74,78,90,,99,103',
'101,64,,,74,78,,64,99,,101,,,,74,78,96,152,99,,101,,,,,,96,71,,,,87',
'89,,,94,96,71,,79,97,87,89,90,,94,103,71,,79,97,87,89,90,64,94,103,',
',79,97,74,78,90,64,99,103,101,,,,74,78,,64,99,,101,,,,74,78,96,,99,',
'101,,,,,,96,71,,,,87,89,,,94,96,71,,79,97,87,89,90,,94,103,71,,79,97',
'87,89,90,64,94,103,,,79,97,74,78,90,64,99,103,101,,,,74,78,,64,99,,101',
',,,74,78,96,,99,160,101,,,,,,96,71,,,,87,89,,,94,96,71,,79,97,87,89',
'90,,94,103,71,,79,97,87,89,90,64,94,103,74,78,79,97,,,90,64,,103,74',
'78,,,99,160,101,64,,,74,78,,,99,,101,,,,74,78,96,71,99,,101,87,253,',
',94,96,71,,198,,87,89,90,,94,96,71,,79,97,87,89,90,64,94,103,71,,79',
'97,87,89,90,64,94,103,,,79,97,74,78,90,64,99,103,101,,,,74,78,,64,99',
',101,,,,,,96,,,,,,,,,,96,71,,,,87,89,,,94,,71,,79,97,87,89,90,,94,103',
',181,79,97,,,90,64,,103,176,180,,,,,207,64,,171,173,177,179,,,176,180',
',,,,,,,171,173,177,179,,,,,172,175,,,182,183,166,167,169,170,,174,178',
',,172,175,,168,182,183,166,167,169,170,,174,178,176,180,,,,168,,,,171',
'173,177,179,,,176,180,,,,,,,265,171,173,177,179,,,,,,175,,,182,183,166',
'167,169,170,,174,178,,,172,175,,168,182,183,166,167,169,170,,174,178',
'176,180,,,,168,,,,171,173,177,179,,,176,180,,,,,,,,171,173,177,179,',
',,,172,175,,,182,183,166,167,169,170,,174,178,,,172,175,,168,182,183',
'166,167,169,170,,174,178,176,180,,,,168,,,,171,173,177,179,,,176,180',
',,,,,,,171,173,177,179,,,,,172,175,,,182,183,166,167,169,170,,174,178',
',,172,175,,168,182,183,166,167,169,170,,174,178,176,180,,,,168,,,,171',
'173,177,179,,,176,180,,,,,,,,171,173,177,179,,,,,,,,,182,183,166,167',
'169,170,,174,178,,,,,,168,182,183,166,167,169,170,,174,178,176,180,',
',,168,,,,171,173,177,179,,,176,180,,,,,,,,171,173,177,179,,,,,172,175',
',,182,183,166,167,169,170,,174,178,,,,,,168,182,183,166,167,169,170',
',174,178,176,180,,,,168,,,,171,173,177,179,,,176,180,,,,,,,,171,173',
'177,179,,,,,172,175,,,182,183,166,167,169,170,,174,178,,,172,175,,168',
'182,183,166,167,169,170,,174,178,176,180,,,,168,,,,171,173,177,179,',
',176,180,,,,,,,,171,173,177,179,,,,,172,175,,,182,183,166,167,169,170',
',174,178,,,172,175,,168,182,183,166,167,169,170,,174,178,176,180,,,',
'168,,,,171,173,177,179,,,,180,,,,,,,,171,,,,,,,,172,175,180,,182,183',
'166,167,169,170,171,174,178,,,,,180,168,182,183,166,167,169,170,171',
'174,178,,,,,,168,,180,,182,183,166,167,169,170,171,174,178,,,,,,168',
'182,183,166,167,169,170,,174,178,,371,,,,168,,,,182,183,166,167,169',
'170,,174,178,,367,,,25,168,32,1,,7,12,,18,,23,,29,355,2,,,11,25,,32',
'1,,7,12,,18,,23,323,29,,2,,25,11,32,1,,7,12,,18,,23,373,29,,2,,25,11',
'32,1,,7,12,,18,,23,305,29,,2,,25,11,32,1,,7,12,,18,,23,284,29,,2,,25',
'11,32,1,,7,12,,18,,23,,29,,2,,25,11,32,1,,7,12,,18,,23,,29,25,2,32,1',
'11,7,12,,18,,23,,29,25,2,32,1,11,7,12,,18,,23,,29,25,2,32,1,11,7,12',
',18,,23,,29,,2,,,11,182,183,166,167,169,170,,174,178,,,,,,168,182,183',
'166,167,169,170,,174,178,,,,,,168' ]
        racc_action_table = arr = Array.new(2102, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'154,154,144,8,139,8,153,153,89,101,101,132,301,154,154,60,101,301,8',
'132,153,73,154,154,154,154,89,263,263,288,288,139,139,50,50,333,288',
'50,333,50,60,263,8,144,224,154,154,101,217,154,154,154,154,154,154,50',
'154,154,157,157,328,328,157,154,157,221,50,288,360,360,50,50,217,217',
'50,296,221,84,50,50,157,221,50,296,149,50,158,158,147,202,158,157,111',
'50,93,157,157,111,93,157,52,360,202,157,157,360,360,157,82,360,157,52',
'188,360,229,188,52,360,157,158,230,82,149,158,158,149,147,158,360,147',
'7,158,161,161,48,158,161,1,161,7,7,1,346,346,149,48,158,81,147,233,48',
'125,162,162,161,161,162,40,162,261,15,40,125,284,15,161,284,125,40,161',
'161,15,12,161,162,346,12,161,161,346,346,161,76,346,161,162,76,346,234',
'162,162,346,161,162,80,236,88,162,162,334,334,162,346,334,162,334,79',
'243,213,326,326,18,162,326,261,261,261,261,250,286,286,334,110,253,286',
'286,110,271,271,271,271,286,334,110,271,271,334,334,75,83,334,271,326',
'260,334,334,326,326,334,18,326,334,18,72,326,212,23,23,326,334,23,127',
'25,25,127,127,25,211,25,326,210,18,208,270,270,270,270,91,23,206,270',
'270,166,166,25,205,166,270,166,23,71,268,268,23,23,25,69,23,268,25,25',
'23,237,25,166,23,237,25,25,237,68,25,285,285,25,166,23,285,285,166,166',
'56,25,166,285,267,267,166,166,167,167,166,267,167,166,167,55,54,204',
'29,29,203,166,29,283,29,199,196,195,168,168,167,165,168,134,168,165',
'165,134,134,264,29,167,53,264,264,167,167,193,290,167,168,29,291,167',
'167,29,29,167,51,29,167,168,293,29,29,168,168,29,167,168,29,49,184,168',
'168,169,169,168,29,169,168,169,92,95,302,170,170,109,168,170,304,170',
'37,178,310,171,171,169,159,171,113,171,159,159,32,116,26,170,169,322',
'174,133,169,169,136,138,169,171,170,335,169,169,170,170,169,14,170,169',
'171,341,170,170,171,171,170,169,171,170,141,347,171,171,303,303,171',
'170,303,171,303,9,145,6,44,44,358,171,44,359,44,148,2,151,96,96,303',
'370,96,372,96,34,34,34,34,,44,303,,,,303,303,,,303,96,44,,303,303,44',
'44,303,,44,303,96,,44,44,96,96,44,303,96,44,,,96,96,46,46,96,44,46,96',
'46,,,,47,47,,96,47,,47,,,,299,299,46,,299,,299,33,33,33,33,,47,46,,',
',46,46,,,46,299,47,,46,46,47,47,46,,47,46,299,,47,47,299,299,47,46,299',
'47,,,299,299,294,294,299,47,,299,,294,,156,156,,,299,,156,,,292,292',
',,292,3,3,3,3,28,28,28,28,,,294,,,,294,294,105,105,294,156,105,,294',
'156,156,,294,156,292,,,156,292,292,,156,292,294,,,292,172,172,,292,172',
'156,172,,105,,,,105,105,292,,105,287,287,,105,287,172,287,105,,,,,,',
',,172,,105,,172,172,287,,172,,,,172,172,,,172,287,,172,,287,287,,,287',
',172,,287,287,173,173,287,,173,287,173,,122,,,,,287,,,,,122,122,,,173',
',,,,122,122,122,122,,,173,,,,173,173,,,173,,,,173,173,,,173,122,122',
'173,,122,122,122,122,122,122,173,122,122,175,175,,,175,122,175,,,,176',
'176,,,176,,176,,,,177,177,175,,177,,177,,,,,,176,175,,,,175,175,,,175',
'177,176,,175,175,176,176,175,,176,175,177,,176,176,177,177,176,175,177',
'176,,,177,177,179,179,177,176,179,177,179,,,,180,180,,177,180,,180,',
',,,,179,,,,,,,,,,180,179,,,,179,179,,,179,,180,,179,179,180,180,179',
',180,179,258,,180,180,,,180,179,,180,258,258,,,,,,180,,258,258,258,258',
',255,255,,,,,245,245,,,245,,245,,,,,,258,258,,,258,258,258,258,258,258',
'245,258,258,,,255,,,258,255,255,245,,255,,245,245,255,,245,,255,,245',
'245,77,77,245,,77,245,77,255,,,78,78,,245,78,,78,,,,103,103,77,77,103',
',103,,,,,,78,77,,,,77,77,,,77,103,78,,77,77,78,78,77,,78,77,103,,78',
'78,103,103,78,77,103,78,,,103,103,235,235,103,78,235,103,235,,,,231',
'231,,103,231,,231,,,,228,228,235,,228,,228,,,,,,231,235,,,,235,235,',
',235,228,231,,235,235,231,231,235,,231,235,228,,231,231,228,228,231',
'235,228,231,,,228,228,223,223,228,231,223,228,223,,,,222,222,,228,222',
',222,,,,86,86,223,,86,86,86,,,,,,222,223,,,,223,223,,,223,86,222,,223',
'223,222,222,223,,222,223,86,,222,222,86,86,222,223,86,222,207,207,86',
'86,,,86,222,,86,99,99,,,99,99,99,86,,,97,97,,,97,,97,,,,183,183,99,207',
'183,,183,207,207,,,207,97,99,,207,,99,99,207,,99,183,97,,99,99,97,97',
'99,207,97,99,183,,97,97,183,183,97,99,183,97,,,183,183,182,182,183,97',
'182,183,182,,,,45,45,,183,45,,45,,,,,,182,,,,,,,,,,45,182,,,,182,182',
',,182,,45,,182,182,45,45,182,,45,182,,100,45,45,,,45,182,,45,100,100',
',,,,106,45,,100,100,100,100,,,106,106,,,,,,,,106,106,106,106,,,,,100',
'100,,,100,100,100,100,100,100,,100,100,,,106,106,,100,106,106,106,106',
'106,106,,106,106,273,273,,,,106,,,,273,273,273,273,,,163,163,,,,,,,163',
'163,163,163,163,,,,,,273,,,273,273,273,273,273,273,,273,273,,,163,163',
',273,163,163,163,163,163,163,,163,163,311,311,,,,163,,,,311,311,311',
'311,,,337,337,,,,,,,,337,337,337,337,,,,,311,311,,,311,311,311,311,311',
'311,,311,311,,,337,337,,311,337,337,337,337,337,337,,337,337,348,348',
',,,337,,,,348,348,348,348,,,135,135,,,,,,,,135,135,135,135,,,,,348,348',
',,348,348,348,348,348,348,,348,348,,,135,135,,348,135,135,135,135,135',
'135,,135,135,309,309,,,,135,,,,309,309,309,309,,,276,276,,,,,,,,276',
'276,276,276,,,,,,,,,309,309,309,309,309,309,,309,309,,,,,,309,276,276',
'276,276,276,276,,276,276,351,351,,,,276,,,,351,351,351,351,,,308,308',
',,,,,,,308,308,308,308,,,,,351,351,,,351,351,351,351,351,351,,351,351',
',,,,,351,308,308,308,308,308,308,,308,308,119,119,,,,308,,,,119,119',
'119,119,,,120,120,,,,,,,,120,120,120,120,,,,,119,119,,,119,119,119,119',
'119,119,,119,119,,,120,120,,119,120,120,120,120,120,120,,120,120,121',
'121,,,,120,,,,121,121,121,121,,,314,314,,,,,,,,314,314,314,314,,,,,121',
'121,,,121,121,121,121,121,121,,121,121,,,314,314,,121,314,314,314,314',
'314,314,,314,314,317,317,,,,314,,,,317,317,317,317,,,,280,,,,,,,,280',
',,,,,,,317,317,277,,317,317,317,317,317,317,277,317,317,,,,,278,317',
'280,280,280,280,280,280,278,280,280,,,,,,280,,274,,277,277,277,277,277',
'277,274,277,277,,,,,,277,278,278,278,278,278,278,,278,278,,363,,,,278',
',,,274,274,274,274,274,274,,274,274,,354,,,363,274,363,363,,363,363',
',363,,363,,363,318,363,,,363,354,,354,354,,354,354,,354,,354,240,354',
',354,,318,354,318,318,,318,318,,318,,318,366,318,,318,,240,318,240,240',
',240,240,,240,,240,215,240,,240,,366,240,366,366,,366,366,,366,,366',
'181,366,,366,,215,366,215,215,,215,215,,215,,215,,215,,215,,181,215',
'181,181,,181,181,,181,,181,,181,0,181,0,0,181,0,0,,0,,0,,0,282,0,282',
'282,0,282,282,,282,,282,,282,17,282,17,17,282,17,17,,17,,17,,17,,17',
',,17,281,281,281,281,281,281,,281,281,,,,,,281,272,272,272,272,272,272',
',272,272,,,,,,272' ]
        racc_action_check = arr = Array.new(2102, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1998,   101,   437,   557,   nil,   nil,   457,   124,    -3,   462,
   nil,   nil,   136,   nil,   446,   124,   nil,  2024,   209,   nil,
   nil,   nil,   nil,   254,   nil,   260,   419,   nil,   561,   337,
   nil,   nil,   423,   494,   427,   nil,   nil,   389,   nil,   nil,
   121,   nil,   nil,   nil,   471,  1267,   528,   538,   110,   384,
    31,   339,    76,   323,   313,   336,   313,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,   277,
   nil,   284,   230,    15,   nil,   219,   163,   983,   993,   200,
   175,   124,   102,   227,    58,   nil,  1137,   nil,   173,     2,
   nil,   254,   380,    75,   nil,   381,   481,  1200,   nil,  1190,
  1305,     7,   nil,  1003,   nil,   634,  1320,   nil,   nil,   396,
   186,    57,   nil,   413,   nil,   nil,   420,   nil,   nil,  1665,
  1680,  1725,   726,   nil,   nil,   127,   nil,   215,   nil,   nil,
   nil,   nil,    -7,   392,   347,  1500,   423,   nil,   425,   -18,
   nil,   447,   nil,   nil,    -9,   434,   nil,    86,   472,    82,
   nil,   442,   nil,    -5,    -4,   nil,   604,    56,    84,   412,
   nil,   130,   150,  1380,   nil,   345,   280,   327,   347,   394,
   404,   414,   659,   723,   369,   786,   796,   806,   352,   853,
   863,  1985,  1257,  1210,   382,   nil,   nil,   nil,   103,   nil,
   nil,   nil,   nil,   356,   nil,   328,   324,   nil,   nil,   340,
   nil,   nil,    78,   318,   315,   244,   256,  1180,   270,   nil,
   255,   242,   243,   193,   nil,  1969,   nil,    23,   nil,   nil,
   nil,    41,  1127,  1117,    32,   nil,   nil,   nil,  1070,    74,
   111,  1060,   nil,   109,   179,  1050,   187,   266,   nil,   nil,
  1937,   nil,   nil,   182,   nil,   936,   nil,   nil,   nil,   nil,
   207,   nil,   nil,   199,   nil,   930,   nil,   nil,   901,   nil,
   236,   151,   nil,    16,   353,   nil,   nil,   265,   231,   nil,
   220,   174,  2034,  1365,  1851,   nil,  1560,  1818,  1833,   nil,
  1800,  2019,  2011,   335,   132,   257,   164,   676,    27,   nil,
   360,   333,   613,   374,   595,   nil,    63,   nil,   nil,   548,
   nil,   -23,   380,   461,   402,   nil,   nil,   nil,  1620,  1545,
   406,  1425,   nil,   nil,  1740,   nil,   nil,  1785,  1921,   nil,
   nil,   nil,   421,   nil,   nil,   nil,   207,   nil,    49,   nil,
   nil,   nil,   nil,     4,   197,   432,   nil,  1440,   nil,   nil,
   nil,   438,   nil,   nil,   nil,   nil,   140,   452,  1485,   nil,
   nil,  1605,   nil,   nil,  1905,   nil,   nil,   nil,   466,   469,
    66,   nil,   nil,  1887,   nil,   nil,  1953,   nil,   nil,   nil,
   477,   nil,   479,   nil,   nil,   nil ]

racc_action_default = [
  -181,  -225,   -54,  -225,    -9,   -10,  -225,  -225,  -225,   -23,
   -11,  -171,  -173,   -12,  -225,  -225,   -13,    -1,  -225,   -14,
    -2,   -15,    -3,  -172,   -16,  -225,  -225,   -17,    -6,  -225,
   -18,    -7,  -225,   -19,    -8,  -173,  -172,  -181,   -55,   -28,
  -225,   -25,   -26,   -27,  -225,  -225,  -225,  -225,  -181,   -57,
  -225,   -89,  -181,   -96,  -181,  -225,  -225,   -53,    -4,  -180,
  -181,  -178,  -174,  -176,  -206,  -177,  -179,  -160,   -40,  -225,
   -41,  -198,  -216,  -225,  -101,   -46,   -42,  -225,  -225,   -78,
   -43,  -225,   -44,   -32,   -45,   -33,  -225,  -106,   -47,   -77,
   -76,   -48,   -37,   -38,  -159,   -39,  -225,  -225,  -116,  -225,
  -225,  -225,  -109,  -225,  -117,   -89,  -225,  -161,  -162,  -164,
  -225,  -182,  -183,  -225,   -20,   -23,  -172,   -22,   -24,   -87,
   -86,   -88,  -225,  -198,   -69,  -181,   -60,  -225,   -77,   -61,
   -70,   -63,  -225,   -96,  -225,   -35,  -204,   -90,  -225,  -225,
   -94,  -204,   -95,   -97,  -225,  -181,   376,  -225,  -225,  -225,
  -192,  -225,   -31,  -225,  -225,  -102,  -225,  -225,  -225,  -225,
  -201,  -225,  -225,  -225,  -134,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -225,  -225,  -213,  -214,  -209,  -225,  -210,
  -127,  -156,   -72,  -204,   -82,  -225,   -83,   -84,   -78,   -85,
  -155,  -157,   -77,   -79,   -80,   -74,   -81,  -225,  -225,   -21,
  -191,  -225,  -204,  -189,  -186,  -225,  -215,  -225,   -58,   -66,
   -65,  -225,  -225,  -225,  -204,  -202,  -203,  -108,  -225,  -205,
  -225,  -225,   -59,  -205,  -225,  -225,  -225,  -225,  -194,  -175,
  -225,  -193,  -224,  -203,   -29,  -225,  -104,  -103,  -158,  -154,
  -225,  -145,  -146,   -77,  -153,  -225,  -151,  -152,  -225,   -34,
  -203,  -199,  -100,  -225,  -225,  -137,  -199,  -124,  -123,  -118,
  -125,  -126,  -129,  -136,  -131,  -119,  -135,  -133,  -130,  -120,
  -132,  -128,    -5,  -225,  -112,  -121,  -122,  -225,  -225,  -207,
  -225,   -89,   -75,  -225,  -225,  -139,  -225,  -143,  -163,  -225,
  -184,  -205,  -225,  -225,  -225,  -166,   -64,   -62,   -67,   -68,
  -225,   -36,   -91,   -51,   -92,   -98,   -52,   -93,  -225,  -196,
  -195,  -197,  -225,  -170,   -30,  -105,  -225,  -148,  -204,  -217,
  -200,   -99,  -107,  -112,  -225,  -225,  -111,  -212,  -208,  -211,
   -50,  -204,   -73,   -49,  -140,  -138,  -225,  -225,  -190,  -187,
  -185,  -188,  -165,   -56,  -225,  -168,  -169,  -150,  -203,  -225,
  -225,  -110,  -113,  -225,   -71,  -144,  -225,  -167,  -147,  -149,
  -225,  -115,  -225,  -142,  -114,  -141 ]

racc_goto_table = [
     6,     8,     9,    58,    17,   130,   102,    85,   214,   130,
   136,    37,   283,   197,   108,   199,    56,     6,     8,     9,
    59,   194,    54,   252,   200,   155,   124,   192,    62,   140,
   124,   189,   186,    57,   295,   141,   203,   191,    40,    20,
   127,     8,   115,   230,   139,   206,   304,   205,   234,   336,
   114,   294,   113,   118,   247,   315,   201,   251,   117,   134,
   307,   328,   204,   250,   193,    49,   109,    83,   110,   145,
   236,   322,    60,   148,   360,   200,   112,   241,   211,   212,
   293,   320,   130,   196,   188,    14,   153,   254,   191,   nil,
   nil,   nil,   nil,   112,   nil,   159,   257,   nil,   361,   150,
   290,   nil,   nil,   124,   nil,   nil,   nil,   201,   165,   140,
   nil,     8,   115,   256,   297,   224,   nil,   217,   nil,   302,
   209,   344,   327,   118,   nil,   nil,   200,   nil,   117,   nil,
   nil,   310,   nil,   nil,   249,   nil,   nil,   nil,   254,   191,
   nil,   nil,   259,   nil,   nil,   nil,   nil,   257,   nil,    59,
   nil,    59,   nil,   nil,   nil,   nil,   248,   239,   201,   nil,
   nil,   nil,   250,   nil,   256,   nil,   nil,   nil,   nil,   nil,
   263,   264,   nil,   nil,   200,   nil,   275,   nil,   130,   nil,
   279,     6,     8,     9,   238,   249,   254,   191,   nil,   nil,
   298,   nil,   325,   nil,   370,   257,   nil,   372,   349,   124,
   197,   297,   199,   nil,   nil,   312,   201,   248,   194,   140,
   nil,   200,   256,   200,   342,     6,     8,     9,   339,   186,
   nil,   nil,   nil,   203,   191,   254,   191,   369,   nil,   nil,
   nil,   nil,   206,   249,   257,   359,   nil,   nil,   nil,   nil,
     6,     8,     9,   201,   nil,   201,   nil,   319,   364,   204,
   341,   256,   nil,   365,   100,   248,   nil,   nil,   106,   nil,
   nil,   nil,   nil,   nil,   nil,   200,   nil,   250,    58,   nil,
   196,   nil,   249,   119,   120,   121,   122,   254,   191,   200,
   nil,   nil,     6,     8,     9,   nil,   257,   nil,   nil,   nil,
   nil,   254,   191,   nil,   248,   nil,   nil,   201,   nil,   nil,
   257,   nil,   nil,   256,   nil,   nil,   nil,   154,   nil,   nil,
   357,   201,   nil,   nil,   nil,   362,   nil,   256,     6,     8,
     9,   nil,   354,   nil,   249,   163,   164,   nil,   nil,   nil,
   nil,   nil,   190,   nil,   nil,   nil,   nil,   nil,   249,   nil,
    58,   nil,   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     6,     8,     9,   nil,   nil,   nil,
   248,   nil,   nil,     6,     8,     9,     6,     8,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   258,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   267,   268,   269,   270,   271,
   272,   273,   274,   nil,   276,   277,   278,   nil,   280,   281,
   nil,   285,   286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   308,   309,   nil,   nil,   nil,   nil,   311,   nil,   nil,
   314,   nil,   nil,   nil,   317,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   337,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   348,   nil,
   nil,   nil,   351,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   100 ]

racc_goto_check = [
    55,    44,    22,     4,     2,    29,    61,    25,    82,    29,
    42,    39,     5,    34,    72,    35,    44,    55,    44,    22,
    64,    32,    39,    70,    37,    59,    33,    53,    78,    56,
    33,    85,    28,     6,    66,    45,    28,    31,    21,     3,
    48,    44,    22,    43,    48,    30,     5,    40,    43,    62,
    20,    65,    74,     8,    60,    58,    38,    69,     6,    23,
    49,    71,    29,    68,    42,    47,    73,    24,    21,    74,
    75,     5,    76,    77,    27,    37,     3,    79,    80,    81,
    41,    83,    29,    33,    84,     1,    23,    28,    31,   nil,
   nil,   nil,   nil,     3,   nil,    23,    30,   nil,    62,     3,
    43,   nil,   nil,    33,   nil,   nil,   nil,    38,    23,    56,
   nil,    44,    22,    29,    68,    45,   nil,    48,   nil,    43,
    20,    66,    70,     8,   nil,   nil,    37,   nil,     6,   nil,
   nil,    43,   nil,   nil,    33,   nil,   nil,   nil,    28,    31,
   nil,   nil,    25,   nil,   nil,   nil,   nil,    30,   nil,    64,
   nil,    64,   nil,   nil,   nil,   nil,    55,    78,    38,   nil,
   nil,   nil,    68,   nil,    29,   nil,   nil,   nil,   nil,   nil,
    23,    23,   nil,   nil,    37,   nil,    64,   nil,    29,   nil,
    64,    55,    44,    22,     3,    33,    28,    31,   nil,   nil,
    72,   nil,    59,   nil,     5,    30,   nil,     5,    82,    33,
    34,    68,    35,   nil,   nil,    56,    38,    55,    32,    56,
   nil,    37,    29,    37,    53,    55,    44,    22,    85,    28,
   nil,   nil,   nil,    28,    31,    28,    31,    70,   nil,   nil,
   nil,   nil,    30,    33,    30,    43,   nil,   nil,   nil,   nil,
    55,    44,    22,    38,   nil,    38,   nil,    39,    43,    29,
    42,    29,   nil,    68,    26,    55,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    37,   nil,    68,     4,   nil,
    33,   nil,    33,    26,    26,    26,    26,    28,    31,    37,
   nil,   nil,    55,    44,    22,   nil,    30,   nil,   nil,   nil,
   nil,    28,    31,   nil,    55,   nil,   nil,    38,   nil,   nil,
    30,   nil,   nil,    29,   nil,   nil,   nil,    26,   nil,   nil,
    25,    38,   nil,   nil,   nil,    61,   nil,    29,    55,    44,
    22,   nil,     2,   nil,    33,    26,    26,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,    33,   nil,
     4,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    55,    44,    22,   nil,   nil,   nil,
    55,   nil,   nil,    55,    44,    22,    55,    44,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,    26,    26,    26,    26,
    26,    26,    26,   nil,    26,    26,    26,   nil,    26,    26,
   nil,    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,    26,   nil,   nil,   nil,   nil,    26,   nil,   nil,
    26,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    85,     4,    39,   -14,  -169,    18,   nil,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,    35,     2,     9,    44,   -16,   229,  -254,   -69,   -43,
   -60,   -68,   -84,   -22,   -92,   -90,   nil,   -81,   -49,    10,
   -58,  -125,   -41,   -93,     1,   -18,   nil,    57,    -8,  -161,
   nil,   nil,   nil,   -78,   nil,     0,   -24,   nil,  -178,   -53,
  -100,   -19,  -235,   nil,     2,  -156,  -173,   nil,   -93,   -99,
  -133,  -194,   -18,    34,    15,   -75,    54,    13,    10,   -72,
   -33,   -32,  -103,  -156,   -17,   -70,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   282,   126,    22,   nil,    28,    31,    34,     4,
     5,    10,    13,    16,    19,    21,    24,    27,    30,    33,
     3,   nil,    75,   nil,   nil,    98,   135,   228,    92,    93,
    95,    68,    70,    76,    80,    82,    84,    88,    91,    26,
   nil,   nil,   nil,   nil,    73,   nil,    15,   nil,   nil,   129,
   221,   131,   132,   nil,   195,    72,   137,   142,   143,   nil,
   nil,   nil,   nil,   104,    67,   nil,   nil,   296,    81,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   184,    69 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 70, :_reduce_3,
  2, 70, :_reduce_4,
  1, 73, :_reduce_5,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  3, 87, :_reduce_20,
  3, 87, :_reduce_21,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  4, 81, :_reduce_29,
  5, 81, :_reduce_30,
  3, 81, :_reduce_31,
  2, 81, :_reduce_32,
  1, 92, :_reduce_33,
  3, 92, :_reduce_34,
  1, 91, :_reduce_35,
  3, 91, :_reduce_36,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  5, 74, :_reduce_49,
  5, 74, :_reduce_50,
  5, 74, :_reduce_51,
  5, 85, :_reduce_52,
  2, 75, :_reduce_53,
  1, 114, :_reduce_54,
  2, 114, :_reduce_55,
  6, 76, :_reduce_56,
  2, 76, :_reduce_57,
  3, 115, :_reduce_58,
  3, 115, :_reduce_59,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  3, 116, :_reduce_62,
  1, 117, :_reduce_none,
  3, 117, :_reduce_64,
  1, 118, :_reduce_65,
  1, 118, :_reduce_66,
  3, 119, :_reduce_67,
  3, 119, :_reduce_68,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  4, 121, :_reduce_71,
  1, 108, :_reduce_72,
  3, 108, :_reduce_73,
  0, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 106, :_reduce_76,
  1, 97, :_reduce_77,
  1, 98, :_reduce_78,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 77, :_reduce_86,
  3, 77, :_reduce_87,
  3, 86, :_reduce_88,
  0, 110, :_reduce_89,
  1, 110, :_reduce_90,
  3, 110, :_reduce_91,
  3, 124, :_reduce_92,
  3, 125, :_reduce_93,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  0, 113, :_reduce_96,
  1, 113, :_reduce_97,
  3, 113, :_reduce_98,
  4, 105, :_reduce_99,
  3, 105, :_reduce_100,
  1, 96, :_reduce_101,
  2, 96, :_reduce_102,
  2, 127, :_reduce_103,
  1, 128, :_reduce_104,
  2, 128, :_reduce_105,
  1, 99, :_reduce_106,
  4, 90, :_reduce_107,
  4, 90, :_reduce_108,
  2, 79, :_reduce_109,
  5, 129, :_reduce_110,
  4, 129, :_reduce_111,
  0, 130, :_reduce_none,
  2, 130, :_reduce_113,
  4, 130, :_reduce_114,
  3, 130, :_reduce_115,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  3, 94, :_reduce_118,
  3, 94, :_reduce_119,
  3, 94, :_reduce_120,
  3, 94, :_reduce_121,
  3, 94, :_reduce_122,
  3, 94, :_reduce_123,
  3, 94, :_reduce_124,
  3, 94, :_reduce_125,
  3, 94, :_reduce_126,
  2, 94, :_reduce_127,
  3, 94, :_reduce_128,
  3, 94, :_reduce_129,
  3, 94, :_reduce_130,
  3, 94, :_reduce_131,
  3, 94, :_reduce_132,
  3, 94, :_reduce_133,
  2, 94, :_reduce_134,
  3, 94, :_reduce_135,
  3, 94, :_reduce_136,
  3, 94, :_reduce_137,
  5, 78, :_reduce_138,
  1, 133, :_reduce_139,
  2, 133, :_reduce_140,
  5, 134, :_reduce_141,
  4, 134, :_reduce_142,
  1, 135, :_reduce_143,
  3, 135, :_reduce_144,
  3, 100, :_reduce_145,
  1, 137, :_reduce_none,
  4, 137, :_reduce_147,
  1, 139, :_reduce_none,
  3, 139, :_reduce_149,
  3, 138, :_reduce_150,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_159,
  1, 136, :_reduce_none,
  1, 140, :_reduce_161,
  1, 141, :_reduce_none,
  3, 141, :_reduce_163,
  2, 80, :_reduce_164,
  6, 82, :_reduce_165,
  5, 82, :_reduce_166,
  7, 83, :_reduce_167,
  6, 83, :_reduce_168,
  6, 84, :_reduce_169,
  5, 84, :_reduce_170,
  1, 112, :_reduce_171,
  1, 107, :_reduce_172,
  1, 107, :_reduce_173,
  1, 144, :_reduce_174,
  3, 144, :_reduce_175,
  1, 146, :_reduce_176,
  1, 147, :_reduce_177,
  1, 147, :_reduce_178,
  1, 147, :_reduce_179,
  1, 147, :_reduce_none,
  0, 71, :_reduce_181,
  0, 148, :_reduce_182,
  1, 142, :_reduce_none,
  3, 142, :_reduce_184,
  4, 142, :_reduce_185,
  1, 149, :_reduce_none,
  3, 149, :_reduce_187,
  3, 150, :_reduce_188,
  1, 150, :_reduce_189,
  3, 150, :_reduce_190,
  1, 150, :_reduce_191,
  1, 145, :_reduce_none,
  2, 145, :_reduce_193,
  1, 143, :_reduce_none,
  2, 143, :_reduce_195,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 101, :_reduce_198,
  3, 102, :_reduce_199,
  4, 102, :_reduce_200,
  2, 102, :_reduce_201,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  0, 111, :_reduce_none,
  1, 111, :_reduce_205,
  1, 132, :_reduce_206,
  3, 131, :_reduce_207,
  4, 131, :_reduce_208,
  2, 131, :_reduce_209,
  1, 152, :_reduce_none,
  3, 152, :_reduce_211,
  3, 153, :_reduce_212,
  1, 154, :_reduce_213,
  1, 154, :_reduce_214,
  4, 123, :_reduce_215,
  1, 103, :_reduce_none,
  4, 103, :_reduce_217,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  3, 104, :_reduce_224 ]

racc_reduce_n = 225

racc_shift_n = 376

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67 }

racc_nt_base = 68

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "quotedtext",
  "name",
  "type",
  "boolean",
  "selector",
  "variable",
  "array",
  "hasharrayaccesses",
  "parameterlookup",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "classref",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key",
  "resourceish" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'grammar.ra', 72)
  def _reduce_20(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 75)
  def _reduce_21(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'grammar.ra', 83)
  def _reduce_29(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 90)
  def _reduce_30(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 96)
  def _reduce_31(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 103)
  def _reduce_32(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 113)
  def _reduce_34(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 117)
  def _reduce_35(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 118)
  def _reduce_36(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_49(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_50(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 140)
  def _reduce_51(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0], :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 147)
  def _reduce_52(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 154)
  def _reduce_53(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_54(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_55(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 176)
  def _reduce_56(val, _values, result)
      @lexer.commentpop
  Puppet.warning addcontext("Collection names must now be capitalized") if val[0] =~ /^[a-z]/
  type = val[0].downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_57(val, _values, result)
        if val[0] =~ /^[a-z]/
    Puppet.warning addcontext("Collection names must now be capitalized")
  end
  type = val[0].downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 216)
  def _reduce_58(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 224)
  def _reduce_59(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'grammar.ra', 237)
  def _reduce_62(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'grammar.ra', 242)
  def _reduce_64(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 246)
  def _reduce_65(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 247)
  def _reduce_66(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 250)
  def _reduce_67(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 255)
  def _reduce_68(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'grammar.ra', 264)
  def _reduce_71(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_72(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_73(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'grammar.ra', 277)
  def _reduce_76(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 281)
  def _reduce_77(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 285)
  def _reduce_78(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'grammar.ra', 297)
  def _reduce_86(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 303)
  def _reduce_87(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 307)
  def _reduce_88(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 313)
  def _reduce_89(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 315)
  def _reduce_90(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_91(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_92(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_93(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 335)
  def _reduce_96(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_97(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 339)
  def _reduce_98(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_99(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 350)
  def _reduce_100(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 356)
  def _reduce_101(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 357)
  def _reduce_102(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_103(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_104(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_105(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 365)
  def _reduce_106(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 369)
  def _reduce_107(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 372)
  def _reduce_108(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 376)
  def _reduce_109(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_110(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 391)
  def _reduce_111(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'grammar.ra', 404)
  def _reduce_113(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 407)
  def _reduce_114(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 411)
  def _reduce_115(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

module_eval(<<'.,.,', 'grammar.ra', 430)
  def _reduce_118(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 433)
  def _reduce_119(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 436)
  def _reduce_120(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 439)
  def _reduce_121(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 442)
  def _reduce_122(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_123(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_124(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 451)
  def _reduce_125(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_126(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 457)
  def _reduce_127(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_128(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_129(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_130(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_131(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_132(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_133(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_134(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_135(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_136(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_137(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 491)
  def _reduce_138(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_139(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 497)
  def _reduce_140(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_141(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_142(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 515)
  def _reduce_143(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 517)
  def _reduce_144(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_145(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 146 omitted

module_eval(<<'.,.,', 'grammar.ra', 527)
  def _reduce_147(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 148 omitted

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_149(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 542)
  def _reduce_150(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'grammar.ra', 554)
  def _reduce_159(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_161(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 162 omitted

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_163(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 564)
  def _reduce_164(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 574)
  def _reduce_165(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 582)
  def _reduce_166(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 590)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_168(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_169(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 611)
  def _reduce_170(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 615)
  def _reduce_171(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 617)
  def _reduce_172(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_173(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_174(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 626)
  def _reduce_175(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 631)
  def _reduce_176(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_177(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 635)
  def _reduce_178(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 636)
  def _reduce_179(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 180 omitted

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_181(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 644)
  def _reduce_182(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'grammar.ra', 649)
  def _reduce_184(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 652)
  def _reduce_185(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_187(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 664)
  def _reduce_188(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_189(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 671)
  def _reduce_190(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_191(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 192 omitted

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_193(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_195(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_198(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_199(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_200(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 694)
  def _reduce_201(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_205(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 703)
  def _reduce_206(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_207(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_208(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_209(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_211(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_212(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 737)
  def _reduce_213(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_214(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 741)
  def _reduce_215(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'grammar.ra', 746)
  def _reduce_217(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_224(val, _values, result)
      result = ast AST::ParameterLookup, :resource => val[0], :parameter => val[2][:value]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
