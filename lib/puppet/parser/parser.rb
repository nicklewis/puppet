#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 807)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'35,36,202,201,259,282,-131,89,93,85,248,52,92,93,162,217,212,92,337',
'32,375,162,88,-197,213,215,214,216,39,122,48,49,161,33,50,250,51,37',
'26,161,40,46,30,35,36,32,87,219,218,31,397,206,207,209,208,210,211,-123',
'204,205,52,-131,-131,-131,-131,203,38,121,35,36,123,39,335,48,49,225',
'33,50,328,51,37,26,89,40,46,30,35,36,32,52,361,283,31,259,257,62,98',
'88,360,-178,327,217,212,52,-184,-113,228,256,-244,38,213,215,214,216',
'39,122,48,49,161,33,50,87,51,37,26,324,40,46,30,35,36,32,-242,219,218',
'31,-180,206,207,209,208,210,211,320,204,205,52,35,36,280,279,203,38',
'121,204,205,123,39,278,48,49,203,33,50,93,51,37,26,92,40,46,30,35,36',
'32,52,276,275,31,311,82,97,122,188,37,233,35,36,46,52,95,96,32,350,193',
'38,31,204,205,192,39,347,48,49,203,33,50,52,51,37,26,188,40,46,30,35',
'36,32,339,106,121,31,193,123,228,276,275,192,259,364,340,281,52,35,36',
'259,282,93,38,113,342,92,52,140,138,142,137,139,82,135,143,144,181,172',
'318,134,166,188,35,36,32,161,145,133,167,391,82,345,193,304,37,233,305',
'192,46,52,35,36,32,264,141,147,31,259,265,306,39,357,48,49,356,33,50',
'52,51,37,26,52,40,46,30,35,36,32,331,270,-241,31,377,82,-177,188,273',
'37,233,276,275,46,52,35,36,32,193,357,38,31,356,192,-130,39,62,48,49',
'-180,33,50,52,51,37,26,-178,40,46,30,35,36,32,-177,-179,271,31,309,82',
'209,208,270,37,233,204,205,46,52,35,36,32,203,338,38,31,268,259,282',
'39,-97,48,49,-185,33,50,52,51,37,26,266,40,46,30,35,36,32,-124,254,253',
'31,396,82,93,252,245,37,131,353,40,46,52,35,36,32,303,354,38,31,259',
'265,245,39,242,48,49,85,33,50,52,51,37,26,165,40,46,30,35,36,32,97,-184',
'368,31,394,82,93,370,371,37,131,372,40,46,52,-183,-181,32,-246,-245',
'38,31,-243,270,-182,39,-179,48,49,160,33,50,52,51,37,26,125,40,46,30',
'35,36,32,209,208,113,31,367,204,205,35,36,381,382,80,203,-197,52,56',
'57,58,59,112,38,56,57,58,59,39,384,48,49,63,33,50,94,51,37,26,-228,40',
'46,30,82,386,32,387,37,79,31,324,46,35,36,84,32,106,62,107,31,52,392',
'35,36,-179,-180,38,61,53,358,52,398,35,36,105,399,106,,107,-44,-44,-44',
'-44,,,82,,,,37,79,,,46,105,82,,32,104,37,233,31,,46,103,82,,32,,37,79',
'31,52,46,,,,32,104,35,36,31,52,106,103,107,,,,35,36,,52,106,,107,,,',
'35,36,105,,106,,107,-40,-40,-40,-40,,105,82,,,,37,79,,,46,105,82,,32',
'104,37,79,31,,46,103,82,,32,104,37,79,31,52,46,103,,,32,104,35,36,31',
'52,106,103,107,,,,35,36,,52,106,,107,,,,35,36,105,,106,,107,-38,-38',
'-38,-38,,105,82,,,,37,79,,,46,105,82,,32,104,37,79,31,,46,103,82,,32',
'104,37,79,31,52,46,103,,,32,104,35,36,31,52,106,103,107,,,,35,36,,52',
'106,,107,,,,35,36,105,,106,,107,,,,,,105,82,,,,37,79,,,46,105,82,,32',
'104,37,79,31,,46,103,82,,32,104,37,79,31,52,46,103,,,32,104,35,36,31',
'52,106,103,107,,,,35,36,,52,106,,107,,,,35,36,105,158,106,,107,,,,,',
'105,82,,,,37,79,,,46,105,82,,32,104,37,79,31,,46,103,82,,32,104,37,79',
'31,52,46,103,,,32,104,35,36,31,52,106,103,107,,,,35,36,,52,106,,107',
',,,35,36,105,,106,,107,,,,,,105,82,,,,37,79,,,46,105,82,,32,104,37,79',
'31,,46,103,82,,32,104,37,79,31,52,46,103,,,32,104,35,36,31,52,106,103',
'107,,,,35,36,,52,106,,107,,,,35,36,105,,106,,107,,,,,,105,82,,,,37,79',
',,46,105,82,,32,104,37,79,31,,46,103,82,,32,104,37,79,31,52,46,103,',
',32,104,35,36,31,52,106,103,107,,,,35,36,,52,106,,,,,,35,36,105,,106',
',107,,,,,,,82,,,,37,79,,,46,105,82,,32,104,37,233,31,,46,103,82,,32',
',37,79,31,52,46,,,,32,104,35,36,31,52,106,103,107,,,,35,36,,52,106,164',
'107,,,,35,36,105,,106,,107,,,,35,36,105,82,106,,,37,79,,,46,105,82,',
'32,104,37,79,31,,46,103,82,,32,104,37,79,31,52,46,103,82,,32,104,37',
'79,31,52,46,103,,,32,,35,36,31,52,106,,107,,,,35,36,,52,106,,107,,,',
'35,36,105,,106,,107,,,,,,105,82,,,,37,79,,,46,105,82,,32,104,37,79,31',
',46,103,82,,32,104,37,79,31,52,46,103,,,32,104,35,36,31,52,106,103,107',
',,,35,36,,52,106,,107,206,207,209,208,,105,,204,205,,,,,,203,105,82',
',,,37,79,,,46,,82,,32,104,37,79,31,,46,103,,,32,104,35,36,31,52,106',
'103,107,,,,35,36,,52,106,,107,,,,35,36,105,262,106,,107,,,,,,105,82',
',,,37,79,,,46,105,82,,32,104,37,79,31,,46,103,82,,32,104,37,79,31,52',
'46,103,,,32,104,35,36,31,52,106,103,107,,,,35,36,,52,106,,107,,,,35',
'36,105,,106,,107,,,,,,105,82,,,,37,79,,,46,105,82,,32,104,37,79,31,',
'46,103,82,,32,104,37,79,31,52,46,103,,,32,104,35,36,31,52,106,103,107',
',,,35,36,,52,106,,107,,,,35,36,105,,106,164,107,,,,35,36,105,82,106',
',,37,79,,,46,105,82,,32,104,37,79,31,,46,103,82,,32,104,37,79,31,52',
'46,103,82,,32,104,37,79,31,52,46,103,255,,32,,,,31,52,,,217,212,,,,',
',52,,213,215,214,216,,,206,207,209,208,,35,36,204,205,106,,107,,,203',
',,219,218,,,206,207,209,208,210,211,105,204,205,35,36,,,106,203,107',
',82,,,,37,79,,,46,35,36,,32,104,105,236,31,,,103,,,,,,82,,52,,37,79',
',,46,,,,32,104,35,36,31,82,106,103,107,37,233,,,46,,52,,32,,,,31,,,105',
',,,,,,,52,,,82,,,,37,79,,,46,,,231,32,104,,,31,,,103,217,212,,,,,232',
'52,,213,215,214,216,,,217,212,,,,,,,,213,215,214,216,,,,,219,218,,,206',
'207,209,208,210,211,,204,205,,,219,218,,203,206,207,209,208,210,211',
'230,204,205,,,,,,203,217,212,,,,,,,,213,215,214,216,,,217,212,,,,,,',
',213,215,214,216,,,,,219,218,,,206,207,209,208,210,211,,204,205,,,,',
',203,206,207,209,208,210,211,,204,205,217,212,,,,203,,,,213,215,214',
'216,,,217,212,,,,,,,,213,215,214,216,,,,,219,218,,,206,207,209,208,210',
'211,,204,205,,,,218,,203,206,207,209,208,210,211,,204,205,217,212,,',
',203,,,302,213,215,214,216,,,217,212,,,,,,,,213,215,214,216,,,,,219',
'218,,,206,207,209,208,210,211,,204,205,,,219,218,,203,206,207,209,208',
'210,211,,204,205,217,212,,,,203,,,,213,215,214,216,,,217,212,,,,,,,',
'213,215,214,216,,,,,,,,,206,207,209,208,210,211,,204,205,,,219,218,',
'203,206,207,209,208,210,211,,204,205,217,212,,,,203,,,,213,215,214,216',
',,217,212,,,,,,,,213,215,214,216,,,,,219,218,,,206,207,209,208,210,211',
',204,205,,,,,,203,206,207,209,208,210,211,,204,205,217,212,,,,203,,',
',213,215,214,216,,,217,212,,,,,,,,213,215,214,216,,,,,219,218,,,206',
'207,209,208,210,211,,204,205,,,219,218,,203,206,207,209,208,210,211',
',204,205,217,212,,,,203,,,,213,215,214,216,,,217,212,,,,,,,,213,215',
'214,216,,,,,219,218,,,206,207,209,208,210,211,,204,205,,,219,218,,203',
'206,207,209,208,210,211,,204,205,217,212,,,,203,,,,213,215,214,216,',
',,212,,,,,,,,213,,,,,,,,219,218,212,,206,207,209,208,210,211,213,204',
'205,,,,,212,203,206,207,209,208,210,211,213,204,205,,,,,,203,,212,,206',
'207,209,208,210,211,213,204,205,,,,,,203,206,207,209,208,210,211,,204',
'205,,,,,,203,,,,206,207,209,208,210,211,,204,205,140,138,142,137,139',
'203,135,143,144,151,183,,134,136,,,,,,145,133,146,140,138,142,137,139',
',135,143,144,151,183,,134,136,,141,147,,,145,133,146,140,138,142,137',
'139,,135,143,144,151,183,,134,136,,141,147,,,145,133,146,140,138,142',
'137,139,,135,143,144,151,149,,134,136,,141,147,,,145,133,146,140,138',
'142,137,139,,135,143,144,151,149,,134,136,,141,147,,,145,133,146,206',
'207,209,208,210,211,,204,205,,,,,,203,141,147,206,207,209,208,210,211',
',204,205,,,,,,203' ]
        racc_action_table = arr = ::Array.new(2363, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,100,100,261,261,264,28,29,28,118,204,29,327,79,100,100,327,261,29',
'327,131,28,131,100,100,100,100,0,51,0,0,79,0,0,118,0,0,0,131,0,0,0,390',
'390,0,28,100,100,0,390,100,100,100,100,100,100,256,100,100,0,264,264',
'264,264,100,0,51,107,107,51,390,257,390,390,107,390,390,247,390,390',
'390,68,390,390,390,2,2,390,51,314,198,390,157,157,73,34,68,314,68,246',
'198,198,390,34,172,107,157,73,390,198,198,198,198,2,248,2,2,172,2,2',
'68,2,2,2,245,2,2,2,307,307,2,71,198,198,2,71,198,198,198,198,198,198',
'243,198,198,2,232,232,194,189,198,2,248,290,290,248,307,189,307,307',
'290,307,307,49,307,307,307,49,307,307,307,231,231,307,248,194,194,307',
'231,232,33,250,87,232,232,305,305,232,307,33,33,232,305,87,307,232,291',
'291,87,231,277,231,231,291,231,231,232,231,231,231,188,231,231,231,84',
'84,231,265,84,250,231,188,250,305,277,277,188,316,316,267,195,231,363',
'363,195,195,50,231,242,269,50,250,84,84,84,84,84,84,84,84,84,84,84,237',
'84,84,274,372,372,84,233,84,84,84,372,363,272,274,224,363,363,224,274',
'363,84,236,236,363,163,84,84,363,163,163,227,372,354,372,372,354,372',
'372,363,372,372,372,205,372,372,372,328,328,372,251,182,67,372,328,236',
'67,88,184,236,236,184,184,236,372,361,361,236,88,311,372,236,311,88',
'181,328,179,328,328,177,328,328,236,328,328,328,175,328,328,328,230',
'230,328,174,173,170,328,230,361,288,288,169,361,361,288,288,361,328',
'55,55,361,288,263,328,361,168,263,263,230,167,230,230,166,230,230,361',
'230,230,230,165,230,230,230,382,382,230,158,152,149,230,382,55,55,148',
'117,55,55,308,55,55,230,60,60,55,223,310,230,55,223,223,116,382,115',
'382,382,90,382,382,55,382,382,382,83,382,382,382,381,381,382,82,81,321',
'382,381,60,60,322,324,60,60,325,60,60,382,78,77,60,75,74,382,60,72,344',
'69,381,66,381,381,64,381,381,60,381,381,381,53,381,381,381,320,320,381',
'289,289,48,381,320,289,289,26,26,357,360,26,289,26,381,20,20,20,20,41',
'381,19,19,19,19,320,362,320,320,26,320,320,30,320,320,320,364,320,320',
'320,26,366,320,369,26,26,320,370,26,219,219,27,26,219,25,219,26,320',
'376,312,312,23,22,320,21,1,312,26,393,36,36,219,395,36,,36,9,9,9,9,',
',219,,,,219,219,,,219,36,312,,219,219,312,312,219,,312,219,36,,312,',
'36,36,312,219,36,,,,36,36,38,38,36,312,38,36,38,,,,39,39,,36,39,,39',
',,,40,40,38,,40,,40,7,7,7,7,,39,38,,,,38,38,,,38,40,39,,38,38,39,39',
'38,,39,38,40,,39,39,40,40,39,38,40,39,,,40,40,356,356,40,39,356,40,356',
',,,218,218,,40,218,,218,,,,217,217,356,,217,,217,5,5,5,5,,218,356,,',
',356,356,,,356,217,218,,356,356,218,218,356,,218,356,217,,218,218,217',
'217,218,356,217,218,,,217,217,216,216,217,218,216,217,216,,,,215,215',
',217,215,,215,,,,62,62,216,,62,,62,,,,,,215,216,,,,216,216,,,216,62',
'215,,216,216,215,215,216,,215,216,62,,215,215,62,62,215,216,62,215,',
',62,62,63,63,62,215,63,62,63,,,,214,214,,62,214,,214,,,,213,213,63,63',
'213,,213,,,,,,214,63,,,,63,63,,,63,213,214,,63,63,214,214,63,,214,63',
'213,,214,214,213,213,214,63,213,214,,,213,213,212,212,213,214,212,213',
'212,,,,211,211,,213,211,,211,,,,210,210,212,,210,,210,,,,,,211,212,',
',,212,212,,,212,210,211,,212,212,211,211,212,,211,212,210,,211,211,210',
'210,211,212,210,211,,,210,210,209,209,210,211,209,210,209,,,,208,208',
',210,208,,208,,,,207,207,209,,207,,207,,,,,,208,209,,,,209,209,,,209',
'207,208,,209,209,208,208,209,,208,209,207,,208,208,207,207,208,209,207',
'208,,,207,207,206,206,207,208,206,207,206,,,,268,268,,207,268,,,,,,278',
'278,206,,278,,278,,,,,,,206,,,,206,206,,,206,278,268,,206,206,268,268',
'206,,268,206,278,,268,,278,278,268,206,278,,,,278,278,203,203,278,268',
'203,278,203,,,,80,80,,278,80,80,80,,,,258,258,203,,258,,258,,,,318,318',
'80,203,318,,,203,203,,,203,258,80,,203,203,80,80,203,,80,203,258,,80',
'80,258,258,80,203,258,80,318,,258,258,318,318,258,80,318,258,,,318,',
'202,202,318,258,202,,202,,,,371,371,,318,371,,371,,,,279,279,202,,279',
',279,,,,,,371,202,,,,202,202,,,202,279,371,,202,202,371,371,202,,371',
'202,279,,371,371,279,279,371,202,279,371,,,279,279,162,162,279,371,162',
'279,162,,,,89,89,,279,89,,89,292,292,292,292,,162,,292,292,,,,,,292',
'89,162,,,,162,162,,,162,,89,,162,162,89,89,162,,89,162,,,89,89,161,161',
'89,162,161,89,161,,,,95,95,,89,95,,95,,,,96,96,161,161,96,,96,,,,,,95',
'161,,,,161,161,,,161,96,95,,161,161,95,95,161,,95,161,96,,95,95,96,96',
'95,161,96,95,,,96,96,97,97,96,95,97,96,97,,,,98,98,,96,98,,98,,,,103',
'103,97,,103,,103,,,,,,98,97,,,,97,97,,,97,103,98,,97,97,98,98,97,,98',
'97,103,,98,98,103,103,98,97,103,98,,,103,103,104,104,103,98,104,103',
'104,,,,105,105,,103,105,,105,,,,106,106,104,,106,106,106,,,,160,160',
'105,104,160,,,104,104,,,104,106,105,,104,104,105,105,104,,105,104,106',
',105,105,106,106,105,104,106,105,160,,106,106,160,160,106,105,160,106',
'156,,160,,,,160,106,,,156,156,,,,,,160,,156,156,156,156,,,293,293,293',
'293,,306,306,293,293,306,,306,,,293,,,156,156,,,156,156,156,156,156',
'156,306,156,156,254,254,,,254,156,254,,306,,,,306,306,,,306,112,112',
',306,306,254,112,306,,,306,,,,,,254,,306,,254,254,,,254,,,,254,254,253',
'253,254,112,253,254,253,112,112,,,112,,254,,112,,,,112,,,253,,,,,,,',
'112,,,253,,,,253,253,,,253,,,110,253,253,,,253,,,253,110,110,,,,,111',
'253,,110,110,110,110,,,111,111,,,,,,,,111,111,111,111,,,,,110,110,,',
'110,110,110,110,110,110,,110,110,,,111,111,,110,111,111,111,111,111',
'111,108,111,111,,,,,,111,108,108,,,,,,,,108,108,108,108,,,349,349,,',
',,,,,349,349,349,349,,,,,108,108,,,108,108,108,108,108,108,,108,108',
',,,,,108,349,349,349,349,349,349,,349,349,352,352,,,,349,,,,352,352',
'352,352,,,301,301,,,,,,,,301,301,301,301,,,,,352,352,,,352,352,352,352',
'352,352,,352,352,,,,301,,352,301,301,301,301,301,301,,301,301,222,222',
',,,301,,,222,222,222,222,222,,,389,389,,,,,,,,389,389,389,389,,,,,222',
'222,,,222,222,222,222,222,222,,222,222,,,389,389,,222,389,389,389,389',
'389,389,,389,389,300,300,,,,389,,,,300,300,300,300,,,159,159,,,,,,,',
'159,159,159,159,,,,,,,,,300,300,300,300,300,300,,300,300,,,159,159,',
'300,159,159,159,159,159,159,,159,159,199,199,,,,159,,,,199,199,199,199',
',,348,348,,,,,,,,348,348,348,348,,,,,199,199,,,199,199,199,199,199,199',
',199,199,,,,,,199,348,348,348,348,348,348,,348,348,336,336,,,,348,,',
',336,336,336,336,,,334,334,,,,,,,,334,334,334,334,,,,,336,336,,,336',
'336,336,336,336,336,,336,336,,,334,334,,336,334,334,334,334,334,334',
',334,334,333,333,,,,334,,,,333,333,333,333,,,197,197,,,,,,,,197,197',
'197,197,,,,,333,333,,,333,333,333,333,333,333,,333,333,,,197,197,,333',
'197,197,197,197,197,197,,197,197,196,196,,,,197,,,,196,196,196,196,',
',,296,,,,,,,,296,,,,,,,,196,196,297,,196,196,196,196,196,196,297,196',
'196,,,,,298,196,296,296,296,296,296,296,298,296,296,,,,,,296,,299,,297',
'297,297,297,297,297,299,297,297,,,,,,297,298,298,298,298,298,298,,298',
'298,,,,,,298,,,,299,299,299,299,299,299,,299,299,85,85,85,85,85,299',
'85,85,85,85,85,,85,85,,,,,,85,85,85,271,271,271,271,271,,271,271,271',
'271,271,,271,271,,85,85,,,271,271,271,270,270,270,270,270,,270,270,270',
'270,270,,270,270,,271,271,,,270,270,270,252,252,252,252,252,,252,252',
'252,252,252,,252,252,,270,270,,,252,252,252,61,61,61,61,61,,61,61,61',
'61,61,,61,61,,252,252,,,61,61,61,295,295,295,295,295,295,,295,295,,',
',,,295,61,61,294,294,294,294,294,294,,294,294,,,,,,294' ]
        racc_action_check = arr = ::Array.new(2363, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   541,    84,   nil,   nil,   623,   nil,   556,   nil,   489,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   434,
   428,   532,   515,   514,   nil,   524,   481,   519,     1,   -28,
   464,   nil,   nil,   175,    81,   nil,   543,   nil,   590,   600,
   610,   472,   nil,   nil,   nil,   nil,   nil,   nil,   476,   128,
   201,    27,   nil,   469,   nil,   360,   nil,   nil,   nil,   nil,
   403,  2279,   744,   791,   450,   nil,   436,   287,    76,   434,
   nil,   113,   436,    89,   433,   432,   nil,   426,   425,     8,
  1069,   411,   427,   407,   213,  2191,   nil,   159,   287,  1213,
   411,   nil,   nil,   nil,   nil,  1270,  1280,  1327,  1337,   nil,
    -2,   nil,   nil,  1347,  1394,  1404,  1414,    66,  1673,   nil,
  1607,  1622,  1539,   nil,   nil,   404,   390,   374,    -2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   385,   340,
   nil,   nil,   380,   nil,   nil,   nil,  1462,    82,   367,  1868,
  1424,  1260,  1203,   272,   nil,   343,   353,   350,   328,   343,
   329,   nil,    94,   325,   324,   317,   nil,   310,   nil,   324,
   nil,   305,   293,   nil,   266,   nil,   nil,   nil,   187,   132,
   nil,   nil,   nil,   nil,   127,   224,  2093,  2048,    84,  1913,
   nil,   nil,  1136,  1059,   -51,   235,   992,   945,   935,   925,
   878,   868,   858,   811,   801,   734,   724,   677,   667,   523,
   nil,   nil,  1793,   401,   260,   nil,   nil,   274,   nil,   nil,
   342,   170,   145,   237,   nil,   nil,   274,   243,   nil,   nil,
   nil,   nil,   237,   135,   nil,    90,    63,    70,   113,   nil,
   180,   295,  2257,  1569,  1522,   nil,    34,    47,  1079,   nil,
   nil,    -7,   nil,   359,    -2,   211,   nil,   221,  1002,   231,
  2235,  2213,   258,   nil,   233,   nil,   nil,   176,  1012,  1156,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   298,   421,
    94,   137,  1169,  1441,  2295,  2278,  2108,  2126,  2141,  2159,
  1853,  1748,   nil,   nil,   nil,   184,  1497,   127,   392,   nil,
   400,   292,   533,   nil,    78,   nil,   217,   nil,  1089,   nil,
   471,   410,   428,   nil,   426,   436,   nil,   -23,   299,   nil,
   nil,   nil,   nil,  2033,  1988,   nil,  1973,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   444,   nil,   nil,   nil,  1928,  1688,
   nil,   nil,  1733,   nil,   256,   nil,   657,   477,   nil,   nil,
   478,   317,   493,   231,   503,   nil,   508,   nil,   nil,   494,
   488,  1146,   256,   nil,   nil,   nil,   525,   nil,   nil,   nil,
   nil,   428,   385,   nil,   nil,   nil,   nil,   nil,   nil,  1808,
    41,   nil,   nil,   535,   nil,   539,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -206,  -248,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
  -248,   -39,   -41,   -42,   -43,   -45,   -98,  -248,  -178,  -248,
   -76,   -97,   -99,  -221,  -239,  -125,  -248,  -130,  -248,  -248,
  -248,  -248,  -177,  -181,  -182,  -183,  -185,  -186,  -248,  -248,
  -198,  -248,  -229,  -248,    -4,  -248,   -46,   -47,   -48,   -49,
  -248,  -120,  -248,  -248,   -53,   -54,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -98,
  -248,  -239,  -221,  -248,  -110,  -110,   -78,  -206,  -206,  -248,
  -248,   -75,  -197,  -198,   -77,  -248,  -248,  -248,  -248,  -126,
  -248,  -142,  -143,  -248,  -248,  -248,  -248,  -248,  -248,  -135,
  -248,  -248,  -248,  -187,  -188,  -190,  -206,  -206,  -206,  -199,
  -201,  -202,  -203,  -204,  -205,   400,   -37,   -38,   -39,   -40,
   -44,   -98,   -36,   -21,   -22,   -23,   -24,   -25,   -26,   -27,
   -28,   -29,   -30,   -31,   -32,   -33,   -34,   -35,  -227,  -113,
  -114,  -115,  -248,  -118,  -119,  -121,  -248,  -248,   -52,   -56,
  -248,  -248,  -248,  -248,  -224,  -248,   -24,   -34,   -95,  -227,
  -248,   -93,   -98,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -111,  -115,  -227,  -113,  -248,   -81,   -82,   -84,  -206,  -248,
   -90,   -91,   -98,  -221,  -248,  -248,  -107,  -109,  -248,  -108,
  -127,  -128,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -153,  -160,  -248,  -248,  -248,  -232,  -233,  -248,  -236,  -237,
  -248,  -248,  -248,   -98,  -171,  -172,  -248,  -248,  -178,  -179,
  -180,  -184,  -248,  -248,  -208,  -207,  -206,  -248,  -248,  -215,
  -248,  -248,  -228,  -248,  -248,  -240,   -50,  -226,  -248,  -225,
   -55,  -248,  -124,  -248,  -222,  -226,  -247,  -248,   -96,  -248,
  -228,  -110,  -248,   -79,  -248,   -86,   -87,  -248,  -248,  -248,
   -80,  -132,  -226,  -238,  -129,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -154,  -155,  -156,  -157,  -158,  -159,
  -161,  -162,  -163,  -222,  -230,  -248,  -248,    -5,  -248,  -134,
  -248,  -138,  -248,  -165,  -248,  -169,  -227,  -174,  -248,  -189,
  -248,  -248,  -227,  -211,  -214,  -248,  -217,  -248,  -248,  -200,
  -216,   -74,  -122,  -117,  -116,   -51,   -57,  -123,  -131,  -223,
   -71,   -94,   -72,  -112,  -227,   -73,   -83,   -85,   -88,   -89,
  -231,  -234,  -235,  -133,  -138,  -137,  -248,  -248,  -164,  -166,
  -248,  -248,  -248,  -248,  -226,  -176,  -248,  -192,  -209,  -248,
  -228,  -248,  -248,  -218,  -219,  -220,  -248,  -196,   -92,  -136,
  -139,  -248,  -248,  -170,  -173,  -175,  -191,  -210,  -212,  -213,
  -248,  -194,  -195,  -248,  -141,  -248,  -168,  -193,  -140,  -167 ]

racc_goto_table = [
    28,    54,    28,    44,   109,    44,    65,     2,   116,   117,
   237,   235,   124,   153,   226,    42,   119,    42,   251,    99,
     3,   114,    25,   171,    25,   155,   323,   184,   194,    90,
   169,   182,   130,   157,   178,   355,   313,   130,    91,   269,
   234,   126,   243,   246,   200,    43,   132,    43,    55,    60,
   163,   346,   272,   312,   148,    28,   316,   267,    44,   195,
    28,   115,   168,    44,   127,   325,   118,   247,   363,   127,
    42,   330,   308,   310,   321,    42,   223,    25,   379,   322,
    64,   373,    25,   224,   175,     1,   nil,    44,   nil,   nil,
   nil,   nil,   nil,   nil,     7,   nil,     7,   nil,   nil,   174,
    43,   nil,   191,   191,   nil,    43,   179,   nil,   nil,    45,
   nil,    45,   238,   nil,   nil,    44,   359,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,    24,    42,   277,    43,
   315,   261,   263,   nil,   237,   317,   244,   244,   249,    21,
   260,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   129,
   nil,   388,   nil,   nil,   129,   nil,   nil,    43,   nil,   nil,
   nil,   nil,   366,   nil,    45,   286,   287,   nil,   nil,    45,
   376,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,   nil,   nil,   nil,    24,   284,   362,   nil,    34,   nil,
    34,   nil,   369,    45,   128,   nil,   nil,   nil,   nil,   128,
   nil,   nil,   nil,   191,   153,   nil,   nil,   341,   176,   124,
   315,   124,   351,   329,   378,   319,   332,   344,   178,   nil,
   nil,    45,   343,   393,   395,    23,   nil,    23,   nil,   nil,
    28,    28,   238,    44,    44,    44,   238,   nil,   nil,    44,
   nil,   nil,   nil,   nil,   nil,    42,    42,    42,   nil,   nil,
   nil,    42,    25,    25,   nil,   nil,   nil,   nil,   nil,   383,
   nil,   237,   385,   nil,   nil,   nil,   326,   nil,   175,   nil,
   nil,    44,   nil,   nil,   nil,    43,    43,    43,   nil,   nil,
    23,    43,   nil,   174,   nil,    23,   374,   nil,   nil,   191,
   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   365,   nil,
   241,   nil,   nil,   nil,   nil,   nil,    54,    28,   nil,   173,
    44,   nil,   238,    43,   nil,    44,   nil,   nil,   nil,   nil,
    28,   380,    42,    44,     7,     7,   nil,    42,    28,    25,
   nil,    44,   229,   nil,   nil,    42,   nil,   239,   nil,    45,
    45,    45,    25,    42,   nil,    45,   nil,   nil,   nil,   nil,
    25,   nil,    43,   nil,    24,    24,   nil,    43,   nil,   nil,
   nil,   238,   nil,   238,    44,    43,    44,   nil,   nil,    21,
    21,   nil,    28,    43,   nil,    44,    42,    45,    42,   390,
   nil,    28,    28,   nil,    44,    44,   nil,    42,   nil,    54,
    28,   nil,   176,    44,    25,   nil,    42,    42,   nil,   nil,
   nil,     7,   nil,    25,    25,    42,    43,   nil,    43,   nil,
   nil,   nil,    25,   nil,     7,   nil,    45,    43,    34,    34,
   241,    45,     7,   nil,   241,   nil,    43,    43,   nil,    45,
   nil,    24,   nil,   nil,   nil,    43,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,    21,    22,   nil,    22,
   nil,   nil,    24,   nil,   nil,    23,    23,   239,   nil,    21,
   nil,   239,   nil,   nil,   nil,   nil,     7,    21,   nil,   nil,
    45,   nil,    45,   nil,   nil,     7,     7,   nil,   nil,   nil,
   nil,    45,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,
    45,    45,   nil,   173,   nil,    34,    24,   nil,   nil,    45,
   241,   nil,    22,   nil,   nil,    24,    24,    22,    34,   nil,
   nil,    21,   nil,   nil,    24,   100,    34,   108,   110,   111,
    21,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   229,   177,    23,   nil,   190,   190,   nil,   239,   nil,   nil,
   nil,   156,   nil,   nil,   nil,    23,   nil,   nil,   nil,   241,
   nil,   241,   nil,    23,   nil,   nil,   nil,   nil,   nil,   240,
    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,
    34,   nil,   nil,   nil,   196,   197,   198,   199,    34,   nil,
   nil,   nil,   220,   221,   222,   nil,   239,   nil,   239,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,   240,
   nil,   100,   285,   240,   nil,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   177,   nil,   nil,   nil,   nil,
   nil,   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   333,   334,   nil,   nil,   nil,   336,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   348,   349,   240,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   352,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,   nil,
   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,
   nil,   nil,   nil,   nil,   nil,   110,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   389 ]

racc_goto_check = [
    35,     4,    35,    36,    63,    36,    31,     2,    41,    41,
    70,    72,    66,    57,    87,    34,    80,    34,    45,    61,
     3,    74,    28,    54,    28,    60,    84,    49,    49,    35,
    44,    44,    10,    29,    37,    64,    68,    10,     6,    45,
    71,    22,    76,    76,    62,    39,    22,    39,    23,    23,
    29,    50,    45,    67,    46,    35,    73,    43,    36,    29,
    35,    75,    42,    36,     6,    77,    78,    79,    33,     6,
    34,    81,     5,     5,    82,    34,    29,    28,    64,    83,
    30,    85,    28,    86,    35,     1,   nil,    36,   nil,   nil,
   nil,   nil,   nil,   nil,     8,   nil,     8,   nil,   nil,    34,
    39,   nil,    34,    34,   nil,    39,    28,   nil,   nil,    40,
   nil,    40,    35,   nil,   nil,    36,    68,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,    27,    34,    49,    39,
    70,    29,    29,   nil,    70,    72,     3,     3,     3,    24,
    31,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,
   nil,    84,   nil,   nil,     8,   nil,   nil,    39,   nil,   nil,
   nil,   nil,     5,   nil,    40,    66,    66,   nil,   nil,    40,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,   nil,   nil,   nil,    27,    61,    45,   nil,    56,   nil,
    56,   nil,    45,    40,    24,   nil,   nil,   nil,   nil,    24,
   nil,   nil,   nil,    34,    57,   nil,   nil,    54,    27,    66,
    70,    66,    87,    80,    45,    74,    60,    44,    37,   nil,
   nil,    40,    57,     5,     5,    26,   nil,    26,   nil,   nil,
    35,    35,    35,    36,    36,    36,    35,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,    34,    34,    34,   nil,   nil,
   nil,    34,    28,    28,   nil,   nil,   nil,   nil,   nil,    70,
   nil,    70,    72,   nil,   nil,   nil,     3,   nil,    35,   nil,
   nil,    36,   nil,   nil,   nil,    39,    39,    39,   nil,   nil,
    26,    39,   nil,    34,   nil,    26,    41,   nil,   nil,    34,
    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,
    56,   nil,   nil,   nil,   nil,   nil,     4,    35,   nil,    26,
    36,   nil,    35,    39,   nil,    36,   nil,   nil,   nil,   nil,
    35,    63,    34,    36,     8,     8,   nil,    34,    35,    28,
   nil,    36,    26,   nil,   nil,    34,   nil,    26,   nil,    40,
    40,    40,    28,    34,   nil,    40,   nil,   nil,   nil,   nil,
    28,   nil,    39,   nil,    27,    27,   nil,    39,   nil,   nil,
   nil,    35,   nil,    35,    36,    39,    36,   nil,   nil,    24,
    24,   nil,    35,    39,   nil,    36,    34,    40,    34,     2,
   nil,    35,    35,   nil,    36,    36,   nil,    34,   nil,     4,
    35,   nil,    27,    36,    28,   nil,    34,    34,   nil,   nil,
   nil,     8,   nil,    28,    28,    34,    39,   nil,    39,   nil,
   nil,   nil,    28,   nil,     8,   nil,    40,    39,    56,    56,
    56,    40,     8,   nil,    56,   nil,    39,    39,   nil,    40,
   nil,    27,   nil,   nil,   nil,    39,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,    24,    25,   nil,    25,
   nil,   nil,    27,   nil,   nil,    26,    26,    26,   nil,    24,
   nil,    26,   nil,   nil,   nil,   nil,     8,    24,   nil,   nil,
    40,   nil,    40,   nil,   nil,     8,     8,   nil,   nil,   nil,
   nil,    40,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,
    40,    40,   nil,    26,   nil,    56,    27,   nil,   nil,    40,
    56,   nil,    25,   nil,   nil,    27,    27,    25,    56,   nil,
   nil,    24,   nil,   nil,    27,    32,    56,    32,    32,    32,
    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
    26,    25,    26,   nil,    25,    25,   nil,    26,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    26,   nil,   nil,   nil,    56,
   nil,    56,   nil,    26,   nil,   nil,   nil,   nil,   nil,    25,
    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,
    56,   nil,   nil,   nil,    32,    32,    32,    32,    56,   nil,
   nil,   nil,    32,    32,    32,   nil,    26,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,    25,    25,
   nil,    32,    32,    25,   nil,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    32,    32,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,    32,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,    32,    32,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,    25,
   nil,   nil,   nil,   nil,   nil,    32,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32 ]

racc_goto_pointer = [
   nil,    85,     7,    20,    -1,  -158,     9,   nil,    94,   nil,
   -23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -14,    29,   139,   447,   225,   124,    22,   -30,
    54,   -20,   479,  -248,    15,     0,     3,   -50,   nil,    45,
   109,   -41,   -22,  -111,   -54,  -130,    -7,   nil,   nil,   -60,
  -223,   nil,   nil,   nil,   -61,   nil,   188,   -48,   nil,   nil,
   -36,   -17,   -56,   -35,  -276,   nil,   -39,  -179,  -196,   nil,
  -102,   -72,  -101,  -180,   -27,    13,   -74,  -181,    15,   -51,
   -35,  -179,  -171,  -166,  -219,  -246,   -24,   -93,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   307,   185,     4,   nil,     5,     6,    76,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   150,    20,   nil,    75,    71,    66,    70,    73,   nil,
   nil,   101,   159,   258,    67,    68,    69,    72,    74,    77,
    78,    27,   nil,   nil,   nil,   nil,   nil,    29,    86,   nil,
   186,   274,   187,   189,   nil,   170,    81,   180,   152,   154,
   nil,   nil,   nil,   nil,   nil,   102,    47,   nil,   nil,   314,
    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   120,   nil,   nil,   nil,   nil,   nil,   nil,   227,    83 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  4, 83, :_reduce_50,
  5, 83, :_reduce_51,
  3, 83, :_reduce_52,
  2, 83, :_reduce_53,
  1, 99, :_reduce_54,
  3, 99, :_reduce_55,
  1, 98, :_reduce_56,
  3, 98, :_reduce_57,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  5, 75, :_reduce_71,
  5, 75, :_reduce_72,
  5, 75, :_reduce_73,
  5, 87, :_reduce_74,
  2, 76, :_reduce_75,
  1, 116, :_reduce_76,
  2, 116, :_reduce_77,
  2, 77, :_reduce_78,
  3, 117, :_reduce_79,
  3, 117, :_reduce_80,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_83,
  1, 119, :_reduce_none,
  3, 119, :_reduce_85,
  1, 120, :_reduce_86,
  1, 120, :_reduce_87,
  3, 121, :_reduce_88,
  3, 121, :_reduce_89,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_92,
  1, 111, :_reduce_93,
  3, 111, :_reduce_94,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_97,
  1, 103, :_reduce_98,
  1, 104, :_reduce_99,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 78, :_reduce_107,
  3, 78, :_reduce_108,
  3, 88, :_reduce_109,
  0, 113, :_reduce_110,
  1, 113, :_reduce_111,
  3, 113, :_reduce_112,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_116,
  3, 128, :_reduce_117,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_120,
  1, 115, :_reduce_121,
  3, 115, :_reduce_122,
  4, 108, :_reduce_123,
  3, 108, :_reduce_124,
  1, 95, :_reduce_125,
  2, 95, :_reduce_126,
  2, 130, :_reduce_127,
  1, 131, :_reduce_128,
  2, 131, :_reduce_129,
  1, 105, :_reduce_130,
  4, 93, :_reduce_131,
  4, 93, :_reduce_132,
  5, 81, :_reduce_133,
  4, 81, :_reduce_134,
  2, 80, :_reduce_135,
  5, 132, :_reduce_136,
  4, 132, :_reduce_137,
  0, 133, :_reduce_none,
  2, 133, :_reduce_139,
  4, 133, :_reduce_140,
  3, 133, :_reduce_141,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 101, :_reduce_144,
  3, 101, :_reduce_145,
  3, 101, :_reduce_146,
  3, 101, :_reduce_147,
  3, 101, :_reduce_148,
  3, 101, :_reduce_149,
  3, 101, :_reduce_150,
  3, 101, :_reduce_151,
  3, 101, :_reduce_152,
  2, 101, :_reduce_153,
  3, 101, :_reduce_154,
  3, 101, :_reduce_155,
  3, 101, :_reduce_156,
  3, 101, :_reduce_157,
  3, 101, :_reduce_158,
  3, 101, :_reduce_159,
  2, 101, :_reduce_160,
  3, 101, :_reduce_161,
  3, 101, :_reduce_162,
  3, 101, :_reduce_163,
  5, 79, :_reduce_164,
  1, 136, :_reduce_165,
  2, 136, :_reduce_166,
  5, 137, :_reduce_167,
  4, 137, :_reduce_168,
  1, 138, :_reduce_169,
  3, 138, :_reduce_170,
  3, 96, :_reduce_171,
  1, 140, :_reduce_none,
  4, 140, :_reduce_173,
  1, 142, :_reduce_none,
  3, 142, :_reduce_175,
  3, 141, :_reduce_176,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_185,
  1, 139, :_reduce_none,
  1, 143, :_reduce_187,
  1, 144, :_reduce_none,
  3, 144, :_reduce_189,
  2, 82, :_reduce_190,
  6, 84, :_reduce_191,
  5, 84, :_reduce_192,
  7, 85, :_reduce_193,
  6, 85, :_reduce_194,
  6, 86, :_reduce_195,
  5, 86, :_reduce_196,
  1, 110, :_reduce_197,
  1, 110, :_reduce_198,
  1, 147, :_reduce_199,
  3, 147, :_reduce_200,
  1, 149, :_reduce_201,
  1, 150, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_204,
  1, 150, :_reduce_none,
  0, 72, :_reduce_206,
  0, 151, :_reduce_207,
  1, 145, :_reduce_none,
  3, 145, :_reduce_209,
  4, 145, :_reduce_210,
  1, 152, :_reduce_none,
  3, 152, :_reduce_212,
  3, 153, :_reduce_213,
  1, 153, :_reduce_214,
  1, 148, :_reduce_none,
  2, 148, :_reduce_216,
  1, 146, :_reduce_none,
  2, 146, :_reduce_218,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 94, :_reduce_221,
  3, 106, :_reduce_222,
  4, 106, :_reduce_223,
  2, 106, :_reduce_224,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_228,
  1, 135, :_reduce_229,
  3, 134, :_reduce_230,
  4, 134, :_reduce_231,
  2, 134, :_reduce_232,
  1, 155, :_reduce_none,
  3, 155, :_reduce_234,
  3, 156, :_reduce_235,
  1, 157, :_reduce_236,
  1, 157, :_reduce_237,
  4, 125, :_reduce_238,
  1, 97, :_reduce_none,
  4, 97, :_reduce_240,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 107, :_reduce_247 ]

racc_reduce_n = 248

racc_shift_n = 400

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "parameterlookup",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key",
  "resourceish" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'grammar.ra', 159)
  def _reduce_71(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 162)
  def _reduce_72(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 165)
  def _reduce_73(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 172)
  def _reduce_74(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 179)
  def _reduce_75(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_76(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 196)
  def _reduce_77(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 219)
  def _reduce_78(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 237)
  def _reduce_79(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 245)
  def _reduce_80(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 258)
  def _reduce_83(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'grammar.ra', 263)
  def _reduce_85(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 268)
  def _reduce_87(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 271)
  def _reduce_88(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 276)
  def _reduce_89(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 285)
  def _reduce_92(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 290)
  def _reduce_94(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'grammar.ra', 298)
  def _reduce_97(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 302)
  def _reduce_98(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 306)
  def _reduce_99(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

module_eval(<<'.,.,', 'grammar.ra', 318)
  def _reduce_107(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 324)
  def _reduce_108(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 328)
  def _reduce_109(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 338)
  def _reduce_112(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 347)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 351)
  def _reduce_117(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 364)
  def _reduce_122(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 370)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_124(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_125(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 387)
  def _reduce_129(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_130(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 394)
  def _reduce_131(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 397)
  def _reduce_132(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 401)
  def _reduce_133(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 410)
  def _reduce_134(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 419)
  def _reduce_135(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 423)
  def _reduce_136(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 434)
  def _reduce_137(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'grammar.ra', 447)
  def _reduce_139(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 450)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_141(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'grammar.ra', 473)
  def _reduce_144(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 476)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 479)
  def _reduce_146(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 482)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 485)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 488)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 491)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 494)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 497)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 500)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 503)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 506)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 509)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 512)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 515)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 518)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 521)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 524)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 527)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 530)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 534)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 540)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 545)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 548)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 558)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 560)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 565)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 570)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 576)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 602)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 604)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 607)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 617)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 625)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 633)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 649)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 654)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_198(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 664)
  def _reduce_199(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 667)
  def _reduce_200(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 672)
  def _reduce_201(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 681)
  def _reduce_206(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 685)
  def _reduce_207(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 690)
  def _reduce_209(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_210(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 699)
  def _reduce_212(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 705)
  def _reduce_213(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_214(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'grammar.ra', 710)
  def _reduce_216(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 715)
  def _reduce_218(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 721)
  def _reduce_221(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 724)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_223(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_224(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'grammar.ra', 732)
  def _reduce_228(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 735)
  def _reduce_229(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_230(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 746)
  def _reduce_231(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_232(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_234(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 766)
  def _reduce_235(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 769)
  def _reduce_236(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_237(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 773)
  def _reduce_238(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_240(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

module_eval(<<'.,.,', 'grammar.ra', 789)
  def _reduce_247(val, _values, result)
      result = ast AST::ParameterLookup, :resource => val[0], :parameter => val[2][:value]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
