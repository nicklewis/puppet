#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 854)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'7,13,358,164,224,104,282,318,282,292,-116,372,374,97,164,99,-193,7,13',
'373,319,163,293,163,393,-136,302,303,100,226,45,1,163,8,11,-239,22,28',
'34,-173,43,46,3,107,311,15,108,45,1,33,8,11,96,22,28,34,116,43,46,3',
'32,332,15,7,13,32,33,16,299,-242,392,302,303,7,13,187,298,32,104,187',
'-136,-136,-136,-136,16,50,186,7,13,51,186,190,97,45,1,190,8,11,50,22',
'28,34,51,43,46,3,68,100,15,-174,28,183,33,91,46,333,107,104,15,108,68',
'-180,33,32,28,183,291,335,46,290,16,96,15,32,7,13,33,187,32,250,71,384',
'7,13,253,187,50,32,186,168,51,7,13,190,71,107,186,15,108,7,13,190,146',
'151,45,1,349,8,11,139,22,28,34,250,43,46,3,32,253,15,167,45,1,33,8,11',
'-240,22,28,34,-176,43,46,3,32,118,15,167,7,13,33,16,78,339,84,282,305',
'61,7,13,-181,32,78,116,84,-100,59,60,16,346,69,282,353,282,305,-175',
'154,156,137,138,69,68,-135,146,151,28,81,343,-176,46,139,68,-244,15',
'73,28,81,33,301,46,89,302,303,15,73,7,13,33,32,78,89,84,146,151,-174',
'71,32,50,32,139,-178,51,7,13,341,71,78,69,306,137,138,-241,282,305,146',
'151,7,13,68,-175,78,139,28,81,93,-173,46,308,320,329,15,73,282,283,33',
'68,328,89,344,28,81,7,13,46,116,32,118,15,371,68,121,33,71,28,183,-175',
'-243,46,137,138,351,15,32,146,151,33,-128,285,111,71,139,282,283,32',
'68,-176,32,-127,28,183,7,13,46,71,347,-177,15,367,282,305,33,316,312',
'7,13,136,362,78,158,84,-179,32,-36,-36,-36,-36,365,101,71,260,45,1,369',
'8,11,69,22,28,34,-126,43,46,3,258,95,15,68,314,331,33,28,81,312,255',
'46,377,-180,310,15,73,32,380,33,308,61,89,382,16,7,13,163,295,78,32',
'84,175,-226,122,7,13,71,386,78,234,84,-129,387,175,7,13,69,196,78,388',
'84,56,57,58,54,122,69,68,390,308,228,28,81,99,53,46,69,68,289,15,73',
'28,81,33,395,46,89,68,,15,73,28,81,33,32,46,89,,,15,73,71,,33,32,,89',
',7,13,,71,78,,32,,,,7,13,,71,78,,84,154,156,137,138,140,141,,146,151',
'-38,-38,-38,-38,,139,69,68,,,,28,81,,,46,,68,,15,,28,81,33,,46,7,13',
',15,73,,,33,32,,89,,,7,13,71,,114,32,-193,-42,-42,-42,-42,,71,56,57',
'58,54,45,1,,8,11,113,22,28,34,,43,46,3,,,15,68,,,33,28,81,,,46,7,13',
',15,78,32,84,33,,,7,13,16,,78,,84,,32,,,,69,,,71,,,154,156,137,138,69',
'68,,146,151,28,81,,,46,139,68,,15,73,28,81,33,,46,89,,,15,73,7,13,33',
'32,,89,,337,,,71,,,32,7,13,,,,,71,,,,7,13,,,,,45,1,,8,11,,22,28,34,',
'43,46,3,,,15,,68,,33,153,28,183,,,46,,68,142,15,32,28,183,33,,46,,16',
',15,,7,13,33,32,78,,7,13,,,71,,,32,154,156,137,138,140,141,71,146,151',
',,,,,139,,,,,68,,,,28,81,68,50,46,,28,129,15,43,46,,33,,15,7,13,,33',
'78,,84,,32,,,,,,32,71,,,,,,71,69,,,7,13,,,78,,84,,68,,,,28,81,,,46,',
',,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33',
'7,13,89,,,,,,68,,32,,28,81,,,46,71,,,15,73,,,33,7,13,89,,78,,84,,68',
'50,32,,28,129,,43,46,71,,,15,,69,,33,7,13,,,78,,84,,68,,32,,28,81,,',
'46,71,,,15,73,69,286,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15',
'73,69,280,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7',
'13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84',
',68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81',
',,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73',
'69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89',
',78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32',
',28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71',
',,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33',
'7,13,89,,78,161,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78',
',84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28',
'81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15',
'73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13',
'89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68',
',32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46',
'71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69',
'229,33,7,13,89,,78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89',
',78,,84,,68,,32,,28,81,,,46,71,,,15,73,69,,33,7,13,89,,78,,84,,68,,32',
',28,81,,,46,71,,,15,73,69,173,33,,,89,,,,,,68,,32,,28,81,,,46,71,7,13',
'15,73,78,,33,,,89,,,,7,13,,,32,,184,,,,,71,,,,213,214,216,197,200,68',
'203,205,208,242,246,,215,249,,,,15,68,207,210,247,28,183,,,46,7,13,',
'15,78,32,84,33,,,199,202,71,,,,,,32,,7,13,69,,78,71,84,,,,,,,68,,,,28',
'81,,,46,69,,,15,73,,,33,,,89,68,,,,28,81,,32,46,,,,15,73,71,,33,7,13',
'89,,78,161,84,,,,32,154,156,137,138,140,141,71,146,151,7,13,69,,78,139',
'84,,,,,,,68,,,,28,81,,,46,69,,,15,73,,,33,,,89,68,,,,28,81,,32,46,,',
',15,73,71,,33,143,147,89,,,,,,,,32,,,149,153,,,71,321,,,,142,145,150',
'152,,,149,153,,,,,,,,142,145,150,152,,,,,144,148,,,154,156,137,138,140',
'141,,146,151,,,144,148,,139,154,156,137,138,140,141,256,146,151,,,,',
',139,,149,153,,,,,233,,,142,145,150,152,,,149,153,,,,,,,,142,145,150',
'152,,,,,144,148,,,154,156,137,138,140,141,,146,151,,,144,148,,139,154',
'156,137,138,140,141,,146,151,149,153,,,,139,,,,142,145,150,152,,,149',
'153,,,,,,,,142,145,150,152,,,,,144,148,,,154,156,137,138,140,141,,146',
'151,,,144,148,,139,154,156,137,138,140,141,,146,151,149,153,,,,139,',
',,142,145,150,152,,,149,153,,,,,,,,142,145,150,152,,,,,,,,,154,156,137',
'138,140,141,,146,151,,,,,,139,154,156,137,138,140,141,,146,151,149,153',
',,,139,,,,142,145,150,152,,,149,153,,,,,,,,142,145,150,152,,,,,144,148',
',,154,156,137,138,140,141,,146,151,,,144,148,,139,154,156,137,138,140',
'141,,146,151,149,153,,,,139,,,279,142,145,150,152,,,149,153,,,,,,,,142',
'145,150,152,,,,,144,148,,,154,156,137,138,140,141,,146,151,,,144,148',
',139,154,156,137,138,140,141,,146,151,149,153,,,,139,,,,142,145,150',
'152,,,149,153,,,,,,,,142,145,150,152,,,,,144,148,,,154,156,137,138,140',
'141,,146,151,,,144,148,,139,154,156,137,138,140,141,,146,151,149,153',
',,,139,,,,142,145,150,152,,,149,153,,,,,,,,142,145,150,152,,,,,144,148',
',,154,156,137,138,140,141,,146,151,,,144,148,,139,154,156,137,138,140',
'141,,146,151,149,153,,,,139,,,,142,145,150,152,,,149,153,,,,,,,,142',
'145,150,152,,,,,,148,,,154,156,137,138,140,141,,146,151,,,,,,139,154',
'156,137,138,140,141,,146,151,149,153,,,,139,,,,142,145,150,152,,,,153',
',,,,,,,142,,,,,,,,144,148,153,,154,156,137,138,140,141,142,146,151,',
',,,153,139,154,156,137,138,140,141,142,146,151,,,,,,139,,,,154,156,137',
'138,140,141,,146,151,,,,,,139,154,156,137,138,140,141,,146,151,213,214',
'216,197,200,139,203,205,208,209,223,,215,217,,,,,,207,210,212,213,214',
'216,197,200,,203,205,208,209,211,,215,217,,199,202,,,207,210,212,213',
'214,216,197,200,,203,205,208,209,223,,215,217,,199,202,,,207,210,212',
'213,214,216,197,200,,203,205,208,209,211,,215,217,,199,202,,,207,210',
'212,213,214,216,197,200,,203,205,208,209,211,,215,217,,199,202,,,207',
'210,212,213,214,216,197,200,,203,205,208,209,223,,215,217,,199,202,',
',207,210,212,,,,,,,,,,,,,,,,199,202' ]
        racc_action_table = arr = ::Array.new(2519, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,300,81,103,22,230,230,174,174,246,324,327,19,129,19,129,390,390',
'324,230,81,174,246,390,320,300,300,19,103,0,0,129,0,0,72,0,0,0,72,0',
'0,0,22,218,0,22,390,390,0,390,390,19,390,390,390,87,390,390,390,0,251',
'390,383,383,22,390,0,185,87,383,218,218,372,372,100,185,390,224,304',
'320,320,320,320,390,11,100,354,354,11,304,100,75,383,383,304,383,383',
'1,383,383,383,1,383,383,383,372,75,383,75,372,372,383,14,372,252,224',
'226,372,224,354,14,372,383,354,354,169,253,354,169,383,75,354,372,339',
'339,354,96,224,333,372,339,84,84,333,187,24,354,96,84,24,336,336,96',
'354,226,187,24,226,290,290,187,262,262,339,339,290,339,339,262,339,339',
'339,122,339,339,339,226,122,339,84,336,336,339,336,336,76,336,336,336',
'76,336,336,336,339,45,336,290,335,335,336,339,335,257,335,287,287,8',
'13,13,249,336,13,248,13,247,8,8,336,287,335,297,297,281,281,244,264',
'264,264,264,13,335,242,264,264,335,335,281,241,335,264,13,74,335,335',
'13,13,335,192,13,335,192,192,13,13,331,331,13,335,331,13,331,261,261',
'240,335,146,258,13,261,77,258,16,16,258,13,16,331,195,277,277,79,195',
'195,277,277,328,328,331,80,328,277,331,331,16,239,331,238,231,237,331',
'331,231,231,331,16,235,331,283,16,16,322,322,16,39,331,234,16,322,328',
'47,16,331,328,328,29,82,328,278,278,292,328,16,278,278,328,293,162,27',
'16,278,162,162,151,322,25,328,229,322,322,316,316,322,328,288,86,322',
'316,288,288,322,225,307,314,314,65,309,314,71,314,88,322,49,49,49,49',
'313,20,322,136,316,316,318,316,316,314,316,316,316,319,316,316,316,135',
'18,316,314,223,250,316,314,314,220,124,314,330,70,206,314,314,316,334',
'314,201,68,314,338,316,310,310,183,178,310,314,310,94,353,52,299,299',
'314,355,299,120,299,173,360,115,298,298,310,98,298,368,298,9,9,9,9,63',
'299,310,373,376,111,310,310,109,3,310,298,299,165,310,310,299,299,310',
'394,299,310,298,,299,299,298,298,299,310,298,299,,,298,298,310,,298',
'299,,298,,295,295,,299,295,,298,,,,289,289,,298,289,,289,276,276,276',
'276,276,276,,276,276,6,6,6,6,,276,289,295,,,,295,295,,,295,,289,,295',
',289,289,295,,289,31,31,,289,289,,,289,295,,289,,,34,34,295,,34,289',
'34,17,17,17,17,,289,4,4,4,4,31,31,,31,31,34,31,31,31,,31,31,31,,,31',
'34,,,31,34,34,,,34,284,284,,34,284,31,284,34,,,43,43,31,,43,,43,,34',
',,,284,,,34,,,265,265,265,265,43,284,,265,265,284,284,,,284,265,43,',
'284,284,43,43,284,,43,284,,,43,43,255,255,43,284,,43,,255,,,284,,,43',
'233,233,,,,,43,,,,184,184,,,,,255,255,,255,255,,255,255,255,,255,255',
'255,,,255,,233,,255,275,233,233,,,233,,184,275,233,255,184,184,233,',
'184,,255,,184,,175,175,184,233,175,,55,55,,,233,,,184,275,275,275,275',
'275,275,184,275,275,,,,,,275,,,,,175,,,,175,175,55,55,175,,55,55,175',
'55,55,,175,,55,59,59,,55,59,,59,,175,,,,,,55,175,,,,,,55,59,,,60,60',
',,60,,60,,59,,,,59,59,,,59,,,,59,59,60,,59,61,61,59,,61,,61,,60,,59',
',60,60,,,60,59,,,60,60,61,,60,62,62,60,,,,,,61,,60,,61,61,,,61,60,,',
'61,61,,,61,164,164,61,,164,,164,,62,62,61,,62,62,,62,62,61,,,62,,164',
',62,163,163,,,163,,163,,164,,62,,164,164,,,164,62,,,164,164,163,163',
'164,158,158,164,,158,,158,,163,,164,,163,163,,,163,164,,,163,163,158',
'158,163,156,156,163,,156,,156,,158,,163,,158,158,,,158,163,,,158,158',
'156,,158,69,69,158,,69,,69,,156,,158,,156,156,,,156,158,,,156,156,69',
',156,154,154,156,,154,,154,,69,,156,,69,69,,,69,156,,,69,69,154,,69',
'153,153,69,,153,,153,,154,,69,,154,154,,,154,69,,,154,154,153,,154,152',
'152,154,,152,,152,,153,,154,,153,153,,,153,154,,,153,153,152,,153,73',
'73,153,,73,,73,,152,,153,,152,152,,,152,153,,,152,152,73,,152,150,150',
'152,,150,,150,,73,,152,,73,73,,,73,152,,,73,73,150,,73,149,149,73,,149',
',149,,150,,73,,150,150,,,150,73,,,150,150,149,,150,148,148,150,,148',
',148,,149,,150,,149,149,,,149,150,,,149,149,148,,149,145,145,149,,145',
',145,,148,,149,,148,148,,,148,149,,,148,148,145,,148,78,78,148,,78,78',
'78,,145,,148,,145,145,,,145,148,,,145,145,78,,145,144,144,145,,144,',
'144,,78,,145,,78,78,,,78,145,,,78,78,144,,78,143,143,78,,143,,143,,144',
',78,,144,144,,,144,78,,,144,144,143,,144,142,142,144,,142,,142,,143',
',144,,143,143,,,143,144,,,143,143,142,,143,141,141,143,,141,,141,,142',
',143,,142,142,,,142,143,,,142,142,141,,142,140,140,142,,140,,140,,141',
',142,,141,141,,,141,142,,,141,141,140,,141,139,139,141,,139,,139,,140',
',141,,140,140,,,140,141,,,140,140,139,,140,138,138,140,,138,,138,,139',
',140,,139,139,,,139,140,,,139,139,138,,139,113,113,139,,113,,113,,138',
',139,,138,138,,,138,139,,,138,138,113,113,138,89,89,138,,89,,89,,113',
',138,,113,113,,,113,138,,,113,113,89,,113,91,91,113,,91,,91,,89,,113',
',89,89,,,89,113,,,89,89,91,,89,93,93,89,,93,,93,,91,,89,,91,91,,,91',
'89,,,91,91,93,93,91,,,91,,,,,,93,,91,,93,93,,,93,91,121,121,93,93,121',
',93,,,93,,,,95,95,,,93,,95,,,,,93,,,,121,121,121,121,121,121,121,121',
'121,121,121,,121,121,,,,121,95,121,121,121,95,95,,,95,116,116,,95,116',
'121,116,95,,,121,121,121,,,,,,95,,97,97,116,,97,95,97,,,,,,,116,,,,116',
'116,,,116,97,,,116,116,,,116,,,116,97,,,,97,97,,116,97,,,,97,97,116',
',97,114,114,97,,114,114,114,,,,97,266,266,266,266,266,266,97,266,266',
'137,137,114,,137,266,137,,,,,,,114,,,,114,114,,,114,137,,,114,114,,',
'114,,,114,137,,,,137,137,,114,137,,,,137,137,114,,137,66,66,137,,,,',
',,,137,,,66,66,,,137,232,,,,66,66,66,66,,,232,232,,,,,,,,232,232,232',
'232,,,,,66,66,,,66,66,66,66,66,66,,66,66,,,232,232,,66,232,232,232,232',
'232,232,133,232,232,,,,,,232,,133,133,,,,,117,,,133,133,133,133,,,117',
'117,,,,,,,,117,117,117,117,,,,,133,133,,,133,133,133,133,133,133,,133',
'133,,,117,117,,133,117,117,117,117,117,117,,117,117,348,348,,,,117,',
',,348,348,348,348,,,363,363,,,,,,,,363,363,363,363,,,,,348,348,,,348',
'348,348,348,348,348,,348,348,,,363,363,,348,363,363,363,363,363,363',
',363,363,356,356,,,,363,,,,356,356,356,356,,,357,357,,,,,,,,357,357',
'357,357,,,,,,,,,356,356,356,356,356,356,,356,356,,,,,,356,357,357,357',
'357,357,357,,357,357,345,345,,,,357,,,,345,345,345,345,,,366,366,,,',
',,,,366,366,366,366,,,,,345,345,,,345,345,345,345,345,345,,345,345,',
',366,366,,345,366,366,366,366,366,366,,366,366,157,157,,,,366,,,157',
'157,157,157,157,,,131,131,,,,,,,,131,131,131,131,,,,,157,157,,,157,157',
'157,157,157,157,,157,157,,,131,131,,157,131,131,131,131,131,131,,131',
'131,132,132,,,,131,,,,132,132,132,132,,,378,378,,,,,,,,378,378,378,378',
',,,,132,132,,,132,132,132,132,132,132,,132,132,,,378,378,,132,378,378',
'378,378,378,378,,378,378,381,381,,,,378,,,,381,381,381,381,,,160,160',
',,,,,,,160,160,160,160,,,,,381,381,,,381,381,381,381,381,381,,381,381',
',,160,160,,381,160,160,160,160,160,160,,160,160,268,268,,,,160,,,,268',
'268,268,268,,,271,271,,,,,,,,271,271,271,271,,,,,,268,,,268,268,268',
'268,268,268,,268,268,,,,,,268,271,271,271,271,271,271,,271,271,172,172',
',,,271,,,,172,172,172,172,,,,272,,,,,,,,272,,,,,,,,172,172,273,,172',
'172,172,172,172,172,273,172,172,,,,,269,172,272,272,272,272,272,272',
'269,272,272,,,,,,272,,,,273,273,273,273,273,273,,273,273,,,,,,273,269',
'269,269,269,269,269,,269,269,101,101,101,101,101,269,101,101,101,101',
'101,,101,101,,,,,,101,101,101,308,308,308,308,308,,308,308,308,308,308',
',308,308,,101,101,,,308,308,308,196,196,196,196,196,,196,196,196,196',
'196,,196,196,,308,308,,,196,196,196,99,99,99,99,99,,99,99,99,99,99,',
'99,99,,196,196,,,99,99,99,329,329,329,329,329,,329,329,329,329,329,',
'329,329,,99,99,,,329,329,329,312,312,312,312,312,,312,312,312,312,312',
',312,312,,329,329,,,312,312,312,,,,,,,,,,,,,,,,312,312' ]
        racc_action_check = arr = ::Array.new(2519, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    62,   nil,   414,   507,   nil,   455,   nil,   201,   382,
   nil,    49,   nil,   206,    98,   nil,   270,   501,   371,     7,
   369,   nil,     3,   nil,   110,   322,   nil,   338,   nil,   302,
   nil,   542,   nil,   nil,   555,   nil,   nil,   nil,   nil,   308,
   nil,   nil,   nil,   607,   nil,   193,   nil,   312,   nil,   309,
   nil,   nil,   403,   nil,   nil,   731,   nil,   nil,   nil,   777,
   802,   827,   852,   425,   nil,   346,  1713,   nil,   408,   977,
   383,   344,    16,  1077,   223,    86,   167,   247,  1202,   262,
   266,    -3,   307,   nil,   140,   nil,   332,    50,   347,  1427,
   nil,  1452,   nil,  1477,   413,  1533,   113,  1595,   433,  2406,
    51,  2340,   nil,    -8,   nil,   nil,   nil,   nil,   nil,   449,
   nil,   454,   nil,  1402,  1645,   425,  1575,  1795,   nil,   nil,
   421,  1520,   138,   nil,   395,   nil,   nil,   nil,   nil,     8,
   nil,  2035,  2080,  1780,   nil,   356,   339,  1665,  1377,  1352,
  1327,  1302,  1277,  1252,  1227,  1177,   204,   nil,  1152,  1127,
  1102,   281,  1052,  1027,  1002,   nil,   952,  2020,   927,   nil,
  2155,   nil,   330,   902,   877,   451,   nil,   nil,   nil,   117,
   nil,   nil,  2260,   412,    -3,   725,   nil,   nil,   410,   nil,
   nil,   nil,   nil,   396,   678,    50,   nil,   121,   nil,   nil,
   nil,   nil,   202,   nil,   nil,   271,  2384,   nil,   nil,   nil,
   nil,   401,   nil,   nil,   nil,   nil,   396,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   390,   nil,   nil,   345,    76,   353,   115,   nil,   nil,   324,
    -5,   291,  1728,   668,   314,   265,   nil,   279,   285,   272,
   241,   215,   209,   nil,   202,   nil,    -1,   192,   207,   187,
   383,    36,   103,   112,   nil,   654,   nil,   195,   231,   nil,
   nil,   202,   102,   nil,   173,   574,  1605,   nil,  2200,  2308,
   nil,  2215,  2275,  2293,   nil,   688,   456,   224,   273,   nil,
   nil,   212,   nil,   301,   597,   nil,   nil,   194,   347,   500,
   157,   nil,   305,   313,   nil,   490,   nil,   210,   436,   426,
   -23,   nil,   nil,   nil,    55,   nil,   nil,   350,  2362,   357,
   416,   nil,  2450,   367,   361,   nil,   348,   nil,   357,   366,
    17,   nil,   309,   nil,    -1,   nil,   nil,     3,   284,  2428,
   396,   253,   nil,   104,   386,   196,   149,   nil,   407,   132,
   nil,   nil,   nil,   nil,   nil,  1960,   nil,   nil,  1840,   nil,
   nil,   nil,   nil,   417,    85,   422,  1900,  1915,   nil,   nil,
   427,   nil,   nil,  1855,   nil,   nil,  1975,   nil,   434,   nil,
   nil,   nil,    71,   444,   nil,   nil,   441,   nil,  2095,   nil,
   nil,  2140,   nil,    61,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   459,   nil ]

racc_action_default = [
  -202,  -246,  -182,   -78,   -18,    -7,    -8,  -130,  -219,  -246,
    -9,  -194,  -173,  -246,  -237,  -102,  -246,   -10,  -246,  -174,
   -37,   -11,  -246,  -178,  -246,   -39,   -12,  -246,  -135,   -40,
   -13,    -1,  -227,  -100,  -101,   -41,   -14,    -2,  -177,   -43,
   -15,    -3,  -179,  -246,   -16,  -246,  -181,  -246,   -17,    -6,
  -194,  -193,  -202,   -79,   -47,  -246,   -44,   -45,   -46,  -246,
  -246,  -246,  -246,  -202,  -138,  -246,  -246,   -70,  -219,  -246,
  -237,  -246,   -61,  -246,   -69,   -62,   -65,   -63,  -246,   -66,
   -60,  -101,   -68,   -64,  -246,  -131,   -71,   -67,   -72,  -246,
  -139,  -246,   -56,  -246,   -55,  -246,  -202,  -246,   -81,  -113,
  -202,  -123,  -201,  -202,  -199,  -195,  -197,  -198,  -200,  -246,
   -77,  -246,    -4,  -246,  -246,   -51,  -246,  -246,  -183,  -184,
  -186,  -113,  -203,  -204,  -246,   -38,   -35,   -42,   -37,  -101,
   -36,  -110,  -112,  -246,   -34,  -202,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -133,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -132,  -246,  -246,  -246,  -156,
   -58,  -222,  -246,  -246,  -246,  -246,  -235,  -234,  -230,  -246,
  -231,  -149,  -111,   -54,  -246,  -246,  -180,  -174,  -246,  -176,
  -167,  -175,  -168,  -101,  -246,  -246,  -219,  -202,   -94,   -93,
  -101,   -84,  -246,   -85,   -87,  -246,  -123,   -23,  -117,   -27,
   -25,  -225,   -33,   -21,  -114,   -29,  -246,   -31,   -30,  -118,
   -19,  -116,   -32,   -26,   -24,   -20,   -28,   -22,  -246,  -121,
  -225,  -122,  -124,  -116,  -246,  -246,  -246,  -213,   396,   -50,
  -246,  -246,  -246,  -246,  -246,   -98,   -96,  -246,  -225,  -104,
  -105,  -107,  -118,  -108,  -103,  -106,  -101,   -32,  -109,   -22,
  -212,  -246,  -225,  -210,  -207,  -246,  -236,  -246,  -246,  -215,
  -245,  -146,  -145,  -140,  -147,  -148,  -151,  -134,  -158,  -153,
  -141,  -157,  -155,  -152,  -142,  -154,  -150,  -143,  -144,  -159,
  -129,  -246,  -223,  -224,  -246,  -220,  -127,  -246,  -246,  -246,
  -246,  -228,  -224,   -52,   -57,  -246,  -170,  -225,  -246,  -246,
  -246,   -82,   -90,   -89,  -246,  -224,  -137,  -225,  -226,  -246,
  -246,   -83,  -226,  -246,  -246,  -196,  -246,  -214,  -224,   -48,
  -220,  -238,  -246,  -161,  -246,  -165,  -185,  -246,   -99,  -113,
  -246,  -246,  -205,  -226,  -246,  -246,    -5,  -188,  -246,  -246,
  -216,  -218,  -217,  -128,  -221,   -59,  -126,  -136,  -233,  -229,
  -232,   -53,  -172,  -224,  -246,  -246,   -91,   -92,   -88,   -86,
  -246,  -115,   -75,  -119,  -125,   -76,  -120,  -192,  -246,   -49,
  -162,  -160,  -246,  -246,   -73,   -97,  -225,   -74,  -211,  -208,
  -206,  -209,  -187,  -246,  -190,  -171,  -169,   -80,  -191,  -166,
  -246,   -95,  -189,  -164,  -246,  -163 ]

racc_goto_table = [
    39,    14,    19,    31,   182,   112,   254,   201,    52,    92,
   170,   219,   178,   236,   119,     6,   243,   105,    63,    37,
   338,   309,    85,   220,   323,   110,   109,    92,    20,   238,
    35,    39,    14,    19,   102,   192,    94,   124,   126,   218,
   313,   327,   127,    12,   155,   134,     6,    55,   135,   127,
   180,   322,    62,   297,   115,    39,   130,    19,   330,    20,
   364,    35,    39,   130,    19,   120,   354,   257,   103,   225,
   125,   123,   334,   359,    12,   317,   251,   125,    42,   252,
    38,   368,   123,   128,   235,    35,   340,   169,    27,   nil,
   128,   nil,    35,   296,   nil,   nil,   176,   177,    12,   nil,
   nil,   178,   nil,   nil,   nil,    12,   219,   nil,   nil,    42,
   nil,    38,   nil,   370,   nil,   nil,   nil,   355,   307,   nil,
   nil,   248,   227,   240,   nil,   nil,   300,   360,   nil,   nil,
   nil,   nil,   nil,    42,   nil,    38,   nil,   nil,    12,   188,
    42,   nil,    38,   188,   nil,   nil,   162,   nil,   nil,   nil,
   325,   245,   267,   nil,   259,   394,   nil,   nil,   270,   nil,
   nil,   174,   nil,   274,   239,   195,    29,   nil,   294,   nil,
   nil,   nil,   nil,    42,   nil,    38,   nil,   nil,   nil,   nil,
   nil,   230,   231,   nil,   nil,   176,   177,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   391,    29,   nil,    42,
   nil,    38,   nil,   326,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   350,   379,   361,   315,
   375,    29,   219,   243,   nil,   nil,   281,    12,    29,   nil,
   188,   287,   288,   nil,   176,   177,   102,   376,   102,   325,
   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   166,   nil,   nil,   nil,   nil,    39,    14,    19,   nil,   nil,
   nil,   181,    42,   385,    38,   342,    23,   nil,   nil,   nil,
     6,   178,   nil,    23,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,   nil,    20,   nil,    35,   nil,   244,   352,   389,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   112,    42,   nil,    38,   nil,   nil,    39,    14,    19,   nil,
   nil,   nil,   nil,   176,   177,   nil,   nil,   nil,   248,   nil,
   240,     6,    23,    42,   nil,    38,    39,    14,    19,    39,
    14,    19,   383,   nil,    20,   nil,    35,   188,   nil,   nil,
   181,     6,   nil,   nil,     6,   176,   177,   112,   245,    12,
   nil,   nil,   nil,   nil,    20,    12,    35,    20,   nil,    35,
   nil,   239,   nil,   176,   177,   nil,    25,   nil,   nil,    12,
   nil,   nil,    12,    39,    14,    19,   nil,   nil,   nil,   nil,
    39,    14,    19,   nil,    42,    23,    38,    12,     6,   181,
    42,   nil,    38,   nil,   nil,     6,    42,    25,    38,   nil,
   nil,    20,   nil,    35,    42,    12,    38,    42,    20,    38,
    35,    29,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,    25,    42,    12,    38,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,
    42,   nil,    38,   nil,   nil,   nil,   166,   nil,   nil,   nil,
   nil,    42,   nil,    38,   nil,   nil,    23,   nil,    42,   nil,
    38,   179,   189,   nil,   nil,   nil,   189,   nil,   nil,   nil,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,   181,   nil,
   nil,   nil,   nil,   nil,   244,   nil,   nil,   241,   nil,   nil,
   nil,   nil,    29,   nil,   nil,    29,   nil,   nil,   nil,   nil,
   nil,    66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   181,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   181,    23,
   nil,   117,   nil,   nil,   nil,   nil,   nil,    23,   nil,    29,
    23,   nil,   nil,   nil,   nil,   nil,    29,   131,   132,   133,
   179,   nil,   nil,   189,   nil,    23,   nil,   157,   nil,   nil,
   nil,   159,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   nil,   nil,   nil,   171,   nil,   172,
   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,
   nil,   nil,   nil,   nil,   232,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   261,   262,   263,   264,   265,
   266,    66,   268,   269,   nil,   nil,   271,   272,   273,   nil,
   275,   276,   277,   nil,   278,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   189,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   179,   nil,
   nil,   nil,   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   345,   nil,   nil,   nil,   nil,   348,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   356,   357,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   363,   nil,
   nil,   nil,   366,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   378,
   nil,   nil,   nil,   381 ]

racc_goto_check = [
    26,    54,    33,     2,    68,     4,    80,    42,    39,    29,
    83,    55,    66,    52,    70,     8,    35,    76,    39,     3,
     5,    43,    59,    44,    64,     6,    33,    29,    22,    42,
    25,    26,    54,    33,    62,    47,    28,    72,    20,    47,
    43,    41,    10,    32,    60,    20,     8,    21,    72,    10,
    67,    63,    21,    69,    28,    26,     6,    33,    43,    22,
    58,    25,    26,     6,    33,    71,    31,    73,    74,    75,
     8,     3,    43,    48,    32,    77,    78,     8,    38,    79,
    37,     5,     3,    22,    40,    25,    81,    82,     1,   nil,
    22,   nil,    25,    68,   nil,   nil,    54,    33,    32,   nil,
   nil,    66,   nil,   nil,   nil,    32,    55,   nil,   nil,    38,
   nil,    37,   nil,    64,   nil,   nil,   nil,    43,    44,   nil,
   nil,    26,     3,    33,   nil,   nil,    47,    43,   nil,   nil,
   nil,   nil,   nil,    38,   nil,    37,   nil,   nil,    32,    32,
    38,   nil,    37,    32,   nil,   nil,    27,   nil,   nil,   nil,
    66,    25,    59,   nil,     3,     5,   nil,   nil,    62,   nil,
   nil,    27,   nil,    62,    32,    27,    24,   nil,    29,   nil,
   nil,   nil,   nil,    38,   nil,    37,   nil,   nil,   nil,   nil,
   nil,    27,    27,   nil,   nil,    54,    33,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,    24,   nil,    38,
   nil,    37,   nil,    70,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    34,   nil,   nil,   nil,   nil,    83,    80,    55,    76,
    52,    24,    55,    35,   nil,   nil,    27,    32,    24,   nil,
    32,    27,    27,   nil,    54,    33,    62,    42,    62,    66,
   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,   nil,   nil,   nil,    26,    54,    33,   nil,   nil,
   nil,    24,    38,    68,    37,    39,    34,   nil,   nil,   nil,
     8,    66,   nil,    34,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,    25,   nil,    24,    29,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,
     4,    38,   nil,    37,   nil,   nil,    26,    54,    33,   nil,
   nil,   nil,   nil,    54,    33,   nil,   nil,   nil,    26,   nil,
    33,     8,    34,    38,   nil,    37,    26,    54,    33,    26,
    54,    33,     2,   nil,    22,   nil,    25,    32,   nil,   nil,
    24,     8,   nil,   nil,     8,    54,    33,     4,    25,    32,
   nil,   nil,   nil,   nil,    22,    32,    25,    22,   nil,    25,
   nil,    32,   nil,    54,    33,   nil,    23,   nil,   nil,    32,
   nil,   nil,    32,    26,    54,    33,   nil,   nil,   nil,   nil,
    26,    54,    33,   nil,    38,    34,    37,    32,     8,    24,
    38,   nil,    37,   nil,   nil,     8,    38,    23,    37,   nil,
   nil,    22,   nil,    25,    38,    32,    37,    38,    22,    37,
    25,    24,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,    23,    38,    32,    37,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,
    38,   nil,    37,   nil,   nil,   nil,    24,   nil,   nil,   nil,
   nil,    38,   nil,    37,   nil,   nil,    34,   nil,    38,   nil,
    37,    23,    23,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,    23,   nil,   nil,
   nil,   nil,    24,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,    24,    34,
   nil,    30,   nil,   nil,   nil,   nil,   nil,    34,   nil,    24,
    34,   nil,   nil,   nil,   nil,   nil,    24,    30,    30,    30,
    23,   nil,   nil,    23,   nil,    34,   nil,    30,   nil,   nil,
   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    34,   nil,   nil,   nil,    30,   nil,    30,
   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,
   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,
   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,    30,    30,    30,    30,    30,
    30,    30,    30,    30,   nil,   nil,    30,    30,    30,   nil,
    30,    30,    30,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    30,   nil,   nil,   nil,   nil,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    30,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,
   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,    30 ]

racc_goto_pointer = [
   nil,    88,     3,    19,   -26,  -235,     1,   nil,    15,   nil,
   -13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -17,    43,    28,   376,   166,    30,     0,    68,    20,    -7,
   498,  -231,    43,     2,   211,  -105,   nil,    80,    78,     7,
   -37,  -194,   -92,  -180,   -78,   nil,   nil,   -61,  -231,   nil,
   nil,   nil,  -108,   nil,     1,   -90,   nil,   nil,  -252,     9,
   -22,   nil,    12,  -182,  -209,   nil,   -83,   -45,   -91,  -131,
   -31,    20,   -15,   -68,    46,   -34,    -5,  -151,   -46,   -43,
  -116,  -172,     3,   -74,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   336,   191,    41,   nil,    49,     5,    67,    10,
    17,    21,    26,    30,    36,    40,    44,    48,     4,   198,
     9,   nil,    74,    76,    80,    83,    87,   nil,   nil,    64,
   160,   284,    72,    75,    77,    79,    82,    86,    88,    47,
   nil,   nil,   nil,   nil,   nil,    24,    98,   nil,   193,   304,
   194,   185,   nil,   237,    70,   204,   206,   221,   222,   nil,
   nil,    90,     2,   nil,   nil,   324,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,   nil,
   nil,   nil,   nil,   nil,   165,    65 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  3, 88, :_reduce_34,
  3, 88, :_reduce_35,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  4, 82, :_reduce_48,
  5, 82, :_reduce_49,
  3, 82, :_reduce_50,
  2, 82, :_reduce_51,
  4, 82, :_reduce_52,
  5, 82, :_reduce_53,
  3, 82, :_reduce_54,
  2, 82, :_reduce_55,
  1, 98, :_reduce_56,
  3, 98, :_reduce_57,
  1, 97, :_reduce_58,
  3, 97, :_reduce_59,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  5, 76, :_reduce_73,
  5, 76, :_reduce_74,
  5, 76, :_reduce_75,
  5, 86, :_reduce_76,
  2, 77, :_reduce_77,
  1, 115, :_reduce_78,
  2, 115, :_reduce_79,
  6, 78, :_reduce_80,
  2, 78, :_reduce_81,
  3, 116, :_reduce_82,
  3, 116, :_reduce_83,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_86,
  1, 118, :_reduce_none,
  3, 118, :_reduce_88,
  1, 119, :_reduce_89,
  1, 119, :_reduce_90,
  3, 120, :_reduce_91,
  3, 120, :_reduce_92,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 122, :_reduce_95,
  1, 110, :_reduce_96,
  3, 110, :_reduce_97,
  0, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 108, :_reduce_100,
  1, 102, :_reduce_101,
  1, 103, :_reduce_102,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 79, :_reduce_110,
  3, 79, :_reduce_111,
  3, 87, :_reduce_112,
  0, 112, :_reduce_113,
  1, 112, :_reduce_114,
  3, 112, :_reduce_115,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 125, :_reduce_119,
  3, 127, :_reduce_120,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  0, 114, :_reduce_123,
  1, 114, :_reduce_124,
  3, 114, :_reduce_125,
  4, 107, :_reduce_126,
  3, 107, :_reduce_127,
  4, 107, :_reduce_128,
  3, 107, :_reduce_129,
  1, 94, :_reduce_130,
  2, 94, :_reduce_131,
  2, 129, :_reduce_132,
  1, 130, :_reduce_133,
  2, 130, :_reduce_134,
  1, 104, :_reduce_135,
  4, 92, :_reduce_136,
  4, 92, :_reduce_137,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  3, 100, :_reduce_140,
  3, 100, :_reduce_141,
  3, 100, :_reduce_142,
  3, 100, :_reduce_143,
  3, 100, :_reduce_144,
  3, 100, :_reduce_145,
  3, 100, :_reduce_146,
  3, 100, :_reduce_147,
  3, 100, :_reduce_148,
  2, 100, :_reduce_149,
  3, 100, :_reduce_150,
  3, 100, :_reduce_151,
  3, 100, :_reduce_152,
  3, 100, :_reduce_153,
  3, 100, :_reduce_154,
  3, 100, :_reduce_155,
  2, 100, :_reduce_156,
  3, 100, :_reduce_157,
  3, 100, :_reduce_158,
  3, 100, :_reduce_159,
  5, 80, :_reduce_160,
  1, 133, :_reduce_161,
  2, 133, :_reduce_162,
  5, 134, :_reduce_163,
  4, 134, :_reduce_164,
  1, 135, :_reduce_165,
  3, 135, :_reduce_166,
  3, 95, :_reduce_167,
  1, 137, :_reduce_none,
  4, 137, :_reduce_169,
  1, 139, :_reduce_none,
  3, 139, :_reduce_171,
  3, 138, :_reduce_172,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_181,
  1, 136, :_reduce_none,
  1, 140, :_reduce_183,
  1, 141, :_reduce_none,
  3, 141, :_reduce_185,
  2, 81, :_reduce_186,
  6, 83, :_reduce_187,
  5, 83, :_reduce_188,
  7, 84, :_reduce_189,
  6, 84, :_reduce_190,
  6, 85, :_reduce_191,
  5, 85, :_reduce_192,
  1, 109, :_reduce_193,
  1, 109, :_reduce_194,
  1, 144, :_reduce_195,
  3, 144, :_reduce_196,
  1, 146, :_reduce_197,
  1, 147, :_reduce_198,
  1, 147, :_reduce_199,
  1, 147, :_reduce_200,
  1, 147, :_reduce_none,
  0, 73, :_reduce_202,
  0, 148, :_reduce_203,
  1, 142, :_reduce_none,
  3, 142, :_reduce_205,
  4, 142, :_reduce_206,
  1, 149, :_reduce_none,
  3, 149, :_reduce_208,
  3, 150, :_reduce_209,
  1, 150, :_reduce_210,
  3, 150, :_reduce_211,
  1, 150, :_reduce_212,
  1, 145, :_reduce_none,
  2, 145, :_reduce_214,
  1, 143, :_reduce_none,
  2, 143, :_reduce_216,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 93, :_reduce_219,
  3, 105, :_reduce_220,
  4, 105, :_reduce_221,
  2, 105, :_reduce_222,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  0, 113, :_reduce_none,
  1, 113, :_reduce_226,
  1, 132, :_reduce_227,
  3, 131, :_reduce_228,
  4, 131, :_reduce_229,
  2, 131, :_reduce_230,
  1, 152, :_reduce_none,
  3, 152, :_reduce_232,
  3, 153, :_reduce_233,
  1, 154, :_reduce_234,
  1, 154, :_reduce_235,
  4, 124, :_reduce_236,
  1, 96, :_reduce_none,
  4, 96, :_reduce_238,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  3, 106, :_reduce_245 ]

racc_reduce_n = 246

racc_shift_n = 396

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :RUBY_FUNC => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "RUBY_FUNC",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "parameterlookup",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key",
  "resourceish" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 35)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 38)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 47)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'grammar.ra', 90)
  def _reduce_34(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 93)
  def _reduce_35(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

module_eval(<<'.,.,', 'grammar.ra', 108)
  def _reduce_48(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 115)
  def _reduce_49(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 121)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 128)
  def _reduce_51(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 135)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_53(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 148)
  def _reduce_54(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 155)
  def _reduce_55(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 162)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 165)
  def _reduce_57(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 169)
  def _reduce_58(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_59(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'grammar.ra', 187)
  def _reduce_73(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 190)
  def _reduce_74(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_75(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 207)
  def _reduce_77(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 223)
  def _reduce_78(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 224)
  def _reduce_79(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 229)
  def _reduce_80(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 247)
  def _reduce_81(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_82(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 273)
  def _reduce_83(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_86(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'grammar.ra', 291)
  def _reduce_88(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 295)
  def _reduce_89(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_90(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 299)
  def _reduce_91(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_92(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'grammar.ra', 313)
  def _reduce_95(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_96(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 318)
  def _reduce_97(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_100(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 330)
  def _reduce_101(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_102(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_110(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 352)
  def _reduce_111(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 356)
  def _reduce_112(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_113(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 364)
  def _reduce_114(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 366)
  def _reduce_115(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_119(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_120(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_123(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_124(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_125(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 398)
  def _reduce_126(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 403)
  def _reduce_127(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_128(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 413)
  def _reduce_129(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 419)
  def _reduce_130(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 420)
  def _reduce_131(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 422)
  def _reduce_132(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 424)
  def _reduce_133(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 425)
  def _reduce_134(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 428)
  def _reduce_135(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 435)
  def _reduce_137(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_140(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 514)
  def _reduce_141(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 517)
  def _reduce_142(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 520)
  def _reduce_143(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 523)
  def _reduce_144(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_145(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 532)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_149(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_150(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 544)
  def _reduce_151(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 547)
  def _reduce_152(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 550)
  def _reduce_153(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 553)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 556)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_156(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 562)
  def _reduce_157(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 565)
  def _reduce_158(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 568)
  def _reduce_159(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 572)
  def _reduce_160(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 576)
  def _reduce_161(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 578)
  def _reduce_162(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 583)
  def _reduce_163(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_164(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 596)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_166(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_167(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_169(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'grammar.ra', 614)
  def _reduce_171(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_172(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'grammar.ra', 635)
  def _reduce_181(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 182 omitted

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_183(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 642)
  def _reduce_185(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 645)
  def _reduce_186(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_187(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 663)
  def _reduce_188(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 671)
  def _reduce_189(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_190(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 687)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 696)
  def _reduce_193(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 697)
  def _reduce_194(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 702)
  def _reduce_195(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 705)
  def _reduce_196(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 710)
  def _reduce_197(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_198(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_199(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 715)
  def _reduce_200(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 201 omitted

module_eval(<<'.,.,', 'grammar.ra', 719)
  def _reduce_202(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_203(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 728)
  def _reduce_205(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 731)
  def _reduce_206(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 737)
  def _reduce_208(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_209(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_210(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 750)
  def _reduce_211(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_212(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_214(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'grammar.ra', 762)
  def _reduce_216(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 217 omitted

# reduce 218 omitted

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_219(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_220(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_221(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 773)
  def _reduce_222(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

module_eval(<<'.,.,', 'grammar.ra', 779)
  def _reduce_226(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 782)
  def _reduce_227(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 786)
  def _reduce_228(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 793)
  def _reduce_229(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 799)
  def _reduce_230(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 231 omitted

module_eval(<<'.,.,', 'grammar.ra', 804)
  def _reduce_232(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 813)
  def _reduce_233(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 816)
  def _reduce_234(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 817)
  def _reduce_235(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 820)
  def _reduce_236(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 237 omitted

module_eval(<<'.,.,', 'grammar.ra', 825)
  def _reduce_238(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

module_eval(<<'.,.,', 'grammar.ra', 836)
  def _reduce_245(val, _values, result)
      result = ast AST::ParameterLookup, :resource => val[0], :parameter => val[2][:value]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
