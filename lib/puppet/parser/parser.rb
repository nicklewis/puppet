#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 788)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$
...end grammar.ra/module_eval...
##### State transition tables begin ###

racc_action_table = [
   242,   243,    55,   231,   356,   112,   157,   113,    78,   298,
    68,    71,   357,   181,   186,   326,   344,   340,    55,   295,
   114,   229,   177,   179,   182,   185,   170,   294,    68,    71,
   337,   158,   100,   335,   103,    68,    71,   291,   292,    55,
    59,   291,   292,    61,   111,   233,   180,   184,   198,   231,
   189,   172,   173,   174,   176,   178,    59,   183,   187,    61,
   231,    66,   170,    60,   175,    79,    81,   186,   202,    88,
  -168,   240,    79,   252,    74,   177,    88,    59,    84,    60,
    61,   139,    68,    71,   241,    84,   100,   112,   103,    60,
    36,   117,    68,    71,    38,  -170,    60,   313,   203,   166,
    60,    10,   203,   189,   172,   173,   174,   176,   178,   202,
   183,   187,   333,   202,   209,    66,   218,   175,   209,    79,
    81,   219,   218,    88,   306,   202,   307,   219,    74,    79,
   252,   308,    84,    88,   203,    68,    71,    49,   139,   100,
   203,   103,    84,    60,   309,   202,    47,    48,    36,   311,
   209,   202,    38,    60,    68,    71,   209,    95,   100,    10,
   103,    68,    71,    68,    71,   100,   286,   103,    66,   285,
   199,   287,    79,    81,   173,   174,    88,   183,   187,   183,
   187,    74,    99,    95,   175,    84,   175,    66,    90,   315,
   337,    79,    81,   335,    66,    88,    60,  -172,    79,    81,
    74,   198,    88,   213,    84,    68,    71,    74,    99,   256,
   368,    84,    68,    71,    90,    60,   100,    36,   103,    68,
    71,   127,    60,   100,   318,   103,    68,    71,    10,    15,
    36,  -167,   213,   355,    38,   167,    36,   154,   202,   323,
   127,    10,    79,   252,   166,    66,    88,    10,    15,    79,
    81,   139,    66,    88,   154,    84,    79,    81,    74,   202,
    88,  -186,    84,    79,   252,    74,    60,    88,    49,    84,
    68,    71,   139,    60,    78,   329,    84,   183,   187,   170,
    60,  -169,    36,   161,   175,  -171,    38,    60,  -169,    68,
    71,    60,    70,    10,    15,    68,    71,  -167,  -170,   100,
   258,   103,  -168,    66,   256,   257,    60,    79,    81,   289,
   156,    88,   154,   291,   292,    72,    74,    95,   122,  -170,
    84,  -173,    66,  -172,    68,    71,    79,    81,    66,  -171,
    88,    60,    79,    81,    72,    74,    88,   200,   334,    84,
   213,    74,    99,    68,    71,    84,   215,   100,    90,   103,
    60,   338,   122,    68,    71,   216,    60,   202,   234,   254,
   113,    79,   252,   173,   174,    88,   117,   296,   183,   187,
   139,   256,   257,   217,    84,   175,    66,    78,    68,    71,
    79,    81,   353,   284,    88,    60,   202,   256,   283,    74,
    79,   252,    53,    84,    88,   223,    68,    71,   358,   139,
   100,   260,   103,    84,    60,    43,    44,    40,    41,    52,
    51,    66,   225,   362,    60,    79,    81,  -169,   229,    88,
   366,    68,    71,    72,    74,   100,   238,   103,    84,    66,
   228,  -167,   234,    79,    81,   373,   374,    88,  -169,    60,
  -167,  -170,    74,    95,  -168,  -172,    84,    68,    71,    45,
   376,   100,   229,   103,    66,  -221,   232,    60,    79,    81,
   379,    39,    88,   -24,   -24,   -24,   -24,    74,    99,    95,
  -168,    84,   384,   385,    90,   nil,   nil,    68,    71,   nil,
    66,   100,    60,   103,    79,    81,   nil,   nil,    88,    43,
    44,    40,    41,    74,    99,   nil,   nil,    84,   nil,    95,
    90,   nil,   nil,    68,    71,   nil,   nil,   100,    60,   103,
    66,   nil,   nil,   nil,    79,    81,   nil,   nil,    88,   -22,
   -22,   -22,   -22,    74,    99,    95,   nil,    84,   nil,   nil,
    90,   nil,   nil,    68,    71,   nil,    66,   100,    60,   103,
    79,    81,   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,
    99,   nil,   nil,    84,   nil,    95,    90,   nil,   nil,    68,
    71,   nil,   nil,   100,    60,   103,    66,   nil,   nil,   nil,
    79,    81,   nil,   nil,    88,   nil,   nil,    68,    71,    74,
    99,   100,   nil,    84,    68,    71,    90,   nil,   100,   nil,
   103,   nil,    66,   nil,    60,   nil,    79,    81,   nil,   nil,
    88,   nil,   nil,   nil,   nil,    74,    95,   nil,   nil,    84,
    66,   nil,   nil,   nil,    79,   144,   nil,    66,    88,   nil,
    60,    79,    81,   139,   nil,    88,   nil,    84,   nil,   nil,
    74,    99,   nil,   nil,    84,    68,    71,    90,    60,   100,
   nil,   103,   nil,   nil,   nil,    60,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    68,    71,   nil,    95,   100,   nil,
   103,    68,    71,   nil,   nil,   100,   nil,   103,    66,   nil,
   nil,   nil,    79,    81,   nil,   nil,    88,   nil,   nil,    68,
    71,    74,    99,   nil,   nil,    84,   nil,    66,    90,   nil,
   nil,    79,    81,   nil,    66,    88,    60,   nil,    79,    81,
    74,   nil,    88,   nil,    84,    68,    71,    74,   nil,   nil,
   nil,    84,   202,   nil,   nil,    60,    79,   252,   nil,   nil,
    88,   nil,    60,   nil,   nil,   139,    68,    71,   162,    84,
   100,   nil,   103,   nil,   nil,   nil,   nil,   nil,    66,   nil,
    60,   nil,    79,    81,   nil,   nil,    88,   nil,    95,   nil,
    72,    74,    68,    71,   nil,    84,   100,   nil,   103,    66,
   nil,   nil,   nil,    79,    81,   nil,    60,    88,   nil,   nil,
   nil,   nil,    74,    99,    95,   nil,    84,    68,    71,    90,
   nil,   nil,   nil,   nil,   nil,    66,   nil,    60,   nil,    79,
    81,   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,    99,
   327,   nil,    84,    68,    71,    90,   nil,   100,   nil,   103,
    66,   nil,   nil,    60,    79,    81,   nil,   nil,    88,   nil,
   nil,   nil,    72,    74,   nil,    95,   nil,    84,    68,    71,
   nil,   nil,   100,   nil,   103,   nil,    66,   nil,    60,   nil,
    79,    81,    68,    71,    88,   nil,   100,   nil,   103,    74,
    99,   nil,   nil,    84,   nil,   nil,    90,   nil,   nil,   nil,
   nil,    66,   nil,   nil,    60,    79,    81,    68,    71,    88,
   nil,   100,   nil,   103,    74,    66,   nil,   nil,    84,    79,
    81,    68,    71,    88,   nil,   100,   nil,   nil,    74,    60,
   nil,   nil,    84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    66,   nil,   nil,    60,    79,    81,   nil,   nil,    88,   nil,
   nil,    68,    71,    74,    66,   nil,   nil,    84,    79,   252,
   nil,   nil,    88,   nil,   nil,   nil,   nil,   139,    60,    68,
    71,    84,   nil,   100,   nil,   103,   nil,   nil,   nil,   nil,
   nil,   nil,    60,   nil,   202,   nil,   nil,   nil,    79,   252,
   nil,    95,    88,   nil,   nil,   nil,   nil,   139,   nil,    68,
    71,    84,    66,   100,   nil,   103,    79,    81,   nil,   nil,
    88,   nil,    60,   nil,   nil,    74,    99,   nil,   nil,    84,
   nil,    95,    90,   nil,   nil,    68,    71,   nil,   nil,   100,
    60,   103,    66,   nil,   nil,   nil,    79,    81,   nil,   nil,
    88,   nil,   nil,   nil,   nil,    74,    99,    95,   nil,    84,
   nil,   nil,    90,   nil,   nil,    68,    71,   nil,    66,   100,
    60,   103,    79,    81,   nil,   nil,    88,   nil,   nil,   nil,
   nil,    74,    99,   nil,   nil,    84,   nil,    95,    90,   nil,
   nil,    68,    71,   nil,   nil,   100,    60,   103,    66,   nil,
   nil,   nil,    79,    81,   nil,   nil,    88,   nil,   nil,   nil,
   nil,    74,    99,    95,   nil,    84,   nil,   nil,    90,   nil,
   nil,    68,    71,   nil,    66,   100,    60,   103,    79,    81,
   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,    99,   nil,
   nil,    84,   nil,    95,    90,   nil,   nil,    68,    71,   nil,
   nil,   100,    60,   103,    66,   nil,   nil,   nil,    79,    81,
   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,    99,    95,
   nil,    84,   nil,   nil,    90,   nil,   nil,    68,    71,   nil,
    66,   100,    60,   103,    79,    81,   nil,   nil,    88,   nil,
   nil,   nil,   nil,    74,    99,   nil,   nil,    84,   nil,    95,
    90,   nil,   nil,    68,    71,   nil,   nil,   100,    60,   103,
    66,   nil,   nil,   nil,    79,    81,   nil,   nil,    88,   nil,
   nil,   nil,   nil,    74,    99,    95,   nil,    84,    68,    71,
    90,   nil,   100,   193,   103,   nil,    66,   nil,    60,   nil,
    79,    81,   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,
    99,   nil,   nil,    84,    68,    71,    90,   nil,   100,   nil,
   103,    66,   nil,   nil,    60,    79,    81,   nil,   nil,    88,
   nil,   nil,   nil,   nil,    74,   nil,    95,   nil,    84,   nil,
    68,    71,   nil,   nil,   100,   nil,   103,    66,   nil,    60,
   nil,    79,    81,   nil,   nil,    88,   nil,   nil,   nil,   nil,
    74,    99,    95,   nil,    84,   nil,   nil,    90,   nil,   nil,
   nil,   nil,   nil,    66,   nil,    60,   nil,    79,    81,   188,
   nil,    88,   nil,   nil,   nil,   nil,    74,    99,   181,   186,
    84,   nil,   nil,    90,   nil,   nil,   nil,   177,   179,   182,
   185,    60,   nil,   181,   186,   nil,   nil,   nil,   nil,   nil,
   nil,   282,   177,   179,   182,   185,   nil,   nil,   nil,   nil,
   nil,   180,   184,   nil,   nil,   189,   172,   173,   174,   176,
   178,   nil,   183,   187,   nil,   nil,   180,   184,   nil,   175,
   189,   172,   173,   174,   176,   178,   nil,   183,   187,   181,
   186,   nil,   nil,   nil,   175,   nil,   nil,   nil,   177,   179,
   182,   185,   nil,   nil,   181,   186,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   177,   179,   182,   185,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   189,   172,   173,   174,
   176,   178,   nil,   183,   187,   nil,   nil,   180,   184,   nil,
   175,   189,   172,   173,   174,   176,   178,   nil,   183,   187,
   181,   186,   nil,   nil,   nil,   175,   nil,   nil,   nil,   177,
   179,   182,   185,   nil,   nil,   181,   186,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   177,   179,   182,   185,   nil,   nil,
   nil,   nil,   nil,   180,   184,   nil,   nil,   189,   172,   173,
   174,   176,   178,   nil,   183,   187,   nil,   nil,   nil,   184,
   nil,   175,   189,   172,   173,   174,   176,   178,   nil,   183,
   187,   181,   186,   nil,   nil,   nil,   175,   nil,   nil,   nil,
   177,   179,   182,   185,   nil,   nil,   nil,   186,   nil,   189,
   172,   173,   174,   nil,   nil,   177,   183,   187,   nil,   nil,
   nil,   nil,   nil,   175,   180,   184,   186,   nil,   189,   172,
   173,   174,   176,   178,   177,   183,   187,   nil,   nil,   nil,
   nil,   186,   175,   189,   172,   173,   174,   176,   178,   177,
   183,   187,   nil,   nil,   nil,   nil,   nil,   175,   nil,   nil,
   nil,   nil,   189,   172,   173,   174,   176,   178,   nil,   183,
   187,   280,   nil,   nil,   nil,   nil,   175,   189,   172,   173,
   174,   176,   178,   nil,   183,   187,   nil,   nil,   nil,   nil,
   325,   175,    26,   nil,    32,     1,   nil,     8,    11,   nil,
    18,   nil,    23,   nil,    29,   nil,     2,   nil,   nil,    10,
    15,    26,   364,    32,     1,   nil,     8,    11,   nil,    18,
   nil,    23,   nil,    29,   nil,     2,   nil,   nil,    10,    15,
   nil,   383,   nil,    26,   nil,    32,     1,   nil,     8,    11,
   nil,    18,   nil,    23,   nil,    29,   nil,     2,   nil,   nil,
    10,    15,    26,   381,    32,     1,   nil,     8,    11,   nil,
    18,   nil,    23,   nil,    29,   nil,     2,   nil,   nil,    10,
    15,   nil,   377,   nil,    26,   nil,    32,     1,   nil,     8,
    11,   nil,    18,   nil,    23,   nil,    29,   nil,     2,   nil,
   nil,    10,    15,    26,   305,    32,     1,   nil,     8,    11,
   nil,    18,   nil,    23,   nil,    29,   nil,     2,   nil,   nil,
    10,    15,   nil,   nil,   nil,    26,   nil,    32,     1,   nil,
     8,    11,   nil,    18,   nil,    23,   nil,    29,   nil,     2,
   nil,   nil,    10,    15,    26,   nil,    32,     1,   nil,     8,
    11,   nil,    18,   nil,    23,   nil,    29,   nil,     2,   nil,
   nil,    10,    15,    26,   nil,    32,     1,   nil,     8,    11,
   nil,    18,   nil,    23,   nil,    29,   nil,     2,   nil,   nil,
    10,    15,    26,   nil,    32,     1,   nil,     8,    11,   nil,
    18,   nil,    23,   nil,    29,   nil,     2,   nil,   nil,    10,
    15,   189,   172,   173,   174,   176,   178,   nil,   183,   187,
   189,   172,   173,   174,   nil,   175,   nil,   183,   187,   nil,
   nil,   nil,   nil,   nil,   175,   189,   172,   173,   174,   176,
   178,   nil,   183,   187,   nil,   nil,   nil,   nil,   nil,   175 ]

racc_action_check = [
   164,   164,   158,   154,   301,    27,    56,    27,    81,   214,
   285,   285,   301,   164,   164,   239,   293,   285,    18,   206,
    27,   212,   164,   164,   164,   164,    81,   206,   175,   175,
   334,    56,   175,   334,   175,   369,   369,   214,   214,   157,
   158,   293,   293,   158,    27,   154,   164,   164,   285,   144,
   164,   164,   164,   164,   164,   164,    18,   164,   164,    18,
   213,   175,   144,   158,   164,   175,   175,   272,   369,   175,
    85,   163,   369,   369,   175,   272,   369,   157,   175,    18,
   157,   369,   161,   161,   163,   369,   161,    83,   161,   175,
   225,   216,   356,   356,   225,    82,   369,   225,   111,   261,
   157,   225,   203,   272,   272,   272,   272,   272,   272,   111,
   272,   272,   261,   203,   111,   161,   122,   272,   203,   161,
   161,   122,   309,   161,   218,   356,   219,   309,   161,   356,
   356,   220,   161,   356,   290,   335,   335,     8,   356,   335,
   114,   335,   356,   161,   221,   290,     8,     8,    11,   224,
   290,   114,    11,   356,   329,   329,   114,   335,   329,    11,
   329,    48,    48,   103,   103,    48,   194,    48,   335,   194,
   103,   197,   335,   335,   262,   262,   335,   264,   264,   262,
   262,   335,   335,    48,   264,   335,   262,   329,   335,   227,
   280,   329,   329,   280,    48,   329,   335,    87,    48,    48,
   329,   103,    48,   229,   329,   295,   295,    48,    48,   331,
   331,    48,   307,   307,    48,   329,   307,    42,   307,   306,
   306,    42,    48,   306,   230,   306,   299,   299,    42,    42,
     1,    80,   232,   299,     1,    77,    46,   234,   295,   235,
    46,     1,   295,   295,    75,   307,   295,    46,    46,   307,
   307,   295,   306,   307,   200,   295,   306,   306,   307,   299,
   306,    74,   307,   299,   299,   306,   295,   299,    66,   306,
    23,    23,   299,   307,    23,   249,   299,   263,   263,   252,
   306,    65,    33,    64,   263,    89,    33,   299,    94,   166,
   166,   187,    23,    33,    33,    26,    26,   101,   102,    26,
   169,    26,   105,    23,   169,   169,   183,    23,    23,   201,
    53,    23,    52,   201,   201,    23,    23,    26,    50,   143,
    23,   106,   166,   107,   294,   294,   166,   166,    26,   108,
   166,    23,    26,    26,   166,   166,    26,   110,   279,   166,
   113,    26,    26,    29,    29,    26,   115,    29,    26,    29,
   166,   283,    37,   167,   167,   116,    26,   294,   288,   167,
   119,   294,   294,   281,   281,   294,    32,   211,   281,   281,
   294,   211,   211,   121,   294,   281,    29,   127,   170,   170,
    29,    29,   297,   192,    29,   294,   167,   192,   192,    29,
   167,   167,    17,    29,   167,   133,   287,   287,   304,   167,
   287,   170,   287,   167,    29,     6,     6,     6,     6,    13,
    12,   170,   134,   310,   167,   170,   170,   136,   320,   170,
   324,   172,   172,   170,   170,   172,   159,   172,   170,   287,
   140,   141,   155,   287,   287,   337,   342,   287,   346,   170,
   347,   349,   287,   172,   350,   351,   287,    45,    45,     5,
   357,    45,   142,    45,   172,   368,   147,   287,   172,   172,
   370,     2,   172,     4,     4,     4,     4,   172,   172,    45,
   146,   172,   380,   382,   172,   nil,   nil,   173,   173,   nil,
    45,   173,   172,   173,    45,    45,   nil,   nil,    45,     3,
     3,     3,     3,    45,    45,   nil,   nil,    45,   nil,   173,
    45,   nil,   nil,    47,    47,   nil,   nil,    47,    45,    47,
   173,   nil,   nil,   nil,   173,   173,   nil,   nil,   173,    31,
    31,    31,    31,   173,   173,    47,   nil,   173,   nil,   nil,
   173,   nil,   nil,   174,   174,   nil,    47,   174,   173,   174,
    47,    47,   nil,   nil,    47,   nil,   nil,   nil,   nil,    47,
    47,   nil,   nil,    47,   nil,   174,    47,   nil,   nil,    49,
    49,   nil,   nil,    49,    47,    49,   174,   nil,   nil,   nil,
   174,   174,   nil,   nil,   174,   nil,   nil,    51,    51,   174,
   174,    51,   nil,   174,   176,   176,   174,   nil,   176,   nil,
   176,   nil,    49,   nil,   174,   nil,    49,    49,   nil,   nil,
    49,   nil,   nil,   nil,   nil,    49,   176,   nil,   nil,    49,
    51,   nil,   nil,   nil,    51,    51,   nil,   176,    51,   nil,
    49,   176,   176,    51,   nil,   176,   nil,    51,   nil,   nil,
   176,   176,   nil,   nil,   176,   177,   177,   176,    51,   177,
   nil,   177,   nil,   nil,   nil,   176,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   112,   112,   nil,   177,   112,   nil,
   112,   259,   259,   nil,   nil,   259,   nil,   259,   177,   nil,
   nil,   nil,   177,   177,   nil,   nil,   177,   nil,   nil,   254,
   254,   177,   177,   nil,   nil,   177,   nil,   112,   177,   nil,
   nil,   112,   112,   nil,   259,   112,   177,   nil,   259,   259,
   112,   nil,   259,   nil,   112,    70,    70,   259,   nil,   nil,
   nil,   259,   254,   nil,   nil,   112,   254,   254,   nil,   nil,
   254,   nil,   259,   nil,   nil,   254,   242,   242,    70,   254,
   242,   nil,   242,   nil,   nil,   nil,   nil,   nil,    70,   nil,
   254,   nil,    70,    70,   nil,   nil,    70,   nil,   242,   nil,
    70,    70,    71,    71,   nil,    70,    71,   nil,    71,   242,
   nil,   nil,   nil,   242,   242,   nil,    70,   242,   nil,   nil,
   nil,   nil,   242,   242,    71,   nil,   242,   240,   240,   242,
   nil,   nil,   nil,   nil,   nil,    71,   nil,   242,   nil,    71,
    71,   nil,   nil,    71,   nil,   nil,   nil,   nil,    71,    71,
   240,   nil,    71,   178,   178,    71,   nil,   178,   nil,   178,
   240,   nil,   nil,    71,   240,   240,   nil,   nil,   240,   nil,
   nil,   nil,   240,   240,   nil,   178,   nil,   240,   233,   233,
   nil,   nil,   233,   nil,   233,   nil,   178,   nil,   240,   nil,
   178,   178,    78,    78,   178,   nil,    78,   nil,    78,   178,
   178,   nil,   nil,   178,   nil,   nil,   178,   nil,   nil,   nil,
   nil,   233,   nil,   nil,   178,   233,   233,   231,   231,   233,
   nil,   231,   nil,   231,   233,    78,   nil,   nil,   233,    78,
    78,   228,   228,    78,   nil,   228,   nil,   nil,    78,   233,
   nil,   nil,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   231,   nil,   nil,    78,   231,   231,   nil,   nil,   231,   nil,
   nil,   215,   215,   231,   228,   nil,   nil,   231,   228,   228,
   nil,   nil,   228,   nil,   nil,   nil,   nil,   228,   231,   179,
   179,   228,   nil,   179,   nil,   179,   nil,   nil,   nil,   nil,
   nil,   nil,   228,   nil,   215,   nil,   nil,   nil,   215,   215,
   nil,   179,   215,   nil,   nil,   nil,   nil,   215,   nil,   185,
   185,   215,   179,   185,   nil,   185,   179,   179,   nil,   nil,
   179,   nil,   215,   nil,   nil,   179,   179,   nil,   nil,   179,
   nil,   185,   179,   nil,   nil,   181,   181,   nil,   nil,   181,
   179,   181,   185,   nil,   nil,   nil,   185,   185,   nil,   nil,
   185,   nil,   nil,   nil,   nil,   185,   185,   181,   nil,   185,
   nil,   nil,   185,   nil,   nil,   189,   189,   nil,   181,   189,
   185,   189,   181,   181,   nil,   nil,   181,   nil,   nil,   nil,
   nil,   181,   181,   nil,   nil,   181,   nil,   189,   181,   nil,
   nil,    90,    90,   nil,   nil,    90,   181,    90,   189,   nil,
   nil,   nil,   189,   189,   nil,   nil,   189,   nil,   nil,   nil,
   nil,   189,   189,    90,   nil,   189,   nil,   nil,   189,   nil,
   nil,   182,   182,   nil,    90,   182,   189,   182,    90,    90,
   nil,   nil,    90,   nil,   nil,   nil,   nil,    90,    90,   nil,
   nil,    90,   nil,   182,    90,   nil,   nil,   184,   184,   nil,
   nil,   184,    90,   184,   182,   nil,   nil,   nil,   182,   182,
   nil,   nil,   182,   nil,   nil,   nil,   nil,   182,   182,   184,
   nil,   182,   nil,   nil,   182,   nil,   nil,    95,    95,   nil,
   184,    95,   182,    95,   184,   184,   nil,   nil,   184,   nil,
   nil,   nil,   nil,   184,   184,   nil,   nil,   184,   nil,    95,
   184,   nil,   nil,    99,    99,   nil,   nil,    99,   184,    99,
    95,   nil,   nil,   nil,    95,    95,   nil,   nil,    95,   nil,
   nil,   nil,   nil,    95,    95,    99,   nil,    95,   100,   100,
    95,   nil,   100,   100,   100,   nil,    99,   nil,    95,   nil,
    99,    99,   nil,   nil,    99,   nil,   nil,   nil,   nil,    99,
    99,   nil,   nil,    99,   186,   186,    99,   nil,   186,   nil,
   186,   100,   nil,   nil,    99,   100,   100,   nil,   nil,   100,
   nil,   nil,   nil,   nil,   100,   nil,   186,   nil,   100,   nil,
   180,   180,   nil,   nil,   180,   nil,   180,   186,   nil,   100,
   nil,   186,   186,   nil,   nil,   186,   nil,   nil,   nil,   nil,
   186,   186,   180,   nil,   186,   nil,   nil,   186,   nil,   nil,
   nil,   nil,   nil,   180,   nil,   186,   nil,   180,   180,    91,
   nil,   180,   nil,   nil,   nil,   nil,   180,   180,    91,    91,
   180,   nil,   nil,   180,   nil,   nil,   nil,    91,    91,    91,
    91,   180,   nil,   190,   190,   nil,   nil,   nil,   nil,   nil,
   nil,   190,   190,   190,   190,   190,   nil,   nil,   nil,   nil,
   nil,    91,    91,   nil,   nil,    91,    91,    91,    91,    91,
    91,   nil,    91,    91,   nil,   nil,   190,   190,   nil,    91,
   190,   190,   190,   190,   190,   190,   nil,   190,   190,   274,
   274,   nil,   nil,   nil,   190,   nil,   nil,   nil,   274,   274,
   274,   274,   nil,   nil,   132,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   132,   132,   132,   132,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   274,   274,   274,   274,
   274,   274,   nil,   274,   274,   nil,   nil,   132,   132,   nil,
   274,   132,   132,   132,   132,   132,   132,   nil,   132,   132,
   131,   131,   nil,   nil,   nil,   132,   nil,   nil,   nil,   131,
   131,   131,   131,   nil,   nil,   270,   270,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   270,   270,   270,   270,   nil,   nil,
   nil,   nil,   nil,   131,   131,   nil,   nil,   131,   131,   131,
   131,   131,   131,   nil,   131,   131,   nil,   nil,   nil,   270,
   nil,   131,   270,   270,   270,   270,   270,   270,   nil,   270,
   270,   129,   129,   nil,   nil,   nil,   270,   nil,   nil,   nil,
   129,   129,   129,   129,   nil,   nil,   nil,   269,   nil,   268,
   268,   268,   268,   nil,   nil,   269,   268,   268,   nil,   nil,
   nil,   nil,   nil,   268,   129,   129,   275,   nil,   129,   129,
   129,   129,   129,   129,   275,   129,   129,   nil,   nil,   nil,
   nil,   271,   129,   269,   269,   269,   269,   269,   269,   271,
   269,   269,   nil,   nil,   nil,   nil,   nil,   269,   nil,   nil,
   nil,   nil,   275,   275,   275,   275,   275,   275,   nil,   275,
   275,   188,   nil,   nil,   nil,   nil,   275,   271,   271,   271,
   271,   271,   271,   nil,   271,   271,   nil,   nil,   nil,   nil,
   238,   271,   188,   nil,   188,   188,   nil,   188,   188,   nil,
   188,   nil,   188,   nil,   188,   nil,   188,   nil,   nil,   188,
   188,   238,   311,   238,   238,   nil,   238,   238,   nil,   238,
   nil,   238,   nil,   238,   nil,   238,   nil,   nil,   238,   238,
   nil,   376,   nil,   311,   nil,   311,   311,   nil,   311,   311,
   nil,   311,   nil,   311,   nil,   311,   nil,   311,   nil,   nil,
   311,   311,   376,   373,   376,   376,   nil,   376,   376,   nil,
   376,   nil,   376,   nil,   376,   nil,   376,   nil,   nil,   376,
   376,   nil,   363,   nil,   373,   nil,   373,   373,   nil,   373,
   373,   nil,   373,   nil,   373,   nil,   373,   nil,   373,   nil,
   nil,   373,   373,   363,   217,   363,   363,   nil,   363,   363,
   nil,   363,   nil,   363,   nil,   363,   nil,   363,   nil,   nil,
   363,   363,   nil,   nil,   nil,   217,   nil,   217,   217,   nil,
   217,   217,   nil,   217,   nil,   217,   nil,   217,   nil,   217,
   nil,   nil,   217,   217,     0,   nil,     0,     0,   nil,     0,
     0,   nil,     0,   nil,     0,   nil,     0,   nil,     0,   nil,
   nil,     0,     0,    20,   nil,    20,    20,   nil,    20,    20,
   nil,    20,   nil,    20,   nil,    20,   nil,    20,   nil,   nil,
    20,    20,   278,   nil,   278,   278,   nil,   278,   278,   nil,
   278,   nil,   278,   nil,   278,   nil,   278,   nil,   nil,   278,
   278,   267,   267,   267,   267,   267,   267,   nil,   267,   267,
   266,   266,   266,   266,   nil,   267,   nil,   266,   266,   nil,
   nil,   nil,   nil,   nil,   266,   276,   276,   276,   276,   276,
   276,   nil,   276,   276,   nil,   nil,   nil,   nil,   nil,   276 ]

racc_action_pointer = [
  1674,   194,   417,   425,   399,   434,   341,   nil,   131,   nil,
   nil,   112,   402,   401,   nil,   nil,   nil,   392,    16,   nil,
  1693,   nil,   nil,   268,   nil,   nil,   293,    -1,   nil,   341,
   nil,   455,   364,   246,   nil,   nil,   nil,   328,   nil,   nil,
   nil,   nil,   181,   nil,   nil,   445,   200,   501,   159,   557,
   294,   575,   272,   310,   nil,   nil,    -6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   277,   258,   262,   nil,   nil,   nil,
   703,   750,   nil,   nil,   255,   232,   nil,   212,   840,   nil,
   208,     2,    72,    81,   nil,    47,   nil,   174,   nil,   262,
  1039,  1261,   nil,   nil,   265,  1125,   nil,   nil,   nil,  1151,
  1176,   274,   275,   161,   nil,   279,   298,   300,   306,   nil,
   329,    74,   652,   300,   116,   338,   343,   nil,   nil,   352,
   nil,   365,    81,   nil,   nil,   nil,   nil,   371,   nil,  1444,
   nil,  1383,  1337,   388,   375,   nil,   394,   nil,   nil,   nil,
   389,   408,   440,   296,    38,   nil,   447,   436,   nil,   nil,
   nil,   nil,   nil,   nil,    -8,   420,   nil,    37,     0,   418,
   nil,    80,   nil,    59,    -4,   nil,   287,   351,   nil,   293,
   376,   nil,   419,   475,   531,    26,   582,   633,   801,   927,
  1228,   983,  1069,   243,  1095,   957,  1202,   228,  1532,  1013,
  1276,   nil,   376,   nil,   157,   nil,   nil,   160,   nil,   nil,
   214,   263,   nil,    78,   nil,   nil,     1,   nil,   nil,   nil,
   nil,   360,     9,    49,   -13,   909,    89,  1655,   109,   111,
   106,   132,   nil,   nil,   141,    54,   nil,   180,   879,   163,
   215,   865,   192,   826,   197,   230,   nil,   nil,  1551,     8,
   775,   nil,   724,   nil,   nil,   nil,   nil,   nil,   nil,   264,
   nil,   nil,   255,   nil,   677,   nil,   nil,   nil,   nil,   659,
   nil,    87,   118,   216,   116,   nil,  1716,  1707,  1425,  1459,
  1398,  1493,    49,   nil,  1322,  1478,  1731,   nil,  1712,   329,
   159,   307,   nil,   344,   nil,     8,   nil,   394,   346,   nil,
   110,   nil,   nil,    -9,   322,   203,   nil,   373,   nil,   224,
   nil,    -8,   nil,   nil,   389,   nil,   217,   210,   nil,    87,
   388,  1573,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   406,   nil,   nil,   nil,   411,   nil,   nil,   nil,   nil,   152,
   nil,   198,   nil,   nil,    -1,   133,   nil,   427,   nil,   nil,
   nil,   nil,   427,   nil,   nil,   nil,   415,   417,   nil,   418,
   421,   422,   nil,   nil,   nil,   nil,    90,   442,   nil,   nil,
   nil,   nil,   nil,  1633,   nil,   nil,   nil,   nil,   446,    33,
   451,   nil,   nil,  1614,   nil,   nil,  1592,   nil,   nil,   nil,
   463,   nil,   464,   nil,   nil,   nil ]

racc_action_default = [
  -197,  -234,   -51,   -19,    -8,  -234,  -234,    -9,  -234,   -10,
  -188,  -189,  -234,   -23,   -11,  -186,   -12,  -234,  -234,   -13,
    -1,   -14,    -2,  -187,   -15,    -3,  -234,  -234,   -16,  -234,
   -17,    -6,  -234,  -234,   -18,    -7,  -189,  -197,  -187,   -52,
   -27,   -28,  -234,   -25,   -26,  -234,  -234,  -234,  -234,  -234,
  -197,   -86,   -93,  -234,  -196,  -194,  -197,  -190,  -192,  -193,
  -222,  -195,    -4,   -42,  -232,   -43,  -214,  -175,  -118,   -44,
  -234,  -234,   -45,   -34,   -75,   -32,   -33,  -234,  -234,  -123,
   -37,   -74,   -38,  -234,   -73,   -39,  -173,   -40,  -174,   -41,
  -234,  -234,  -126,  -108,  -104,  -234,  -112,  -133,  -113,  -234,
  -234,  -105,  -109,  -234,  -111,  -106,  -115,  -107,  -114,  -110,
   -54,  -197,  -234,   -86,  -197,  -234,  -179,  -176,  -177,  -234,
   -50,  -234,  -198,  -199,   -24,   -21,   -23,  -187,   -22,   -84,
   -20,   -83,   -85,  -234,  -197,   -79,   -76,   -87,   -82,   -75,
   -71,   -77,  -220,   -80,   -74,   -69,   -78,  -234,  -172,  -171,
   -81,   -91,   -92,   -94,  -234,  -220,   386,  -234,  -234,  -234,
  -208,  -234,   -31,  -234,  -234,  -119,  -234,  -234,   -96,  -234,
  -234,  -143,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,
  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,
  -234,  -150,  -234,  -217,  -234,  -230,  -226,  -234,  -229,  -225,
   -93,  -234,  -214,  -197,   -58,   -60,  -234,   -67,   -57,   -74,
   -66,  -234,  -220,  -234,  -234,  -234,  -234,  -234,  -207,  -205,
  -234,  -220,  -202,  -231,  -234,  -234,  -210,  -234,   -72,  -221,
  -234,  -234,   -86,  -234,  -221,  -234,  -191,  -209,  -234,  -234,
  -234,   -29,  -234,  -121,  -120,   -36,   -35,  -169,  -167,  -234,
  -170,  -161,   -74,  -168,  -234,  -162,  -218,  -219,  -124,  -234,
  -117,  -234,  -138,  -140,  -139,  -134,  -141,  -145,  -142,  -147,
  -152,  -149,  -146,  -135,  -151,  -148,  -144,  -136,    -5,  -234,
  -129,  -137,  -153,  -219,  -215,  -234,  -223,  -234,  -220,   -55,
  -234,   -63,   -62,  -234,  -234,  -234,  -125,  -234,   -56,  -234,
  -155,  -234,  -159,  -178,  -234,  -181,  -234,  -234,  -200,  -221,
  -234,  -234,  -212,  -213,  -211,   -46,   -70,   -88,   -47,   -89,
  -220,   -90,   -95,   -49,  -234,  -185,  -233,   -30,  -122,  -234,
  -164,  -220,   -97,  -116,  -129,  -234,  -128,  -234,  -216,  -227,
  -224,  -228,  -234,   -59,   -61,  -102,   -98,   -99,   -64,  -103,
  -100,  -101,   -65,   -48,  -156,  -154,  -234,  -234,  -180,  -206,
  -204,  -203,  -201,  -234,  -183,   -68,  -184,  -166,  -219,  -234,
  -234,  -127,  -130,  -234,   -53,  -160,  -234,  -182,  -165,  -163,
  -234,  -132,  -234,  -158,  -131,  -157 ]

racc_goto_table = [
    27,    13,     5,    62,    20,    37,   249,    92,   255,    69,
   118,    89,   142,   165,   222,    50,    75,    63,   155,   300,
    27,    13,     5,    57,    73,   201,   336,   169,   214,   196,
   151,   230,   246,   119,   348,   352,   279,   138,    65,   149,
    22,   343,    27,   126,   235,   135,    27,   126,   145,   192,
   150,   299,   244,    87,   302,    86,    69,   121,    89,   120,
   251,   211,   369,   163,    63,   304,   136,   331,   128,   125,
   134,    73,   128,   130,   212,   124,   322,   123,   116,   124,
   371,   148,   140,    86,    42,    65,   324,    46,   224,    56,
   123,   159,   227,   249,   237,   330,   160,    54,   220,   221,
    87,   297,    86,   354,   110,   314,   246,   194,    17,   nil,
   310,   nil,   nil,   nil,   nil,   nil,   nil,   293,   195,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   302,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    69,   nil,    89,   149,    69,   nil,    89,   nil,
    63,   nil,   236,   261,    63,   nil,   288,   245,   nil,   nil,
   nil,    73,   nil,   nil,   226,   nil,    82,   342,   151,   nil,
   nil,    65,   247,   nil,   328,    65,   nil,   nil,    27,    13,
     5,   nil,   nil,   320,   303,   375,    87,   148,    86,    86,
    87,   361,    86,   149,   143,    80,   nil,   317,   249,   365,
   378,   339,   151,   nil,   138,   nil,   149,    27,    13,     5,
   370,   380,   135,    82,   382,   316,    69,   150,    89,   312,
   247,   nil,   nil,   141,    63,   nil,    54,    54,    27,    13,
     5,   245,   149,   136,   nil,   148,   nil,    86,    85,   nil,
   nil,   nil,    80,   nil,   nil,    65,   nil,   115,   148,   nil,
    86,    62,   273,   nil,   210,   nil,   277,   210,   nil,   247,
    87,   nil,    86,   nil,   nil,   nil,   146,   133,    27,    13,
     5,   nil,   149,   149,   148,   nil,    86,   149,   345,   345,
   nil,   nil,   nil,   207,   nil,    85,   207,   nil,   nil,   nil,
   195,   nil,   nil,   nil,   nil,   nil,   168,   nil,   nil,   346,
   346,    27,    13,     5,   247,   363,   372,   nil,   nil,    82,
   250,   nil,   nil,    82,   351,   351,    86,    86,   168,   148,
   nil,    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   168,   nil,   nil,   nil,   149,   nil,    62,   nil,    80,   248,
   nil,   nil,    80,   nil,   nil,   nil,   210,   149,   nil,   nil,
   nil,   nil,   nil,    27,    13,     5,   nil,   nil,   250,   nil,
   nil,   247,   nil,    27,    13,     5,    27,    13,     5,   nil,
   nil,   143,   nil,   nil,   247,   207,   148,   nil,    86,   239,
   nil,    85,   253,    82,   nil,    85,   nil,   248,   nil,   148,
   nil,    86,   nil,   265,   nil,   nil,   nil,   250,   nil,   nil,
   141,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,
   253,   nil,   nil,   210,   nil,   nil,   nil,   349,   349,   nil,
   nil,   nil,   250,   146,   nil,   nil,   nil,   nil,   nil,   319,
   nil,   321,   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,
   nil,   129,   207,   131,   132,   nil,   347,   347,   nil,   253,
   nil,   248,   nil,   nil,   nil,   nil,   nil,   332,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   250,
   nil,   nil,   nil,   nil,   nil,   341,   171,   nil,   nil,   350,
   350,   190,   250,   nil,   253,   191,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   359,   360,   nil,   nil,   248,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   248,   nil,   nil,   nil,   nil,   nil,   367,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   253,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   253,   nil,   nil,   nil,   262,   263,
   264,   nil,   266,   267,   268,   269,   270,   271,   272,   nil,
   274,   275,   276,   nil,   nil,   281,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164 ]

racc_goto_check = [
    38,    22,    53,     4,     2,    33,    69,    63,    71,    32,
    73,    29,    36,    61,    83,    33,    23,    30,    39,    67,
    38,    22,    53,    79,    22,    42,    64,    58,    42,    86,
    54,    37,    24,    38,    47,    47,     5,    32,    31,    29,
     3,    43,    38,    22,    37,    30,    38,    22,    48,    58,
    51,    66,    62,    28,    69,    50,    32,    75,    29,     6,
    70,    58,    59,    23,    30,     5,    31,    72,     6,    20,
    75,    22,     6,    20,    36,     8,    57,     3,    74,     8,
    64,    28,    34,    50,    21,    31,     5,    21,    76,    77,
     3,    78,    35,    69,    80,    71,     3,    65,    81,    82,
    28,    37,    50,    67,    41,    84,    24,    85,     1,   nil,
    37,   nil,   nil,   nil,   nil,   nil,   nil,    42,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    69,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,    29,    29,    32,   nil,    29,   nil,
    30,   nil,    79,    23,    30,   nil,    39,    22,   nil,   nil,
   nil,    22,   nil,   nil,     3,   nil,    26,    37,    54,   nil,
   nil,    31,    31,   nil,    61,    31,   nil,   nil,    38,    22,
    53,   nil,   nil,    36,    73,    69,    28,    28,    50,    50,
    28,    83,    50,    29,    26,    25,   nil,    54,    69,    37,
    71,    86,    54,   nil,    32,   nil,    29,    38,    22,    53,
    37,     5,    30,    26,     5,    48,    32,    51,    29,    33,
    31,   nil,   nil,    25,    30,   nil,    65,    65,    38,    22,
    53,    22,    29,    31,   nil,    28,   nil,    50,    27,   nil,
   nil,   nil,    25,   nil,   nil,    31,   nil,    55,    28,   nil,
    50,     4,    65,   nil,    26,   nil,    65,    26,   nil,    31,
    28,   nil,    50,   nil,   nil,   nil,    27,    55,    38,    22,
    53,   nil,    29,    29,    28,   nil,    50,    29,    30,    30,
   nil,   nil,   nil,    25,   nil,    27,    25,   nil,   nil,   nil,
    31,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,    31,
    31,    38,    22,    53,    31,     2,    63,   nil,   nil,    26,
    26,   nil,   nil,    26,    28,    28,    50,    50,    55,    28,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,    29,   nil,     4,   nil,    25,    25,
   nil,   nil,    25,   nil,   nil,   nil,    26,    29,   nil,   nil,
   nil,   nil,   nil,    38,    22,    53,   nil,   nil,    26,   nil,
   nil,    31,   nil,    38,    22,    53,    38,    22,    53,   nil,
   nil,    26,   nil,   nil,    31,    25,    28,   nil,    50,    55,
   nil,    27,    27,    26,   nil,    27,   nil,    25,   nil,    28,
   nil,    50,   nil,    55,   nil,   nil,   nil,    26,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
    27,   nil,   nil,    26,   nil,   nil,   nil,    26,    26,   nil,
   nil,   nil,    26,    27,   nil,   nil,   nil,   nil,   nil,    55,
   nil,    55,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,
   nil,    52,    25,    52,    52,   nil,    25,    25,   nil,    27,
   nil,    25,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    55,    52,   nil,   nil,    27,
    27,    52,    26,   nil,    27,    52,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    55,    55,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,    52,    52,
    52,   nil,    52,    52,    52,    52,    52,    52,    52,   nil,
    52,    52,    52,   nil,   nil,    52,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52 ]

racc_goto_pointer = [
   nil,   108,     4,    40,   -17,  -152,    26,   nil,    33,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    27,    81,     1,    -7,  -134,   182,   153,   225,    30,   -12,
    -6,    15,   -14,     4,    31,   -48,   -39,  -111,     0,   -34,
   nil,    77,   -86,  -249,   nil,   nil,   nil,  -260,    -3,   nil,
    32,    -1,   426,     2,   -22,   228,   nil,  -158,   -51,  -269,
   nil,   -58,  -112,   -19,  -254,    79,  -164,  -196,   nil,  -161,
  -107,  -159,  -187,   -22,    46,    20,   -46,    71,    35,     5,
   -64,   -24,   -23,  -108,  -120,     4,   -74,   nil ]

racc_goto_default = [
   nil,   nil,   278,   208,    25,   nil,    31,    35,     4,     7,
     9,    14,    16,    19,    21,    24,    28,    30,    34,     3,
     6,   nil,    98,   nil,    76,   101,   102,   105,   107,   108,
    93,    94,    96,    12,   nil,   nil,   nil,   nil,    83,   nil,
    33,   nil,   nil,   204,   290,   205,   206,   nil,   nil,   147,
   106,   109,    91,    64,   137,    97,   152,   153,   nil,   259,
   104,   nil,   nil,   nil,   nil,    67,   nil,   nil,   301,    77,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   197 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 88, :_reduce_20,
  3, 88, :_reduce_21,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  4, 82, :_reduce_29,
  5, 82, :_reduce_30,
  3, 82, :_reduce_31,
  2, 82, :_reduce_32,
  1, 92, :_reduce_33,
  1, 92, :_reduce_34,
  3, 92, :_reduce_35,
  3, 92, :_reduce_36,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_45,
  5, 75, :_reduce_46,
  5, 75, :_reduce_47,
  5, 75, :_reduce_48,
  5, 86, :_reduce_49,
  2, 76, :_reduce_50,
  1, 109, :_reduce_51,
  2, 109, :_reduce_52,
  6, 77, :_reduce_53,
  2, 77, :_reduce_54,
  3, 110, :_reduce_55,
  3, 110, :_reduce_56,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 111, :_reduce_59,
  1, 112, :_reduce_none,
  3, 112, :_reduce_61,
  1, 113, :_reduce_62,
  1, 113, :_reduce_63,
  3, 114, :_reduce_64,
  3, 114, :_reduce_65,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  4, 117, :_reduce_68,
  1, 103, :_reduce_69,
  3, 103, :_reduce_70,
  0, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 119, :_reduce_73,
  1, 94, :_reduce_74,
  1, 96, :_reduce_75,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 78, :_reduce_83,
  3, 78, :_reduce_84,
  3, 87, :_reduce_85,
  0, 105, :_reduce_86,
  1, 105, :_reduce_87,
  3, 105, :_reduce_88,
  3, 123, :_reduce_89,
  3, 125, :_reduce_90,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  0, 108, :_reduce_93,
  1, 108, :_reduce_94,
  3, 108, :_reduce_95,
  1, 127, :_reduce_96,
  3, 127, :_reduce_97,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  4, 98, :_reduce_116,
  3, 98, :_reduce_117,
  1, 100, :_reduce_118,
  2, 100, :_reduce_119,
  2, 130, :_reduce_120,
  1, 131, :_reduce_121,
  2, 131, :_reduce_122,
  1, 97, :_reduce_123,
  4, 91, :_reduce_124,
  4, 91, :_reduce_125,
  2, 80, :_reduce_126,
  5, 132, :_reduce_127,
  4, 132, :_reduce_128,
  0, 133, :_reduce_none,
  2, 133, :_reduce_130,
  4, 133, :_reduce_131,
  3, 133, :_reduce_132,
  1, 121, :_reduce_none,
  3, 121, :_reduce_134,
  3, 121, :_reduce_135,
  3, 121, :_reduce_136,
  3, 121, :_reduce_137,
  3, 121, :_reduce_138,
  3, 121, :_reduce_139,
  3, 121, :_reduce_140,
  3, 121, :_reduce_141,
  3, 121, :_reduce_142,
  2, 121, :_reduce_143,
  3, 121, :_reduce_144,
  3, 121, :_reduce_145,
  3, 121, :_reduce_146,
  3, 121, :_reduce_147,
  3, 121, :_reduce_148,
  3, 121, :_reduce_149,
  2, 121, :_reduce_150,
  3, 121, :_reduce_151,
  3, 121, :_reduce_152,
  3, 121, :_reduce_153,
  5, 79, :_reduce_154,
  1, 135, :_reduce_155,
  2, 135, :_reduce_156,
  5, 136, :_reduce_157,
  4, 136, :_reduce_158,
  1, 137, :_reduce_159,
  3, 137, :_reduce_160,
  3, 99, :_reduce_161,
  1, 139, :_reduce_none,
  4, 139, :_reduce_163,
  1, 141, :_reduce_none,
  3, 141, :_reduce_165,
  3, 140, :_reduce_166,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_174,
  1, 138, :_reduce_none,
  1, 142, :_reduce_176,
  1, 143, :_reduce_none,
  3, 143, :_reduce_178,
  2, 81, :_reduce_179,
  6, 83, :_reduce_180,
  5, 83, :_reduce_181,
  7, 84, :_reduce_182,
  6, 84, :_reduce_183,
  6, 85, :_reduce_184,
  5, 85, :_reduce_185,
  1, 107, :_reduce_186,
  1, 102, :_reduce_187,
  1, 102, :_reduce_188,
  1, 102, :_reduce_189,
  1, 146, :_reduce_190,
  3, 146, :_reduce_191,
  1, 148, :_reduce_192,
  1, 149, :_reduce_193,
  1, 149, :_reduce_194,
  1, 149, :_reduce_195,
  1, 149, :_reduce_none,
  0, 72, :_reduce_197,
  0, 150, :_reduce_198,
  1, 144, :_reduce_none,
  3, 144, :_reduce_200,
  4, 144, :_reduce_201,
  1, 151, :_reduce_none,
  3, 151, :_reduce_203,
  3, 152, :_reduce_204,
  1, 152, :_reduce_205,
  3, 152, :_reduce_206,
  1, 152, :_reduce_207,
  1, 147, :_reduce_none,
  2, 147, :_reduce_209,
  1, 145, :_reduce_none,
  2, 145, :_reduce_211,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 95, :_reduce_214,
  3, 120, :_reduce_215,
  4, 120, :_reduce_216,
  2, 120, :_reduce_217,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  0, 106, :_reduce_none,
  1, 106, :_reduce_221,
  1, 134, :_reduce_222,
  3, 129, :_reduce_223,
  4, 129, :_reduce_224,
  2, 129, :_reduce_225,
  1, 154, :_reduce_none,
  3, 154, :_reduce_227,
  3, 155, :_reduce_228,
  1, 156, :_reduce_229,
  1, 156, :_reduce_230,
  4, 122, :_reduce_231,
  1, 101, :_reduce_none,
  4, 101, :_reduce_233 ]

racc_reduce_n = 234

racc_shift_n = 386

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSNAME => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSNAME",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "funcvalues",
  "namestring",
  "name",
  "variable",
  "type",
  "boolean",
  "funcrvalue",
  "selector",
  "quotedtext",
  "hasharrayaccesses",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "classref",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "simplervalue",
  "resourceinst",
  "resourcename",
  "undef",
  "array",
  "expression",
  "hasharrayaccess",
  "param",
  "rvalue",
  "addparam",
  "anyparam",
  "rvalues",
  "comma",
  "hash",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'grammar.ra', 72)
  def _reduce_20(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 75)
  def _reduce_21(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'grammar.ra', 83)
  def _reduce_29(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 90)
  def _reduce_30(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 96)
  def _reduce_31(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 103)
  def _reduce_32(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 113)
  def _reduce_35(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 117)
  def _reduce_36(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'grammar.ra', 132)
  def _reduce_45(val, _values, result)
        result = ast AST::Name, :value => val[0][:value]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 136)
  def _reduce_46(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 139)
  def _reduce_47(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_48(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0], :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 149)
  def _reduce_49(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 156)
  def _reduce_50(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 172)
  def _reduce_51(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 173)
  def _reduce_52(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_53(val, _values, result)
      @lexer.commentpop
  Puppet.warning addcontext("Collection names must now be capitalized") if val[0] =~ /^[a-z]/
  type = val[0].downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 197)
  def _reduce_54(val, _values, result)
        if val[0] =~ /^[a-z]/
    Puppet.warning addcontext("Collection names must now be capitalized")
  end
  type = val[0].downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_55(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 226)
  def _reduce_56(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'grammar.ra', 239)
  def _reduce_59(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_61(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 248)
  def _reduce_62(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 249)
  def _reduce_63(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 252)
  def _reduce_64(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_65(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_68(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_69(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 271)
  def _reduce_70(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'grammar.ra', 279)
  def _reduce_73(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_74(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_75(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 299)
  def _reduce_83(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_84(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 309)
  def _reduce_85(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 315)
  def _reduce_86(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_87(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 319)
  def _reduce_88(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 324)
  def _reduce_89(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 328)
  def _reduce_90(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_93(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 339)
  def _reduce_94(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 341)
  def _reduce_95(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_96(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_97(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 370)
  def _reduce_116(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_117(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_118(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_119(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_120(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_121(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 387)
  def _reduce_122(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_123(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 394)
  def _reduce_124(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 397)
  def _reduce_125(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 401)
  def _reduce_126(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 405)
  def _reduce_127(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 416)
  def _reduce_128(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 129 omitted

module_eval(<<'.,.,', 'grammar.ra', 429)
  def _reduce_130(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_131(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 436)
  def _reduce_132(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_134(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 457)
  def _reduce_135(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_136(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_137(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_138(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_139(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_140(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_141(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_142(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_143(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_144(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_145(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_146(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_147(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_148(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_149(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_150(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_151(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_152(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_153(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 515)
  def _reduce_154(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_155(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 521)
  def _reduce_156(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_157(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_158(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_159(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_160(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_161(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 162 omitted

module_eval(<<'.,.,', 'grammar.ra', 551)
  def _reduce_163(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'grammar.ra', 557)
  def _reduce_165(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_166(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_174(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 175 omitted

module_eval(<<'.,.,', 'grammar.ra', 582)
  def _reduce_176(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 177 omitted

module_eval(<<'.,.,', 'grammar.ra', 584)
  def _reduce_178(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 587)
  def _reduce_179(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_180(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_181(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 613)
  def _reduce_182(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 620)
  def _reduce_183(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 629)
  def _reduce_184(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_185(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 638)
  def _reduce_186(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_187(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_188(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 642)
  def _reduce_189(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 647)
  def _reduce_190(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_191(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_192(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_193(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_194(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_195(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 196 omitted

module_eval(<<'.,.,', 'grammar.ra', 664)
  def _reduce_197(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_198(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 199 omitted

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_200(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_201(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 202 omitted

module_eval(<<'.,.,', 'grammar.ra', 682)
  def _reduce_203(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 688)
  def _reduce_204(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_205(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_206(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 697)
  def _reduce_207(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 702)
  def _reduce_209(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_211(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_214(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 716)
  def _reduce_215(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 718)
  def _reduce_217(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 724)
  def _reduce_221(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 727)
  def _reduce_222(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 731)
  def _reduce_223(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_224(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_225(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 226 omitted

module_eval(<<'.,.,', 'grammar.ra', 749)
  def _reduce_227(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 758)
  def _reduce_228(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 761)
  def _reduce_229(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 762)
  def _reduce_230(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 765)
  def _reduce_231(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_233(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
