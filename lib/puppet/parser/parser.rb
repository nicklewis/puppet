#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 815)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,14,201,202,285,310,-113,104,251,106,207,374,304,252,189,175,179,340',
'349,188,303,189,107,-197,170,172,176,178,40,96,48,1,188,10,12,208,22',
'28,36,188,44,49,2,9,14,15,103,171,174,35,403,181,182,165,166,168,169',
'124,173,177,33,9,14,314,344,167,8,100,285,322,102,40,362,48,1,336,10',
'12,104,22,28,36,323,44,49,2,9,14,15,33,307,308,35,401,64,-178,307,308',
'28,239,120,335,49,33,9,14,15,54,74,8,35,55,377,-246,40,375,48,1,15,10',
'12,33,22,28,36,94,44,49,2,9,14,15,334,-184,89,35,399,64,96,214,214,28',
'239,87,88,49,33,9,14,15,213,213,8,35,54,218,218,40,55,48,1,357,10,12',
'33,22,28,36,-131,44,49,2,9,14,15,333,100,251,35,102,64,54,252,214,28',
'162,123,44,49,33,9,14,15,380,213,8,35,352,33,218,40,381,48,1,89,10,12',
'33,22,28,36,-185,44,49,2,9,14,15,214,120,331,35,281,-131,-131,-131,-131',
'-97,194,213,175,179,33,306,218,183,307,308,8,170,172,176,178,40,96,48',
'1,-179,10,12,-243,22,28,36,-177,44,49,2,9,14,15,-180,171,174,35,359',
'181,182,165,166,168,169,-124,173,177,33,9,14,285,370,167,8,100,195,377',
'102,40,375,48,1,120,10,12,-244,22,28,36,-180,44,49,2,9,14,15,33,74,346',
'35,181,182,165,166,168,169,194,173,177,-184,33,9,14,311,167,350,8,285',
'310,285,310,152,154,156,127,130,64,136,138,142,144,149,188,155,157,54',
'9,14,15,55,141,146,150,389,64,165,166,347,28,239,173,177,49,33,9,14',
'15,167,129,133,35,173,177,-179,40,318,48,1,167,10,12,33,22,28,36,317',
'44,49,2,9,14,15,315,173,177,35,339,64,165,166,167,28,239,173,177,49',
'33,9,14,15,167,74,8,35,54,112,354,40,55,48,1,260,10,12,33,22,28,36,-180',
'44,49,2,9,14,15,302,293,324,35,292,64,285,286,108,28,77,288,-248,49',
'33,285,286,15,243,315,8,35,365,297,367,40,-130,48,1,95,10,12,33,22,28',
'36,-182,44,49,2,9,14,15,373,-123,262,35,326,123,106,9,14,294,-245,74',
'284,80,33,60,61,62,58,-179,8,-44,-44,-44,-44,40,-247,48,1,65,10,12,385',
'22,28,36,386,44,49,2,64,260,15,-178,28,77,35,-177,49,260,-181,390,15',
'70,9,14,35,33,74,85,80,259,258,8,9,14,391,33,74,256,80,-230,33,393,9',
'14,65,-183,74,124,80,60,61,62,58,396,65,64,206,398,33,28,77,250,57,49',
'65,64,56,15,70,28,77,35,222,49,85,64,404,15,70,28,77,35,33,49,85,405',
',15,70,9,14,35,33,74,85,80,,,,9,14,,33,74,,80,,,,9,14,65,,74,,80,-38',
'-38,-38,-38,,65,64,,,,28,77,,,49,65,64,,15,70,28,77,35,,49,85,64,,15',
'70,28,77,35,33,49,85,,,15,70,9,14,35,33,116,85,-197,,,,9,14,,33,74,',
'80,,,,9,14,115,,74,,80,,,,9,14,65,64,74,,80,28,77,,,49,65,64,,15,,28',
'77,35,,49,65,64,,15,70,28,77,35,33,49,85,64,,15,70,28,77,35,33,49,85',
',,15,70,9,14,35,33,74,85,80,,,,9,14,,33,74,,80,,,,9,14,65,,74,,80,-40',
'-40,-40,-40,,65,64,,,,28,77,,,49,65,64,,15,70,28,77,35,,49,85,64,,15',
'70,28,77,35,33,49,85,,,15,70,9,14,35,33,74,85,80,,,,9,14,,33,74,,80',
',,,9,14,65,,74,,80,,,,,,65,64,,,,28,77,,,49,65,64,,15,70,28,77,35,,49',
'85,64,,15,70,28,77,35,33,49,85,9,14,15,70,74,,35,33,,85,9,14,,,74,186',
'80,33,,,9,14,,,74,,80,,,,,,65,64,,,,28,77,,,49,65,64,,15,,28,77,35,',
'49,,64,,15,70,28,77,35,33,49,85,295,,15,70,,,35,33,,85,175,179,,,,,',
'33,,170,172,176,178,,,181,182,165,166,,9,14,173,177,74,,80,,,167,,,171',
'174,,,181,182,165,166,168,169,65,173,177,9,14,,,74,167,80,,64,,,,28',
'77,,,49,,,,15,70,65,289,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15',
'70,65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85',
',74,,80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85,,74,,80,,64,,33',
',28,77,,,49,,,,15,70,65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15',
'70,65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85',
',74,,80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85,,74,,80,,64,,33',
',28,77,,,49,,,,15,70,65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15',
'70,65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,9,14,,15,70,65,,35,,,85',
',,9,14,,64,,33,,28,77,,,49,,,,15,70,9,14,35,64,74,85,80,28,239,,,49',
',33,,15,64,54,,35,28,162,65,44,49,9,14,,15,74,33,80,35,64,,,,28,77,',
',49,,33,,15,70,65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15,70,65',
',35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85,,74',
',80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85,,74,,80,,64,,33,,28',
'77,,,49,,,,15,70,65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15,70',
'65,,35,9,14,85,,74,,80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85,',
'74,,80,,64,,33,,28,77,,,49,,,,15,70,65,,35,9,14,85,,74,,80,,64,,33,',
'28,77,,,49,9,14,,15,70,65,240,35,,,85,,,,,,64,,33,,28,77,,,49,,,,15',
'70,9,14,35,64,74,85,80,28,239,,,49,,33,,15,,9,14,35,,74,65,80,,,,,,',
'33,,,64,,,,28,77,65,244,49,,,,15,70,,,35,64,,85,,28,77,,,49,,33,,15',
'70,,,35,9,14,85,,74,186,80,,,,33,,181,182,165,166,,9,14,173,177,,65',
',379,,167,,,,,,,64,,,,28,77,,,49,,,,15,70,,,35,64,,85,,28,239,,,49,',
'33,248,15,,,,35,,,,175,179,,,,,247,33,,170,172,176,178,,,175,179,,,',
',,,,170,172,176,178,,,,,171,174,,,181,182,165,166,168,169,,173,177,',
',171,174,,167,181,182,165,166,168,169,180,173,177,,,,,,167,175,179,',
',,,,,,170,172,176,178,,,175,179,,,,,,,,170,172,176,178,,,,,171,174,',
',181,182,165,166,168,169,,173,177,,,171,174,,167,181,182,165,166,168',
'169,,173,177,175,179,,,,167,,,,170,172,176,178,,,175,179,,,,,,,,170',
'172,176,178,,,,,,,,,181,182,165,166,168,169,,173,177,,,,,,167,181,182',
'165,166,168,169,,173,177,175,179,,,,167,,,,170,172,176,178,,,175,179',
',,,,,,,170,172,176,178,,,,,171,174,,,181,182,165,166,168,169,,173,177',
',,171,174,,167,181,182,165,166,168,169,,173,177,175,179,,,,167,,,,170',
'172,176,178,,,175,179,,,,,,,,170,172,176,178,,,,,171,174,,,181,182,165',
'166,168,169,,173,177,,,171,174,,167,181,182,165,166,168,169,,173,177',
'175,179,,,,167,,,,170,172,176,178,,,175,179,,,,,,,,170,172,176,178,',
',,,171,174,,,181,182,165,166,168,169,,173,177,,,171,174,,167,181,182',
'165,166,168,169,,173,177,175,179,,,,167,,,,170,172,176,178,,,175,179',
',,,,,,,170,172,176,178,,,,,171,174,,,181,182,165,166,168,169,,173,177',
',,171,174,,167,181,182,165,166,168,169,,173,177,175,179,,,,167,,,,170',
'172,176,178,,,175,179,,,,,,,263,170,172,176,178,,,,,,,,,181,182,165',
'166,168,169,,173,177,,,171,174,,167,181,182,165,166,168,169,,173,177',
'175,179,,,,167,,,,170,172,176,178,,,175,179,,,,,,,,170,172,176,178,',
',,,,174,179,,181,182,165,166,168,169,170,173,177,,,171,174,179,167,181',
'182,165,166,168,169,170,173,177,,,,,,167,,179,,181,182,165,166,168,169',
'170,173,177,,,,,179,167,181,182,165,166,168,169,170,173,177,,,,,,167',
',,,181,182,165,166,168,169,,173,177,,,,,,167,181,182,165,166,168,169',
',173,177,152,154,156,127,130,167,136,138,142,224,225,,155,227,,,,,,141',
'146,226,152,154,156,127,130,,136,138,142,224,225,,155,227,,129,133,',
',141,146,226,152,154,156,127,130,,136,138,142,224,232,,155,227,,129',
'133,,,141,146,226,152,154,156,127,130,,136,138,142,224,232,,155,227',
',129,133,,,141,146,226,152,154,156,127,130,,136,138,142,224,232,,155',
'227,,129,133,,,141,146,226,152,154,156,127,130,,136,138,142,224,225',
',155,227,,129,133,,,141,146,226,181,182,165,166,168,169,,173,177,,,',
',,167,129,133' ]
        racc_action_table = arr = ::Array.new(2456, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,91,91,290,290,149,23,336,23,98,325,212,336,77,91,91,257,290,149',
'212,162,23,162,91,91,91,91,0,22,0,0,77,0,0,98,0,0,0,162,0,0,0,398,398',
'0,23,91,91,0,398,91,91,91,91,91,91,53,91,91,0,371,371,228,261,91,0,22',
'245,245,22,398,305,398,398,254,398,398,73,398,398,398,245,398,398,398',
'396,396,398,22,228,228,398,396,371,73,305,305,371,371,84,253,371,398',
'258,258,371,29,258,398,371,29,326,84,396,326,396,396,29,396,396,371',
'396,396,396,19,396,396,396,388,388,396,252,19,10,396,388,258,208,107',
'214,258,258,10,10,258,396,59,59,258,107,214,396,258,297,107,214,388',
'297,388,388,297,388,388,258,388,388,388,324,388,388,388,26,26,388,251',
'208,124,388,208,59,59,124,309,59,59,250,59,59,388,292,292,59,329,309',
'388,59,292,208,309,26,329,26,26,64,26,26,59,26,26,26,157,26,26,26,180',
'180,26,103,153,249,26,180,324,324,324,324,150,292,103,249,249,26,219',
'103,68,219,219,26,249,249,249,249,180,207,180,180,148,180,180,71,180',
'180,180,71,180,180,180,302,302,180,145,249,249,180,302,249,249,249,249',
'249,249,244,249,249,180,80,80,320,320,249,180,207,80,374,207,302,374',
'302,302,45,302,302,75,302,302,302,75,302,302,302,57,57,302,207,57,280',
'302,269,269,269,269,269,269,80,269,269,69,302,248,248,221,269,291,302',
'221,221,291,291,57,57,57,57,57,57,57,57,57,57,57,239,57,57,1,354,354',
'57,1,57,57,57,354,248,282,282,286,248,248,282,282,248,57,240,240,248',
'282,57,57,248,264,264,37,354,238,354,354,264,354,354,248,354,354,354',
'232,354,354,354,256,256,354,230,265,265,354,256,240,283,283,265,240',
'240,283,283,240,354,243,243,240,283,243,354,240,12,34,296,256,12,256',
'256,223,256,256,240,256,256,256,30,256,256,256,279,279,256,209,190,246',
'256,190,243,246,246,24,243,243,187,72,243,256,187,187,243,113,312,256',
'243,313,200,316,279,144,279,279,21,279,279,243,279,279,279,76,279,279',
'279,247,247,279,322,323,143,279,247,48,110,89,89,192,78,89,183,89,279',
'16,16,16,16,79,279,11,11,11,11,247,81,247,247,89,247,247,337,247,247',
'247,338,247,247,247,89,342,247,140,89,89,247,137,89,135,83,358,89,89',
'317,317,89,247,317,89,317,134,128,247,304,304,364,89,304,125,304,370',
'177,372,120,120,317,86,120,90,120,6,6,6,6,377,304,317,95,381,173,317',
'317,122,3,317,120,304,2,317,317,304,304,317,105,304,317,120,400,304',
'304,120,120,304,317,120,304,402,,120,120,303,303,120,304,303,120,303',
',,,333,333,,120,333,,333,,,,294,294,303,,294,,294,47,47,47,47,,333,303',
',,,303,303,,,303,294,333,,303,303,333,333,303,,333,303,294,,333,333',
'294,294,333,303,294,333,,,294,294,36,36,294,333,36,294,36,,,,287,287',
',294,287,,287,,,,40,40,36,,40,,40,,,,44,44,287,36,44,,44,36,36,,,36',
'40,287,,36,,287,287,36,,287,44,40,,287,287,40,40,287,36,40,287,44,,40',
'40,44,44,40,287,44,40,,,44,44,14,14,44,40,14,44,14,,,,262,262,,44,262',
',262,,,,334,334,14,,334,,334,5,5,5,5,,262,14,,,,14,14,,,14,334,262,',
'14,14,262,262,14,,262,14,334,,262,262,334,334,262,14,334,262,,,334,334',
'65,65,334,262,65,334,65,,,,8,8,,334,8,,8,,,,70,70,65,,70,,70,,,,,,8',
'65,,,,65,65,,,65,70,8,,65,65,8,8,65,,8,65,70,,8,8,70,70,8,65,70,8,318',
'318,70,70,318,,70,8,,70,74,74,,,74,74,74,70,,,201,201,,,201,,201,,,',
',,74,318,,,,318,318,,,318,201,74,,318,,74,74,318,,74,,201,,74,74,201',
'201,74,318,201,74,199,,201,201,,,201,74,,201,199,199,,,,,,201,,199,199',
'199,199,,,268,268,268,268,,189,189,268,268,189,,189,,,268,,,199,199',
',,199,199,199,199,199,199,189,199,199,188,188,,,188,199,188,,189,,,',
'189,189,,,189,,,,189,189,188,188,189,182,182,189,,182,,182,,188,,189',
',188,188,,,188,,,,188,188,182,,188,181,181,188,,181,,181,,182,,188,',
'182,182,,,182,,,,182,182,181,,182,375,375,182,,375,,375,,181,,182,,181',
'181,,,181,,,,181,181,375,,181,179,179,181,,179,,179,,375,,181,,375,375',
',,375,,,,375,375,179,,375,178,178,375,,178,,178,,179,,375,,179,179,',
',179,,,,179,179,178,,179,85,85,179,,85,,85,,178,,179,,178,178,,,178',
',,,178,178,85,,178,176,176,178,,176,,176,,85,,178,,85,85,,,85,,,,85',
'85,176,,85,87,87,85,,87,,87,,176,,85,,176,176,,,176,,,,176,176,87,,176',
'88,88,176,,88,,88,,87,,176,,87,87,,,87,,,,87,87,88,,87,175,175,87,,175',
',175,,88,,87,,88,88,,,88,380,380,,88,88,175,,88,,,88,,,93,93,,175,,88',
',175,175,,,175,,,,175,175,94,94,175,380,94,175,94,380,380,,,380,,175',
',380,93,93,,380,93,93,94,93,93,174,174,,93,174,380,174,93,94,,,,94,94',
',,94,,93,,94,94,174,,94,172,172,94,,172,,172,,174,,94,,174,174,,,174',
',,,174,174,172,,174,171,171,174,,171,,171,,172,,174,,172,172,,,172,',
',,172,172,171,,172,104,104,172,,104,,104,,171,,172,,171,171,,,171,,',
',171,171,104,,171,170,170,171,,170,,170,,104,,171,,104,104,,,104,,,',
'104,104,170,,104,169,169,104,,169,,169,,170,,104,,170,170,,,170,,,,170',
'170,169,,170,168,168,170,,168,,168,,169,,170,,169,169,,,169,,,,169,169',
'168,,169,167,167,169,,167,,167,,168,,169,,168,168,,,168,,,,168,168,167',
',168,166,166,168,,166,,166,,167,,168,,167,167,,,167,112,112,,167,167',
'166,112,167,,,167,,,,,,166,,167,,166,166,,,166,,,,166,166,165,165,166',
'112,165,166,165,112,112,,,112,,166,,112,,115,115,112,,115,165,115,,',
',,,,112,,,165,,,,165,165,115,115,165,,,,165,165,,,165,115,,165,,115',
'115,,,115,,165,,115,115,,,115,116,116,115,,116,116,116,,,,115,,267,267',
'267,267,,327,327,267,267,,116,,327,,267,,,,,,,116,,,,116,116,,,116,',
',,116,116,,,116,327,,116,,327,327,,,327,,116,119,327,,,,327,,,,119,119',
',,,,118,327,,119,119,119,119,,,118,118,,,,,,,,118,118,118,118,,,,,119',
'119,,,119,119,119,119,119,119,,119,119,,,118,118,,119,118,118,118,118',
'118,118,67,118,118,,,,,,118,67,67,,,,,,,,67,67,67,67,,,185,185,,,,,',
',,185,185,185,185,,,,,67,67,,,67,67,67,67,67,67,,67,67,,,185,185,,67',
'185,185,185,185,185,185,,185,185,361,361,,,,185,,,,361,361,361,361,',
',360,360,,,,,,,,360,360,360,360,,,,,,,,,361,361,361,361,361,361,,361',
'361,,,,,,361,360,360,360,360,360,360,,360,360,353,353,,,,360,,,,353',
'353,353,353,,,348,348,,,,,,,,348,348,348,348,,,,,353,353,,,353,353,353',
'353,353,353,,353,353,,,348,348,,353,348,348,348,348,348,348,,348,348',
'345,345,,,,348,,,,345,345,345,345,,,382,382,,,,,,,,382,382,382,382,',
',,,345,345,,,345,345,345,345,345,345,,345,345,,,382,382,,345,382,382',
'382,382,382,382,,382,382,368,368,,,,382,,,,368,368,368,368,,,198,198',
',,,,,,,198,198,198,198,,,,,368,368,,,368,368,368,368,368,368,,368,368',
',,198,198,,368,198,198,198,198,198,198,,198,198,205,205,,,,198,,,,205',
'205,205,205,,,383,383,,,,,,,,383,383,383,383,,,,,205,205,,,205,205,205',
'205,205,205,,205,205,,,383,383,,205,383,383,383,383,383,383,,383,383',
'273,273,,,,383,,,,273,273,273,273,,,164,164,,,,,,,164,164,164,164,164',
',,,,,,,,273,273,273,273,273,273,,273,273,,,164,164,,273,164,164,164',
'164,164,164,,164,164,270,270,,,,164,,,,270,270,270,270,,,197,197,,,',
',,,,197,197,197,197,,,,,,270,271,,270,270,270,270,270,270,271,270,270',
',,197,197,275,270,197,197,197,197,197,197,275,197,197,,,,,,197,,277',
',271,271,271,271,271,271,277,271,271,,,,,274,271,275,275,275,275,275',
'275,274,275,275,,,,,,275,,,,277,277,277,277,277,277,,277,277,,,,,,277',
'274,274,274,274,274,274,,274,274,106,106,106,106,106,274,106,106,106',
'106,106,,106,106,,,,,,106,106,106,260,260,260,260,260,,260,260,260,260',
'260,,260,260,,106,106,,,260,260,260,222,222,222,222,222,,222,222,222',
'222,222,,222,222,,260,260,,,222,222,222,315,315,315,315,315,,315,315',
'315,315,315,,315,315,,222,222,,,315,315,315,108,108,108,108,108,,108',
'108,108,108,108,,108,108,,315,315,,,108,108,108,259,259,259,259,259',
',259,259,259,259,259,,259,259,,108,108,,,259,259,259,278,278,278,278',
'278,278,,278,278,,,,,,278,259,259' ]
        racc_action_check = arr = ::Array.new(2456, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   307,   530,   562,   nil,   705,   494,   nil,   816,   nil,
   128,   434,   376,   nil,   739,   nil,   428,   nil,   nil,   110,
   nil,   462,    27,     1,   433,   nil,   170,   nil,   nil,    71,
   403,   nil,   nil,   nil,   390,   nil,   662,   348,   nil,   nil,
   682,   nil,   nil,   nil,   692,   284,   nil,   561,   479,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,   299,   nil,   145,
   nil,   nil,   nil,   nil,   198,   806,   nil,  1744,   216,   294,
   826,   231,   426,    72,   879,   274,   446,     8,   467,   472,
   274,   483,   nil,   503,    94,  1137,   530,  1187,  1212,   481,
   531,    -2,   nil,  1267,  1284,   564,   nil,   nil,    -2,   nil,
   nil,   nil,   nil,   194,  1384,   572,  2277,   115,  2365,   nil,
   474,   nil,  1526,   439,   nil,  1573,  1623,   nil,  1693,  1678,
   548,   nil,   557,   nil,   142,   537,   nil,   nil,   497,   nil,
   nil,   nil,   nil,   nil,   517,   513,   nil,   500,   nil,   nil,
   496,   nil,   nil,   467,   436,   238,   nil,   nil,   224,    -5,
   204,   nil,   nil,   213,   nil,   nil,   nil,   188,   nil,   nil,
   nil,   nil,    15,   nil,  2119,  1556,  1509,  1484,  1459,  1434,
  1409,  1359,  1334,   504,  1309,  1237,  1162,   486,  1112,  1087,
   213,  1037,  1012,   448,   nil,  1759,   nil,   437,   987,   962,
   425,   nil,   474,   nil,   nil,   nil,   nil,  2179,  1999,   927,
   419,   889,   nil,   nil,   nil,  2044,   nil,   242,   136,   425,
   nil,   nil,    -6,   nil,   116,   nil,   nil,   nil,   nil,   187,
   nil,   314,  2321,   407,   nil,   nil,   nil,   nil,    41,   nil,
   378,   nil,   331,   nil,   nil,   nil,   nil,   nil,   362,   316,
   360,   nil,   nil,   403,   249,    57,   428,   471,   317,   213,
   184,   160,   117,    76,    63,   nil,   385,     8,   102,  2387,
  2299,    55,   749,   nil,   309,   331,   nil,  1584,   906,   255,
  2164,  2197,   nil,  2104,  2245,  2212,   nil,  2230,  2386,   428,
   297,   nil,   298,   341,   nil,   nil,   348,   672,   nil,   nil,
    -7,   316,   188,   nil,   615,   nil,   406,   118,   nil,   nil,
   nil,   nil,   256,   595,   538,    47,   nil,   nil,   nil,   159,
   nil,   nil,   440,   446,   nil,  2343,   448,   528,   869,   nil,
   267,   nil,   451,   454,   160,     2,    81,  1640,   nil,   181,
   nil,   nil,   nil,   605,   759,   nil,   -27,   483,   503,   nil,
   nil,   nil,   505,   nil,   nil,  1924,   nil,   nil,  1879,   nil,
   nil,   nil,   nil,  1864,   342,   nil,   nil,   nil,   518,   nil,
  1819,  1804,   nil,   nil,   533,   nil,   nil,   nil,  1984,   nil,
   538,    59,   540,   nil,   253,  1062,   nil,   553,   nil,   nil,
  1254,   557,  1939,  2059,   nil,   nil,   nil,   nil,   127,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,    41,   nil,
   575,   nil,   584,   nil,   nil,   nil ]

racc_action_default = [
  -206,  -250,   -75,  -250,   -19,    -8,   -20,    -9,  -250,  -125,
  -223,   -10,  -198,  -186,  -250,   -99,  -250,   -11,  -177,  -241,
   -12,  -250,  -250,  -178,   -39,   -13,    -1,  -182,  -130,  -250,
   -41,   -14,    -2,  -231,  -250,   -97,   -98,   -42,   -15,    -3,
  -250,   -43,   -16,  -181,  -250,   -45,   -17,    -6,  -250,  -185,
  -183,   -18,    -7,  -206,  -198,  -197,   -76,  -110,   -49,  -250,
   -46,   -47,   -48,  -142,  -223,  -250,  -143,  -250,  -250,  -241,
  -250,   -59,   -67,   -60,  -250,   -63,   -61,   -98,   -64,   -58,
  -250,   -66,   -62,   -68,   -65,  -250,   -69,  -250,  -250,  -250,
  -206,  -250,  -126,  -250,  -250,  -250,  -203,  -205,  -206,  -199,
  -202,  -201,  -204,  -206,  -250,   -78,  -110,  -206,  -120,    -4,
  -250,   -74,  -250,   -53,   -54,  -250,  -250,  -135,  -250,  -250,
  -250,  -188,  -190,  -187,  -207,  -250,  -208,   -25,   -95,   -29,
   -27,  -114,   -93,   -35,  -250,  -229,   -23,  -101,   -31,  -111,
  -102,   -33,   -32,  -250,  -115,  -104,   -21,  -105,  -100,   -98,
   -34,  -103,   -28,  -106,   -26,   -22,   -30,   -24,   -40,   -44,
   -37,   -39,   -98,   -38,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -160,   -56,  -226,  -250,  -250,  -250,
  -250,  -235,  -250,  -239,  -238,  -234,  -153,  -107,  -109,  -250,
  -206,  -250,  -128,  -127,   -36,  -108,   406,  -250,  -250,  -250,
  -217,   -84,  -250,  -223,  -206,   -91,   -90,   -81,   -98,  -250,
   -82,  -250,  -120,  -229,  -115,  -113,   -34,   -24,  -250,  -118,
  -229,  -119,  -113,  -121,  -184,  -178,  -180,  -179,  -250,   -98,
  -250,  -171,  -172,  -250,   -52,  -250,  -250,  -250,  -250,  -250,
  -250,  -216,  -214,  -250,  -229,  -211,  -250,  -250,   -96,  -110,
  -230,  -250,  -250,  -163,  -150,  -149,  -144,  -151,  -152,  -155,
  -162,  -157,  -145,  -161,  -159,  -156,  -146,  -158,  -154,    -5,
  -250,  -134,  -147,  -148,  -249,  -227,  -228,  -250,  -224,  -124,
  -250,  -250,  -250,  -232,  -250,  -240,  -250,  -250,  -219,  -129,
  -200,  -218,  -250,  -250,  -250,  -250,   -79,   -87,   -86,  -250,
  -228,  -132,  -229,  -250,   -80,  -230,  -250,  -250,  -250,  -174,
  -229,   -55,  -228,   -50,  -224,  -250,  -138,  -250,  -165,  -250,
  -169,  -242,  -189,  -250,  -250,  -209,  -230,  -250,  -250,  -192,
   -70,   -94,  -229,  -112,   -71,  -116,  -133,  -225,   -57,  -123,
  -131,  -236,  -233,  -237,  -250,  -221,  -220,  -222,  -250,  -196,
   -88,   -89,   -85,   -83,  -250,   -72,  -122,   -73,  -117,  -176,
  -228,  -250,  -250,   -51,  -138,  -250,  -137,  -250,  -166,  -164,
  -250,  -250,  -215,  -213,  -212,  -210,  -191,   -92,  -250,  -194,
  -195,   -77,  -175,  -173,  -136,  -139,  -250,  -170,  -250,  -193,
  -250,  -141,  -250,  -168,  -140,  -167 ]

racc_goto_table = [
    23,   109,    26,   117,    18,    53,   114,   242,   280,   191,
   255,   132,   229,   121,    92,   135,    90,    99,   261,   230,
    97,   219,   147,   328,    27,   228,    23,   105,    43,   110,
    18,   238,   111,    32,   376,   125,   187,   160,    59,   158,
   159,   327,   366,   363,   241,   203,   320,   257,    93,   122,
    27,   128,   296,    98,    43,   209,   371,   140,   301,    23,
   253,   137,   163,    18,   223,    45,   221,   254,   113,   356,
   190,   204,   200,   158,   159,   325,    21,   245,   246,   nil,
   nil,    27,   394,    27,   338,    43,   126,    43,   nil,    41,
   nil,    45,   nil,    23,   nil,   nil,   163,    18,   nil,   nil,
   nil,   nil,   378,   nil,   nil,   nil,   313,   215,   nil,   nil,
   nil,   215,   235,   316,   nil,    41,    18,    27,   nil,   nil,
   nil,    43,   153,   126,    45,   nil,   229,   nil,   nil,   nil,
   358,   210,   305,   312,   nil,   319,    27,   337,   nil,   nil,
    43,   nil,   nil,   nil,   nil,   nil,   151,   nil,    41,   nil,
   290,   291,   nil,   nil,   nil,   nil,   nil,   nil,    45,   238,
   nil,   nil,   nil,   nil,   343,   nil,   nil,   330,   nil,   nil,
   nil,   272,   nil,   nil,   nil,   276,   nil,   nil,   nil,   nil,
    23,    19,    41,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   364,   nil,   nil,   nil,   nil,
   nil,   299,   300,   372,    27,    97,    97,    19,    43,   nil,
   nil,   nil,   341,   321,   nil,   332,   nil,   342,   215,   229,
    24,   351,   384,   147,   400,   387,   402,   nil,   nil,   nil,
   nil,   nil,   nil,   298,   nil,   nil,   nil,   nil,   nil,   nil,
   235,   nil,   nil,   nil,    18,    45,   330,    23,   235,   nil,
   nil,    18,    18,   161,   109,   nil,    23,   nil,   140,   nil,
    18,   nil,   137,   nil,    27,   nil,   392,   nil,    43,    41,
   nil,    27,    27,   nil,   nil,    43,    43,   nil,   nil,    23,
    27,   nil,    27,    18,    43,   nil,    43,   161,   369,   nil,
   238,   nil,   nil,   234,   nil,   nil,   nil,   nil,   nil,   397,
   nil,   355,    23,    27,   nil,   nil,    18,    43,   nil,   nil,
   nil,   nil,    45,   215,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   153,   nil,   nil,    27,   235,   nil,   nil,
    43,    18,   nil,   nil,   nil,   nil,    41,   nil,   395,   nil,
   nil,   nil,   nil,   nil,    45,    41,   nil,   151,   nil,   nil,
   nil,    27,   nil,   nil,    23,    43,   388,   nil,    18,   nil,
   nil,    19,   nil,   109,   nil,   nil,   nil,    45,    41,   nil,
   nil,   235,   nil,   nil,    24,    18,   nil,    37,    27,   nil,
   235,   nil,    43,    30,    18,   nil,   nil,   nil,    23,   nil,
   nil,    41,    18,   nil,   nil,    27,    23,   nil,    23,    43,
    18,   nil,    18,    37,    27,    50,   nil,   nil,    43,    30,
   nil,   nil,    27,   nil,   nil,   nil,    43,   nil,   nil,    45,
    27,   234,    27,   nil,    43,   nil,    43,   nil,    19,   234,
   nil,    50,   nil,   nil,   148,   nil,    37,    19,   nil,   nil,
   145,    24,    30,    41,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,   nil,    45,   nil,   nil,   nil,   193,   nil,   nil,
    19,    45,    50,    45,    50,   nil,   nil,   nil,   nil,   nil,
    37,   nil,   nil,    24,   nil,   nil,    30,    41,   nil,   nil,
   nil,   nil,   nil,    19,   nil,    41,   216,    41,   nil,   237,
   216,   nil,   nil,   nil,   nil,   236,    24,   nil,    50,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   234,   nil,   nil,   nil,   nil,    37,   nil,   nil,
   nil,   234,   nil,    30,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,    19,
   nil,   nil,    24,   nil,   nil,    50,   nil,   nil,   nil,   nil,
    24,   nil,    24,   nil,   nil,   nil,   nil,   216,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   237,   nil,   nil,
   nil,   nil,   nil,   236,    37,   237,   nil,   nil,   nil,   nil,
    30,   236,   nil,    37,   nil,   148,   nil,   nil,   nil,    30,
   nil,   145,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,    50,    50,   nil,   nil,    37,   nil,   nil,   nil,
   nil,    50,    30,    50,   nil,    67,   nil,   nil,   nil,   193,
   nil,    91,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
   nil,   nil,   nil,   nil,    50,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   216,   nil,   nil,   nil,   nil,   118,   nil,   nil,
   nil,   119,   nil,   nil,   237,   nil,   nil,    50,   nil,   nil,
   236,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   164,   nil,   nil,   nil,   nil,   184,   nil,   nil,
   nil,    37,    50,   nil,   nil,   nil,   nil,    30,   nil,   nil,
   nil,   nil,   196,   nil,   197,   198,   199,   nil,   237,   nil,
   nil,   205,   nil,   nil,   236,   nil,   nil,   237,   nil,    50,
   nil,   nil,   nil,   236,   nil,    37,   nil,   nil,   nil,   nil,
   nil,    30,   nil,    37,   nil,    37,    50,   249,   nil,    30,
   nil,    30,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   264,   265,   266,   267,   268,   269,   270,   271,
   nil,   273,   274,   275,   nil,   277,   278,   nil,   282,   283,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   345,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   348,   nil,   nil,   nil,   nil,   nil,
   nil,   353,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   360,   361,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   368,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   382,   383,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   118 ]

racc_goto_check = [
    35,     4,     2,    63,    34,    41,    31,    72,     5,    87,
    84,    54,    57,    74,    61,    44,    41,    80,    45,    46,
    66,    49,    37,    68,    36,    49,    35,    48,    39,    35,
    34,    70,     6,     3,    64,    76,    29,    22,    23,     8,
    10,    67,    60,    50,    71,    62,    73,    43,    23,    75,
    36,    42,    77,    78,    39,    79,    33,    35,    81,    35,
    82,    34,     6,    34,    44,    28,    29,    83,    30,    85,
    86,    22,    76,     8,    10,     5,     1,    29,    29,   nil,
   nil,    36,    64,    36,     5,    39,     3,    39,   nil,    27,
   nil,    28,   nil,    35,   nil,   nil,     6,    34,   nil,   nil,
   nil,   nil,    68,   nil,   nil,   nil,    45,    34,   nil,   nil,
   nil,    34,    35,    45,   nil,    27,    34,    36,   nil,   nil,
   nil,    39,    28,     3,    28,   nil,    57,   nil,   nil,   nil,
     5,     3,    49,    46,   nil,    72,    36,    45,   nil,   nil,
    39,   nil,   nil,   nil,   nil,   nil,    27,   nil,    27,   nil,
    29,    29,   nil,   nil,   nil,   nil,   nil,   nil,    28,    70,
   nil,   nil,   nil,   nil,    57,   nil,   nil,    70,   nil,   nil,
   nil,    66,   nil,   nil,   nil,    66,   nil,   nil,   nil,   nil,
    35,    56,    27,   nil,    34,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,    45,   nil,   nil,   nil,   nil,
   nil,    61,    80,    45,    36,    66,    66,    56,    39,   nil,
   nil,   nil,    54,    31,   nil,    74,   nil,    44,    34,    57,
    24,    87,    84,    37,     5,    45,     5,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
    35,   nil,   nil,   nil,    34,    28,    70,    35,    35,   nil,
   nil,    34,    34,    24,     4,   nil,    35,   nil,    35,   nil,
    34,   nil,    34,   nil,    36,   nil,    72,   nil,    39,    27,
   nil,    36,    36,   nil,   nil,    39,    39,   nil,   nil,    35,
    36,   nil,    36,    34,    39,   nil,    39,    24,    31,   nil,
    70,   nil,   nil,    56,   nil,   nil,   nil,   nil,   nil,    70,
   nil,    41,    35,    36,   nil,   nil,    34,    39,   nil,   nil,
   nil,   nil,    28,    34,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    28,   nil,    28,   nil,   nil,    36,    35,   nil,   nil,
    39,    34,   nil,   nil,   nil,   nil,    27,   nil,    63,   nil,
   nil,   nil,   nil,   nil,    28,    27,   nil,    27,   nil,   nil,
   nil,    36,   nil,   nil,    35,    39,     2,   nil,    34,   nil,
   nil,    56,   nil,     4,   nil,   nil,   nil,    28,    27,   nil,
   nil,    35,   nil,   nil,    24,    34,   nil,    26,    36,   nil,
    35,   nil,    39,    25,    34,   nil,   nil,   nil,    35,   nil,
   nil,    27,    34,   nil,   nil,    36,    35,   nil,    35,    39,
    34,   nil,    34,    26,    36,    40,   nil,   nil,    39,    25,
   nil,   nil,    36,   nil,   nil,   nil,    39,   nil,   nil,    28,
    36,    56,    36,   nil,    39,   nil,    39,   nil,    56,    56,
   nil,    40,   nil,   nil,    26,   nil,    26,    56,   nil,   nil,
    25,    24,    25,    27,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,   nil,    28,   nil,   nil,   nil,    26,   nil,   nil,
    56,    28,    40,    28,    40,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,    24,   nil,   nil,    25,    27,   nil,   nil,
   nil,   nil,   nil,    56,   nil,    27,    25,    27,   nil,    26,
    25,   nil,   nil,   nil,   nil,    25,    24,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,    56,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,    56,   nil,    25,   nil,   nil,   nil,   nil,   nil,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,   nil,    56,
   nil,   nil,    24,   nil,   nil,    40,   nil,   nil,   nil,   nil,
    24,   nil,    24,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,    25,    26,    26,   nil,   nil,   nil,   nil,
    25,    25,   nil,    26,   nil,    26,   nil,   nil,   nil,    25,
   nil,    25,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,    40,    40,   nil,   nil,    26,   nil,   nil,   nil,
   nil,    40,    25,    40,   nil,    32,   nil,   nil,   nil,    26,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,    40,    25,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    32,   nil,   nil,    26,   nil,   nil,    40,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,    26,    40,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,    32,   nil,    32,    32,    32,   nil,    26,   nil,
   nil,    32,   nil,   nil,    25,   nil,   nil,    26,   nil,    40,
   nil,   nil,   nil,    25,   nil,    26,   nil,   nil,   nil,   nil,
   nil,    25,   nil,    26,   nil,    26,    40,    32,   nil,    25,
   nil,    25,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,    32,    32,    32,    32,    32,    32,    32,
   nil,    32,    32,    32,   nil,    32,    32,   nil,    32,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    76,     2,    33,   -25,  -172,     3,   nil,   -20,   nil,
   -19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -22,    32,   194,   383,   377,    89,    65,   -38,
    32,   -30,   657,  -264,     4,     0,    24,   -35,   nil,    28,
   405,     4,    -6,   -81,   -42,  -117,   -89,   nil,     4,   -82,
  -266,   nil,   nil,   nil,   -46,   nil,   181,   -96,   nil,   nil,
  -273,     0,   -46,   -37,  -292,   nil,    -2,  -207,  -225,   nil,
   -81,   -68,  -105,  -194,   -35,     1,   -18,  -148,    31,   -43,
    -5,  -150,   -64,   -57,  -114,  -228,   -10,   -71,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   279,   217,    39,   nil,    47,    52,     5,     7,
    11,    17,    20,    25,    31,    38,    42,    46,    51,     4,
     6,   131,    16,   nil,    72,    75,    79,    82,    84,   nil,
   nil,    63,   185,   287,    71,    73,    76,    78,    81,    83,
    86,     3,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   220,   309,   211,   212,   nil,   134,    69,   139,   143,   231,
   233,   nil,   nil,   nil,   nil,    66,    13,   nil,   nil,   329,
    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   101,   nil,   nil,   nil,   nil,   nil,   nil,   192,    68 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  4, 83, :_reduce_50,
  5, 83, :_reduce_51,
  3, 83, :_reduce_52,
  2, 83, :_reduce_53,
  1, 99, :_reduce_54,
  3, 99, :_reduce_55,
  1, 98, :_reduce_56,
  3, 98, :_reduce_57,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  5, 75, :_reduce_70,
  5, 75, :_reduce_71,
  5, 75, :_reduce_72,
  5, 87, :_reduce_73,
  2, 76, :_reduce_74,
  1, 116, :_reduce_75,
  2, 116, :_reduce_76,
  6, 77, :_reduce_77,
  2, 77, :_reduce_78,
  3, 117, :_reduce_79,
  3, 117, :_reduce_80,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_83,
  1, 119, :_reduce_none,
  3, 119, :_reduce_85,
  1, 120, :_reduce_86,
  1, 120, :_reduce_87,
  3, 121, :_reduce_88,
  3, 121, :_reduce_89,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_92,
  1, 111, :_reduce_93,
  3, 111, :_reduce_94,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_97,
  1, 103, :_reduce_98,
  1, 104, :_reduce_99,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 78, :_reduce_107,
  3, 78, :_reduce_108,
  3, 88, :_reduce_109,
  0, 113, :_reduce_110,
  1, 113, :_reduce_111,
  3, 113, :_reduce_112,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_116,
  3, 128, :_reduce_117,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_120,
  1, 115, :_reduce_121,
  3, 115, :_reduce_122,
  4, 108, :_reduce_123,
  3, 108, :_reduce_124,
  1, 95, :_reduce_125,
  2, 95, :_reduce_126,
  2, 130, :_reduce_127,
  1, 131, :_reduce_128,
  2, 131, :_reduce_129,
  1, 105, :_reduce_130,
  4, 93, :_reduce_131,
  4, 93, :_reduce_132,
  5, 81, :_reduce_133,
  4, 81, :_reduce_134,
  2, 80, :_reduce_135,
  5, 132, :_reduce_136,
  4, 132, :_reduce_137,
  0, 133, :_reduce_none,
  2, 133, :_reduce_139,
  4, 133, :_reduce_140,
  3, 133, :_reduce_141,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 101, :_reduce_144,
  3, 101, :_reduce_145,
  3, 101, :_reduce_146,
  3, 101, :_reduce_147,
  3, 101, :_reduce_148,
  3, 101, :_reduce_149,
  3, 101, :_reduce_150,
  3, 101, :_reduce_151,
  3, 101, :_reduce_152,
  2, 101, :_reduce_153,
  3, 101, :_reduce_154,
  3, 101, :_reduce_155,
  3, 101, :_reduce_156,
  3, 101, :_reduce_157,
  3, 101, :_reduce_158,
  3, 101, :_reduce_159,
  2, 101, :_reduce_160,
  3, 101, :_reduce_161,
  3, 101, :_reduce_162,
  3, 101, :_reduce_163,
  5, 79, :_reduce_164,
  1, 136, :_reduce_165,
  2, 136, :_reduce_166,
  5, 137, :_reduce_167,
  4, 137, :_reduce_168,
  1, 138, :_reduce_169,
  3, 138, :_reduce_170,
  3, 96, :_reduce_171,
  1, 140, :_reduce_none,
  4, 140, :_reduce_173,
  1, 142, :_reduce_none,
  3, 142, :_reduce_175,
  3, 141, :_reduce_176,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_185,
  1, 139, :_reduce_none,
  1, 143, :_reduce_187,
  1, 144, :_reduce_none,
  3, 144, :_reduce_189,
  2, 82, :_reduce_190,
  6, 84, :_reduce_191,
  5, 84, :_reduce_192,
  7, 85, :_reduce_193,
  6, 85, :_reduce_194,
  6, 86, :_reduce_195,
  5, 86, :_reduce_196,
  1, 110, :_reduce_197,
  1, 110, :_reduce_198,
  1, 147, :_reduce_199,
  3, 147, :_reduce_200,
  1, 149, :_reduce_201,
  1, 150, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_204,
  1, 150, :_reduce_none,
  0, 72, :_reduce_206,
  0, 151, :_reduce_207,
  1, 145, :_reduce_none,
  3, 145, :_reduce_209,
  4, 145, :_reduce_210,
  1, 152, :_reduce_none,
  3, 152, :_reduce_212,
  3, 153, :_reduce_213,
  1, 153, :_reduce_214,
  3, 153, :_reduce_215,
  1, 153, :_reduce_216,
  1, 148, :_reduce_none,
  2, 148, :_reduce_218,
  1, 146, :_reduce_none,
  2, 146, :_reduce_220,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 94, :_reduce_223,
  3, 106, :_reduce_224,
  4, 106, :_reduce_225,
  2, 106, :_reduce_226,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_230,
  1, 135, :_reduce_231,
  3, 134, :_reduce_232,
  4, 134, :_reduce_233,
  2, 134, :_reduce_234,
  1, 155, :_reduce_none,
  3, 155, :_reduce_236,
  3, 156, :_reduce_237,
  1, 157, :_reduce_238,
  1, 157, :_reduce_239,
  4, 125, :_reduce_240,
  1, 97, :_reduce_none,
  4, 97, :_reduce_242,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 107, :_reduce_249 ]

racc_reduce_n = 250

racc_shift_n = 406

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "parameterlookup",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key",
  "resourceish" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 158)
  def _reduce_70(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_71(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 164)
  def _reduce_72(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_73(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_74(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_76(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_77(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_78(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 236)
  def _reduce_79(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_80(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_83(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'grammar.ra', 262)
  def _reduce_85(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_87(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 270)
  def _reduce_88(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 275)
  def _reduce_89(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 284)
  def _reduce_92(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_93(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 289)
  def _reduce_94(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'grammar.ra', 297)
  def _reduce_97(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 301)
  def _reduce_98(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_99(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_107(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_108(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 327)
  def _reduce_109(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 333)
  def _reduce_110(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 335)
  def _reduce_111(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_112(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 350)
  def _reduce_117(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_120(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_121(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_122(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 369)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_124(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_126(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 383)
  def _reduce_127(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_129(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 389)
  def _reduce_130(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 393)
  def _reduce_131(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 396)
  def _reduce_132(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 400)
  def _reduce_133(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 409)
  def _reduce_134(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 418)
  def _reduce_135(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 422)
  def _reduce_136(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 433)
  def _reduce_137(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'grammar.ra', 446)
  def _reduce_139(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 449)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 453)
  def _reduce_141(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_144(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_146(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 514)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 517)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 520)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 523)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 537)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 544)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 547)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 557)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 564)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 569)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 575)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 584)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 596)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 601)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 616)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 624)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 632)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 639)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 653)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 657)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_198(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 663)
  def _reduce_199(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_200(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 671)
  def _reduce_201(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 680)
  def _reduce_206(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 684)
  def _reduce_207(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_209(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_210(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_212(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 704)
  def _reduce_213(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_214(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 711)
  def _reduce_215(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_216(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 718)
  def _reduce_218(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 219 omitted

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_220(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'grammar.ra', 729)
  def _reduce_223(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 732)
  def _reduce_224(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_225(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_226(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_230(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_231(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_232(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 754)
  def _reduce_233(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 760)
  def _reduce_234(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'grammar.ra', 765)
  def _reduce_236(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 774)
  def _reduce_237(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 777)
  def _reduce_238(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_239(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 781)
  def _reduce_240(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'grammar.ra', 786)
  def _reduce_242(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'grammar.ra', 797)
  def _reduce_249(val, _values, result)
      result = ast AST::ParameterLookup, :resource => val[0], :parameter => val[2][:value]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
