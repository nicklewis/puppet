#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 853)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'10,15,207,208,213,188,106,109,127,111,316,-185,393,351,-190,173,177',
'188,315,-203,394,-252,112,187,168,170,174,176,41,214,48,1,269,11,14',
'187,22,27,36,-184,45,49,3,10,15,16,108,169,172,34,415,179,180,163,164',
'166,167,-136,171,175,32,99,10,15,55,165,9,17,56,364,326,41,109,48,1',
'16,11,14,355,22,27,36,375,45,49,3,10,15,16,-184,294,322,34,413,10,15',
'99,320,321,102,192,194,105,32,358,-117,320,321,-183,9,17,294,310,99',
'41,347,48,1,187,11,14,32,22,27,36,311,45,49,3,10,15,16,192,222,102,34',
'412,105,86,10,15,294,384,70,220,76,32,84,85,224,346,102,9,17,105,-137',
'32,41,267,48,1,61,11,14,55,22,27,36,56,45,49,3,60,32,16,55,27,73,34',
'56,49,266,222,265,16,66,10,15,34,32,70,81,76,220,263,9,17,259,224,32',
'294,322,260,10,15,222,65,70,61,76,-137,-137,-137,-137,361,259,220,345',
'-250,60,260,224,-186,27,73,61,222,49,10,15,256,16,66,294,330,34,60,220',
'81,-249,27,73,224,-183,49,209,32,331,16,66,111,230,34,65,323,81,10,15',
'294,322,70,60,76,32,55,27,248,218,56,49,65,368,209,16,163,164,357,34',
'61,171,175,10,15,171,175,70,165,76,32,60,165,171,175,27,73,65,319,49',
'165,320,321,16,66,61,128,34,10,15,81,-187,70,-253,10,15,60,359,32,-185',
'27,73,332,-251,49,65,294,295,16,66,97,389,34,362,387,81,302,294,322',
'301,344,60,-188,32,-101,27,73,60,126,49,65,27,248,16,369,49,370,34,-129',
'16,10,15,389,34,70,387,76,-254,32,-185,179,180,163,164,32,65,-190,171',
'175,183,181,65,61,299,165,10,15,327,378,70,297,76,86,60,294,295,380',
'27,73,-189,382,49,-127,128,127,16,66,61,292,34,10,15,81,-191,70,333',
'76,390,60,127,32,187,27,73,126,-186,49,65,-128,398,16,66,61,399,34,10',
'15,81,267,70,120,76,-186,60,32,32,113,27,73,403,107,49,65,329,404,16',
'66,61,327,34,-236,177,81,-38,-38,-38,-38,32,60,168,32,406,27,73,267',
'408,49,65,10,15,16,66,293,-130,34,287,411,81,-40,-40,-40,-40,314,303',
'58,32,179,180,163,164,166,167,65,171,175,57,41,305,48,1,165,11,14,417',
'22,27,36,418,45,49,3,10,15,16,,,,34,402,179,180,163,164,166,167,,171',
'175,32,179,180,163,164,165,9,17,171,175,,41,,48,1,165,11,14,,22,27,36',
',45,49,3,10,15,16,163,164,,34,,171,175,10,15,,,70,165,76,32,89,90,91',
'87,,9,17,,,,41,,48,1,61,11,14,,22,27,36,,45,49,3,60,,16,,27,73,34,,49',
',,,16,66,10,15,34,32,119,81,-203,,,9,17,,,32,,,,10,15,,65,70,118,76',
'-44,-44,-44,-44,89,90,91,87,,60,,,,27,73,61,,49,10,15,,16,70,,76,34',
'60,,,,27,73,,,49,,32,,16,66,61,,34,65,,81,10,15,,,70,60,76,32,,27,73',
',,49,65,,,16,66,,,34,61,,81,10,15,,,70,,76,32,60,,,,27,73,65,,49,,,',
'16,66,61,,34,10,15,81,,70,,76,,60,,32,,27,73,,,49,65,,,16,66,61,,34',
'10,15,81,,70,,76,,60,,32,,27,73,,,49,65,,,16,66,61,,34,10,15,81,,,,',
'392,60,,32,,27,73,10,15,49,65,70,,16,66,,,34,,,81,,,,,,60,,32,,27,248',
'10,15,49,65,,,16,,60,,34,,27,73,,,49,,,,16,32,,,34,10,15,,65,70,,76',
',60,254,32,,27,248,,,49,65,173,177,16,,61,,34,,,168,170,174,176,,,60',
',32,,27,73,,,49,65,10,15,16,66,70,,34,169,172,81,,179,180,163,164,166',
'167,32,171,175,,,,,65,165,,,155,157,160,131,133,60,138,141,144,145,151',
',158,161,,,,16,,143,148,152,10,15,,,70,,76,,,,32,,,,,132,135,65,,,10',
'15,61,,70,,76,,,,,,,60,,,,27,73,,,49,61,243,,16,66,,,34,,,81,60,,,,27',
'73,,32,49,,,,16,66,65,,34,10,15,81,,70,,76,,,,32,179,180,163,164,166',
'167,65,171,175,10,15,61,,70,165,76,,,,,,,60,,,,27,73,,,49,61,,,16,66',
',,34,,,81,60,,,,27,73,,32,49,,,,16,66,65,,34,10,15,81,,70,,76,,,,32',
',,,,,,65,,,10,15,61,,70,,76,,,,,,,60,,,,27,73,,,49,61,,,16,66,,,34,',
',81,60,,,,27,73,,32,49,,,,16,66,65,,34,10,15,81,,70,,76,,,,32,,,,,,',
'65,,,10,15,61,,70,,76,,,,,,,60,,,,27,73,,,49,61,,,16,66,,,34,,,81,60',
',,,27,73,,32,49,,,,16,66,65,,34,10,15,81,,70,,76,,,,32,,,,,,,65,,,10',
'15,61,,70,186,76,,,,,,,60,,,,27,73,,,49,61,,,16,66,,,34,,,81,60,,10',
'15,27,73,,32,49,371,,,16,66,65,,34,,,81,,,,,,,,32,,,41,,48,1,65,11,14',
',22,27,36,,45,49,3,,,16,10,15,,34,70,,76,,,,,,,,32,,,,,,9,17,61,,,10',
'15,,,70,,76,,60,,,,27,73,,,49,,,,16,66,61,,34,10,15,81,,70,,76,,60,',
'32,,27,73,,,49,65,,,16,66,61,,34,10,15,81,,70,,76,,60,,32,,27,73,,,49',
'65,,,16,66,61,,34,10,15,81,,70,,76,,60,,32,,27,73,,,49,65,,,16,66,61',
',34,10,15,81,,70,,76,,60,,32,,27,73,,,49,65,,,16,66,61,,34,10,15,81',
',70,,76,,60,,32,,27,73,,,49,65,,,16,66,61,,34,10,15,81,,70,,76,,60,',
'32,,27,73,,,49,65,,,16,66,61,,34,10,15,81,,70,,76,,60,,32,,27,73,,,49',
'65,,,16,66,61,,34,,,81,,,,,,60,,32,,27,73,,,49,65,10,15,16,66,,,34,336',
',81,10,15,,,70,,76,32,,,,,,,65,,,,41,,48,1,61,11,14,,22,27,36,,45,49',
'3,60,,16,,27,73,34,,49,,,,16,66,10,15,34,32,70,81,76,,,9,17,,,32,,,',
'10,15,,65,70,61,76,,,,,,,,,,60,,,,27,73,61,,49,10,15,,16,66,,,34,60',
',81,,27,73,10,15,49,,32,,16,66,,,34,65,,81,,,,,,60,55,32,,27,203,,45',
'49,65,,,16,,60,,34,,27,248,,,49,,10,15,16,32,,,34,349,,,65,,,,,177,',
'32,,,,,,168,65,,,,41,,48,1,,11,14,,22,27,36,,45,49,3,10,15,16,,,,34',
'179,180,163,164,166,167,,171,175,,32,,,,165,,9,17,,,,41,,48,1,,11,14',
',22,27,36,,45,49,3,,,16,10,15,,34,70,,76,,,,10,15,,,32,,,,,,9,17,61',
'211,10,15,,,70,,,,,60,,,,27,73,,,49,,60,55,16,66,27,203,34,45,49,81',
',,16,,60,,34,32,27,248,,,49,,65,,16,32,,,34,10,15,,65,70,,76,,,,32,',
',,,,,65,,,10,15,61,,70,,76,,,,,,,60,,,,27,73,,,49,61,,,16,66,,,34,,',
'81,60,,,,27,73,,32,49,,,,16,66,65,,34,10,15,81,,70,,76,,,,32,,,,,,,65',
',,10,15,61,,70,,76,,,,,,,60,,,,27,73,177,,49,61,,,16,66,168,,34,,,81',
'60,,,,27,73,,32,49,10,15,,16,66,65,251,34,,,81,,179,180,163,164,166',
'167,32,171,175,,,,,65,165,,,,,,,60,,,,27,248,,,49,10,15,,16,70,186,76',
'34,,,10,15,,,70,,,,32,,,,61,,,65,,,,,,,,60,,,,27,73,,,49,,60,,16,66',
'27,73,34,,49,81,343,,16,,,,34,32,,,173,177,,,65,304,,32,,168,170,174',
'176,,65,173,177,,,,,,,,168,170,174,176,,,,,169,172,,,179,180,163,164',
'166,167,,171,175,,,169,172,,165,179,180,163,164,166,167,255,171,175',
',,,,,165,173,177,,,,,178,,,168,170,174,176,,,173,177,,,,,,,,168,170',
'174,176,,,,,169,172,,,179,180,163,164,166,167,,171,175,,,169,172,,165',
'179,180,163,164,166,167,,171,175,173,177,,,,165,,,,168,170,174,176,',
',173,177,,,,,,,,168,170,174,176,,,,,169,172,,,179,180,163,164,166,167',
',171,175,,,,172,,165,179,180,163,164,166,167,,171,175,173,177,,,,165',
',,,168,170,174,176,,,173,177,,,,,,,,168,170,174,176,,,,,169,172,,,179',
'180,163,164,166,167,,171,175,,,169,172,,165,179,180,163,164,166,167',
',171,175,173,177,,,,165,,,,168,170,174,176,,,173,177,,,,,,,,168,170',
'174,176,,,,,169,172,,,179,180,163,164,166,167,,171,175,,,169,172,,165',
'179,180,163,164,166,167,,171,175,173,177,,,,165,,,,168,170,174,176,',
',173,177,,,,,,,,168,170,174,176,,,,,169,172,,,179,180,163,164,166,167',
',171,175,,,169,172,,165,179,180,163,164,166,167,,171,175,173,177,,,',
'165,,,,168,170,174,176,,,173,177,,,,,,,,168,170,174,176,,,,,,,,,179',
'180,163,164,166,167,,171,175,,,169,172,,165,179,180,163,164,166,167',
',171,175,173,177,,,,165,,,,168,170,174,176,,,173,177,,,,,,,,168,170',
'174,176,,,,,,,,,179,180,163,164,166,167,,171,175,,,169,172,,165,179',
'180,163,164,166,167,,171,175,173,177,,,,165,,,,168,170,174,176,,,173',
'177,,,,,,,270,168,170,174,176,,,,,,,,,179,180,163,164,166,167,,171,175',
',,169,172,,165,179,180,163,164,166,167,,171,175,173,177,,,,165,,,,168',
'170,174,176,,,,177,,,,,,,,168,,,,,,,,169,172,,,179,180,163,164,166,167',
',171,175,,,,,,165,179,180,163,164,166,167,,171,175,155,157,160,131,133',
'165,138,141,144,232,239,,158,235,,,,,,143,148,234,155,157,160,131,133',
',138,141,144,232,239,,158,235,,132,135,,,143,148,234,155,157,160,131',
'133,,138,141,144,232,233,,158,235,,132,135,,,143,148,234,155,157,160',
'131,133,,138,141,144,232,233,,158,235,,132,135,,,143,148,234,155,157',
'160,131,133,,138,141,144,232,233,,158,235,,132,135,,,143,148,234,155',
'157,160,131,133,,138,141,144,232,239,,158,235,,132,135,,,143,148,234',
',,,,,,,,,,,,,,,132,135' ]
        racc_action_table = arr = ::Array.new(2881, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,93,93,101,73,24,28,83,28,221,42,340,264,24,93,93,203,221,203,340',
'83,28,73,93,93,93,93,0,101,0,0,149,0,0,203,0,0,0,147,0,0,0,411,411,0',
'28,93,93,0,411,93,93,93,93,93,93,145,93,93,0,22,301,301,35,93,0,0,35',
'301,236,411,72,411,411,35,411,411,268,411,411,411,317,411,411,411,408',
'408,411,72,291,291,411,408,76,76,213,236,236,22,301,76,22,411,291,151',
'317,317,142,411,411,210,210,214,408,262,408,408,151,408,408,22,408,408',
'408,210,408,408,408,401,401,408,76,318,213,408,401,213,11,207,207,334',
'334,207,318,207,408,11,11,318,261,214,408,408,214,332,213,401,140,401',
'401,207,401,401,14,401,401,401,14,401,401,401,207,214,401,1,207,207',
'401,1,207,139,108,134,207,207,9,9,207,401,9,207,9,108,129,401,401,347',
'108,207,298,298,347,188,188,222,207,188,9,188,332,332,332,332,298,128',
'222,260,74,9,128,222,74,9,9,188,112,9,393,393,125,9,9,242,242,9,188',
'112,9,69,188,188,112,69,188,117,9,242,188,188,115,110,188,9,229,188',
'387,387,229,229,387,393,387,188,305,393,393,107,305,393,188,305,95,393',
'289,289,288,393,387,289,289,15,15,272,272,15,289,15,393,387,272,271',
'271,387,387,393,227,387,271,227,227,387,387,15,92,387,17,17,387,82,17',
'79,385,385,15,295,387,78,15,15,244,77,15,387,244,244,15,15,17,336,15',
'300,336,15,189,300,300,189,259,17,75,15,152,17,17,385,256,17,15,385',
'385,17,306,385,310,17,311,385,187,187,390,385,187,390,187,71,17,154',
'274,274,274,274,385,17,68,274,274,67,65,385,187,187,274,181,181,324',
'325,181,184,181,60,187,184,184,328,187,187,59,330,187,331,54,159,187',
'187,181,181,187,180,180,187,161,180,250,180,337,181,51,187,248,181,181',
'48,150,181,187,243,348,181,181,180,350,181,179,179,181,353,179,40,179',
'37,180,171,181,29,180,180,372,26,180,181,239,377,180,180,179,238,180',
'384,282,180,53,53,53,53,175,179,282,180,386,179,179,231,389,179,180',
'178,178,179,179,183,211,179,178,394,179,8,8,8,8,215,191,6,179,282,282',
'282,282,282,282,179,282,282,3,178,205,178,178,282,178,178,414,178,178',
'178,416,178,178,178,369,369,178,,,,178,369,285,285,285,285,285,285,',
'285,285,178,275,275,275,275,285,178,178,275,275,,369,,369,369,275,369',
'369,,369,369,369,,369,369,369,31,31,369,290,290,,369,,290,290,177,177',
',,177,290,177,369,12,12,12,12,,369,369,,,,31,,31,31,177,31,31,,31,31',
'31,,31,31,31,177,,31,,177,177,31,,177,,,,177,177,36,36,177,31,36,177',
'36,,,31,31,,,177,,,,176,176,,177,176,36,176,18,18,18,18,20,20,20,20',
',36,,,,36,36,176,,36,174,174,,36,174,,174,36,176,,,,176,176,,,176,,36',
',176,176,174,,176,36,,176,41,41,,,41,174,41,176,,174,174,,,174,176,',
',174,174,,,174,41,,174,345,345,,,345,,345,174,41,,,,41,41,174,,41,,',
',41,41,345,,41,45,45,41,,45,,45,,345,,41,,345,345,,,345,41,,,345,345',
'45,,345,344,344,345,,344,,344,,45,,345,,45,45,,,45,345,,,45,45,344,',
'45,338,338,45,,,,,338,344,,45,,344,344,333,333,344,45,333,,344,344,',
',344,,,344,,,,,,338,,344,,338,338,251,251,338,344,,,338,,333,,338,,333',
'333,,,333,,,,333,338,,,333,173,173,,338,173,,173,,251,122,333,,251,251',
',,251,333,122,122,251,,173,,251,,,122,122,122,122,,,173,,251,,173,173',
',,173,251,58,58,173,173,58,,173,122,122,173,,122,122,122,122,122,122',
'173,122,122,,,,,173,122,,,58,58,58,58,58,58,58,58,58,58,58,,58,58,,',
',58,,58,58,58,329,329,,,329,,329,,,,58,,,,,58,58,58,,,118,118,329,,118',
',118,,,,,,,329,,,,329,329,,,329,118,118,,329,329,,,329,,,329,118,,,',
'118,118,,329,118,,,,118,118,329,,118,61,61,118,,61,,61,,,,118,276,276',
'276,276,276,276,118,276,276,172,172,61,,172,276,172,,,,,,,61,,,,61,61',
',,61,172,,,61,61,,,61,,,61,172,,,,172,172,,61,172,,,,172,172,61,,172',
'170,170,172,,170,,170,,,,172,,,,,,,172,,,66,66,170,,66,,66,,,,,,,170',
',,,170,170,,,170,66,,,170,170,,,170,,,170,66,,,,66,66,,170,66,,,,66',
'66,170,,66,169,169,66,,169,,169,,,,66,,,,,,,66,,,316,316,169,,316,,316',
',,,,,,169,,,,169,169,,,169,316,,,169,169,,,169,,,169,316,,,,316,316',
',169,316,,,,316,316,169,,316,315,315,316,,315,,315,,,,316,,,,,,,316',
',,70,70,315,,70,70,70,,,,,,,315,,,,315,315,,,315,70,,,315,315,,,315',
',,315,70,,314,314,70,70,,315,70,314,,,70,70,315,,70,,,70,,,,,,,,70,',
',314,,314,314,70,314,314,,314,314,314,,314,314,314,,,314,168,168,,314',
'168,,168,,,,,,,,314,,,,,,314,314,168,,,167,167,,,167,,167,,168,,,,168',
'168,,,168,,,,168,168,167,,168,303,303,168,,303,,303,,167,,168,,167,167',
',,167,168,,,167,167,303,,167,166,166,167,,166,,166,,303,,167,,303,303',
',,303,167,,,303,303,166,,303,165,165,303,,165,,165,,166,,303,,166,166',
',,166,303,,,166,166,165,,166,164,164,166,,164,,164,,165,,166,,165,165',
',,165,166,,,165,165,164,,165,296,296,165,,296,,296,,164,,165,,164,164',
',,164,165,,,164,164,296,,164,163,163,164,,163,,163,,296,,164,,296,296',
',,296,164,,,296,296,163,,296,81,81,296,,81,,81,,163,,296,,163,163,,',
'163,296,,,163,163,81,,163,,,163,,,,,,81,,163,,81,81,,,81,163,254,254',
'81,81,,,81,254,,81,84,84,,,84,,84,81,,,,,,,81,,,,254,,254,254,84,254',
'254,,254,254,254,,254,254,254,84,,254,,84,84,254,,84,,,,84,84,85,85',
'84,254,85,84,85,,,254,254,,,84,,,,86,86,,84,86,85,86,,,,,,,,,,85,,,',
'85,85,86,,85,88,88,,85,85,,,85,86,,85,,86,86,255,255,86,,85,,86,86,',
',86,85,,86,,,,,,88,88,86,,88,88,,88,88,86,,,88,,255,,88,,255,255,,,255',
',263,263,255,88,,,255,263,,,88,,,,,278,,255,,,,,,278,255,,,,263,,263',
'263,,263,263,,263,263,263,,263,263,263,286,286,263,,,,263,278,278,278',
'278,278,278,,278,278,,263,,,,278,,263,263,,,,286,,286,286,,286,286,',
'286,286,286,,286,286,286,,,286,97,97,,286,97,,97,,,,98,98,,,286,,,,',
',286,286,97,97,265,265,,,265,,,,,97,,,,97,97,,,97,,98,98,97,97,98,98',
'97,98,98,97,,,98,,265,,98,97,265,265,,,265,,97,,265,98,,,265,106,106',
',98,106,,106,,,,265,,,,,,,265,,,269,269,106,,269,,269,,,,,,,106,,,,106',
'106,,,106,269,,,106,106,,,106,,,106,269,,,,269,269,,106,269,,,,269,269',
'106,,269,127,127,269,,127,,127,,,,269,,,,,,,269,,,109,109,127,,109,',
'109,,,,,,,127,,,,127,127,281,,127,109,,,127,127,281,,127,,,127,109,',
',,109,109,,127,109,120,120,,109,109,127,120,109,,,109,,281,281,281,281',
'281,281,109,281,281,,,,,109,281,,,,,,,120,,,,120,120,,,120,119,119,',
'120,119,119,119,120,,,209,209,,,209,,,,120,,,,119,,,120,,,,,,,,119,',
',,119,119,,,119,,209,,119,119,209,209,119,,209,119,257,,209,,,,209,119',
',,257,257,,,119,198,,209,,257,257,257,257,,209,198,198,,,,,,,,198,198',
'198,198,,,,,257,257,,,257,257,257,257,257,257,,257,257,,,198,198,,257',
'198,198,198,198,198,198,123,198,198,,,,,,198,123,123,,,,,64,,,123,123',
'123,123,,,64,64,,,,,,,,64,64,64,64,,,,,123,123,,,123,123,123,123,123',
'123,,123,123,,,64,64,,123,64,64,64,64,64,64,,64,64,196,196,,,,64,,,',
'196,196,196,196,,,277,277,,,,,,,,277,277,277,277,,,,,196,196,,,196,196',
'196,196,196,196,,196,196,,,,277,,196,277,277,277,277,277,277,,277,277',
'360,360,,,,277,,,,360,360,360,360,,,197,197,,,,,,,,197,197,197,197,',
',,,360,360,,,360,360,360,360,360,360,,360,360,,,197,197,,360,197,197',
'197,197,197,197,,197,197,217,217,,,,197,,,,217,217,217,217,,,365,365',
',,,,,,,365,365,365,365,,,,,217,217,,,217,217,217,217,217,217,,217,217',
',,365,365,,217,365,365,365,365,365,365,,365,365,381,381,,,,365,,,,381',
'381,381,381,,,185,185,,,,,,,,185,185,185,185,,,,,381,381,,,381,381,381',
'381,381,381,,381,381,,,185,185,,381,185,185,185,185,185,185,,185,185',
'280,280,,,,185,,,,280,280,280,280,,,356,356,,,,,,,,356,356,356,356,',
',,,,,,,280,280,280,280,280,280,,280,280,,,356,356,,280,356,356,356,356',
'356,356,,356,356,374,374,,,,356,,,,374,374,374,374,,,396,396,,,,,,,',
'396,396,396,396,,,,,,,,,374,374,374,374,374,374,,374,374,,,396,396,',
'374,396,396,396,396,396,396,,396,396,373,373,,,,396,,,,373,373,373,373',
',,162,162,,,,,,,162,162,162,162,162,,,,,,,,,373,373,373,373,373,373',
',373,373,,,162,162,,373,162,162,162,162,162,162,,162,162,395,395,,,',
'162,,,,395,395,395,395,,,,284,,,,,,,,284,,,,,,,,395,395,,,395,395,395',
'395,395,395,,395,395,,,,,,395,284,284,284,284,284,284,,284,284,327,327',
'327,327,327,284,327,327,327,327,327,,327,327,,,,,,327,327,327,113,113',
'113,113,113,,113,113,113,113,113,,113,113,,327,327,,,113,113,113,111',
'111,111,111,111,,111,111,111,111,111,,111,111,,113,113,,,111,111,111',
'267,267,267,267,267,,267,267,267,267,267,,267,267,,111,111,,,267,267',
'267,266,266,266,266,266,,266,266,266,266,266,,266,266,,267,267,,,266',
'266,266,230,230,230,230,230,,230,230,230,230,230,,230,230,,266,266,',
',230,230,230,,,,,,,,,,,,,,,,230,230' ]
        racc_action_check = arr = ::Array.new(2881, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   139,   nil,   459,   nil,   nil,   484,   nil,   423,   184,
   nil,   132,   517,   nil,   128,   279,   nil,   304,   580,   nil,
   584,   nil,    59,   nil,    -9,   nil,   448,   nil,     1,   436,
   nil,   560,   nil,   nil,   nil,    28,   617,   417,   nil,   nil,
   415,   687,   -12,   nil,   nil,   737,   nil,   nil,   420,   nil,
   nil,   411,   nil,   398,   377,   nil,   nil,   nil,   894,   374,
   384,  1014,   nil,   nil,  2190,   354,  1104,   358,   351,   220,
  1244,   346,    66,    -1,   199,   317,    92,   302,   294,   292,
   nil,  1525,   286,     2,  1578,  1625,  1642,   nil,  1667,   nil,
   nil,   nil,   280,    -2,   nil,   260,   nil,  1813,  1823,   nil,
   nil,    -8,   nil,   nil,   nil,   nil,  1887,   267,   158,  1977,
   243,  2746,   202,  2724,   nil,   242,   nil,   233,   964,  2061,
  2019,   nil,   854,  2175,   nil,   218,   nil,  1957,   180,   186,
   nil,   nil,   nil,   nil,   142,   nil,   nil,   nil,   nil,   161,
   146,   nil,    85,   nil,   nil,    34,   nil,    16,   nil,    21,
   400,    94,   319,   nil,   344,   nil,   nil,   nil,   nil,   396,
   nil,   388,  2610,  1500,  1450,  1425,  1400,  1350,  1325,  1154,
  1084,   380,  1034,   851,   659,   403,   634,   570,   474,   431,
   406,   381,   nil,   440,   381,  2430,   nil,   356,   201,   325,
   nil,   480,   nil,   nil,   nil,   nil,  2235,  2310,  2124,   nil,
   nil,   nil,   nil,    11,   nil,   468,   nil,   137,   nil,  2071,
   100,   458,   nil,    94,   111,   482,   nil,  2355,   nil,   nil,
   nil,    -8,   181,   nil,   nil,   nil,   nil,   250,   nil,   247,
  2812,   460,   nil,   nil,   nil,   nil,    48,   nil,   444,   399,
   nil,   nil,   222,   403,   313,   nil,   nil,   nil,   395,   nil,
   402,   826,   nil,   nil,  1568,  1681,   344,  2109,   nil,   323,
   202,   125,   103,  1724,     4,  1837,  2790,  2768,    69,  1907,
   nil,   231,   223,   nil,   315,   484,   974,  2250,  1723,   nil,
  2475,  1980,   441,   nil,  2670,   474,  1767,   nil,   267,   219,
   510,    79,   nil,   nil,   nil,   308,  1475,   nil,   189,   nil,
   324,    60,   nil,  1375,   nil,   228,   344,   nil,   nil,   nil,
   329,   333,   nil,   nil,  1279,  1224,  1174,    57,   109,   nil,
   nil,   nil,   nil,   nil,   373,   377,   nil,  2702,   385,   944,
   373,   377,   147,   801,   130,   nil,   298,   406,   787,   nil,
     0,   nil,   nil,   nil,   762,   712,   nil,   162,   402,   nil,
   422,   nil,   nil,   424,   nil,   nil,  2490,   nil,   nil,   nil,
  2295,   nil,   nil,   nil,   nil,  2370,   nil,   nil,   nil,   517,
   nil,   nil,   438,  2595,  2535,   nil,   nil,   443,   nil,   nil,
   nil,  2415,   nil,   nil,   449,   310,   460,   254,   nil,   465,
   329,   nil,   nil,   226,   476,  2655,  2550,   nil,   nil,   nil,
   nil,   127,   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,
   nil,    41,   nil,   nil,   502,   nil,   506,   nil,   nil ]

racc_action_default = [
  -212,  -256,  -189,   -79,   -18,    -7,  -256,   -19,    -8,  -256,
  -131,  -229,   -20,    -9,  -204,  -256,  -103,  -256,   -10,  -192,
  -256,   -11,  -256,  -183,  -247,   -12,  -256,  -136,  -184,   -39,
   -13,    -1,  -237,  -188,  -101,  -256,  -102,   -41,   -14,    -2,
  -256,  -256,   -42,   -15,    -3,  -256,   -43,   -16,  -256,  -191,
  -187,   -45,   -17,    -6,  -212,  -204,  -203,   -80,  -114,   -73,
  -229,  -256,  -148,  -149,  -256,  -256,  -256,  -256,  -247,   -63,
  -256,   -71,   -64,  -102,   -67,   -65,  -256,   -68,   -62,   -70,
   -66,  -256,   -72,   -69,  -256,  -256,  -256,   -49,  -256,   -46,
   -47,   -48,  -212,  -256,  -132,   -57,   -58,  -256,  -256,  -209,
  -211,  -212,  -208,  -205,  -207,  -210,  -256,  -256,  -212,  -256,
   -82,  -114,  -212,  -124,    -4,  -256,   -78,   -53,  -256,  -256,
  -256,  -141,  -256,  -256,  -194,  -196,  -193,  -256,  -213,  -256,
  -214,   -25,   -29,   -27,   -99,   -35,  -118,   -97,   -23,  -256,
  -235,   -31,  -105,   -33,   -32,  -119,  -115,  -106,   -21,  -256,
  -108,  -102,   -34,  -109,  -104,   -28,  -107,   -26,   -22,  -110,
   -30,   -24,  -256,  -256,  -256,  -256,  -256,  -256,  -256,  -256,
  -256,  -256,  -256,  -256,  -256,  -256,  -256,  -256,  -256,  -256,
  -256,  -256,  -166,  -256,  -256,   -60,  -232,  -256,  -256,  -256,
  -241,  -256,  -244,  -245,  -240,  -159,  -111,  -113,  -256,   -40,
   -44,   -37,   -39,  -102,   -38,  -212,  -133,  -256,  -134,  -256,
  -256,   -56,   -36,  -256,  -256,  -256,  -223,  -112,   419,   -88,
  -229,  -256,  -212,   -95,  -102,   -94,   -85,  -256,   -86,  -256,
  -124,  -235,  -119,  -117,   -34,   -24,  -256,  -122,  -235,  -117,
  -123,  -125,  -256,   -52,  -256,  -190,  -184,  -186,  -102,  -185,
  -256,  -256,  -177,  -178,  -256,  -256,  -256,  -256,  -217,  -222,
  -220,  -256,  -235,  -256,  -256,  -100,  -114,  -236,  -256,  -256,
  -169,  -156,  -155,  -150,  -157,  -158,  -161,  -168,  -163,  -151,
  -167,  -165,  -162,  -152,  -164,  -160,    -5,  -140,  -256,  -153,
  -154,  -256,  -130,  -255,  -233,  -234,  -256,  -230,  -256,  -128,
  -256,  -256,  -238,  -256,  -246,  -256,  -256,  -225,  -135,   -59,
  -234,   -54,  -206,  -224,  -256,  -256,  -256,  -256,  -256,   -83,
   -91,   -90,  -234,  -138,  -235,  -256,   -84,  -236,  -256,  -256,
  -234,   -50,  -230,  -256,  -235,  -180,  -144,  -256,  -256,  -171,
  -256,  -175,  -195,  -248,  -256,  -256,  -215,  -236,  -256,  -198,
  -256,   -74,   -98,  -235,  -116,   -75,  -120,  -139,  -129,  -231,
   -61,  -127,  -137,  -242,  -239,  -243,  -227,  -226,  -228,  -256,
   -55,  -202,  -256,   -92,   -93,   -89,   -87,  -256,   -76,  -126,
   -77,  -121,   -51,  -182,  -234,  -256,  -256,  -256,  -143,  -256,
  -144,  -172,  -170,  -256,  -256,  -221,  -219,  -218,  -216,  -197,
   -96,  -256,  -200,  -201,   -81,  -181,  -179,  -145,  -256,  -142,
  -176,  -256,  -199,  -147,  -256,  -174,  -256,  -146,  -173 ]

racc_goto_table = [
    28,    31,   121,   114,    54,    46,    24,    96,   250,   253,
   288,   190,   258,   237,   124,   140,    94,    92,   153,   100,
   268,   103,   137,   227,   238,    42,    96,   236,   129,   339,
    39,    28,    95,    88,   116,   115,    46,    24,   201,   199,
   388,    98,   200,   184,   206,   264,    29,   134,   212,   199,
    37,   117,   200,   252,   385,   334,    42,   110,   147,   125,
   338,   306,   101,   156,   215,   376,   205,   313,   231,   261,
   210,   262,   379,   367,   189,    26,   nil,    29,   nil,   nil,
   nil,    37,   229,   154,   130,   nil,   337,   204,    28,   nil,
   nil,   242,   244,    46,   409,   350,   nil,   204,    28,   nil,
   nil,   193,   nil,    46,   nil,   nil,   nil,   nil,   150,   nil,
   nil,   325,   391,    42,   nil,   nil,   nil,   nil,   328,   nil,
   246,   nil,   130,    42,   nil,   nil,   245,   nil,   nil,   nil,
   237,   216,   nil,   nil,   202,   nil,   nil,   317,    37,   250,
   335,   324,   348,   341,   202,   249,   372,   nil,    37,   nil,
   nil,   nil,   nil,   nil,   291,   nil,   nil,   nil,   225,   nil,
   298,   300,   225,   nil,   nil,   nil,   nil,   354,   279,   nil,
   247,   nil,   283,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,   nil,   nil,    46,    24,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   309,
   nil,   nil,   nil,    42,   377,   nil,   nil,   nil,   308,   nil,
   100,   100,   312,   nil,   386,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   342,   353,    29,   153,   341,   237,    37,   352,
   nil,   397,   nil,   400,   nil,   307,   363,   nil,   nil,   nil,
   414,   nil,   nil,   416,   nil,   142,   nil,   nil,   nil,   nil,
   nil,   246,     2,   nil,    28,   246,   nil,   245,   114,    46,
    24,   245,   nil,    28,   nil,   147,   nil,   nil,    46,    24,
   156,   nil,   225,   250,   405,    23,   249,   nil,   nil,    42,
   249,   410,   nil,     2,   nil,    23,    28,   nil,    42,   nil,
   154,    46,    24,   nil,   nil,   223,   nil,   nil,   nil,   223,
    29,   247,   nil,   nil,    37,   247,   nil,    23,   366,    29,
     2,    42,   nil,    37,    28,   150,   nil,   nil,   nil,    46,
    24,   nil,   nil,   383,    33,   nil,   193,   nil,   nil,   nil,
   nil,   nil,    29,   nil,   nil,   nil,    37,   nil,   246,    42,
     2,   nil,   nil,   nil,   245,   nil,   nil,   nil,   407,   nil,
     2,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    29,   nil,   nil,   249,    37,    23,   nil,   nil,   225,    28,
   401,    51,     2,   114,    46,    24,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   246,   nil,   nil,   247,   nil,
   nil,   245,   nil,   246,    42,   nil,   nil,   nil,   nil,   245,
   nil,    28,    51,   nil,   nil,   nil,    46,    24,    28,   223,
   249,    28,    33,    46,    24,    29,    46,    24,   249,    37,
   nil,   nil,    33,   nil,    50,   nil,    42,   nil,   nil,   159,
     2,   nil,   nil,    42,   nil,   247,    42,   nil,    23,   nil,
   nil,    23,    23,   247,    33,   nil,   nil,    29,   nil,   nil,
    23,    37,   142,   nil,    29,    50,   nil,    29,    37,    51,
   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,    33,     2,   nil,   223,     2,     2,   nil,   nil,
   nil,   nil,    50,   nil,   nil,     2,   nil,     2,   nil,   nil,
   nil,   nil,    50,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,    51,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   nil,    33,   nil,   nil,    33,    33,
    23,   nil,   nil,   nil,   nil,   nil,   nil,    33,    23,    33,
     2,   nil,   nil,   nil,   nil,    23,   nil,   nil,    23,   nil,
   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,    51,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,   nil,   159,     2,    33,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,    51,   nil,   nil,
     2,   nil,    33,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,    50,    50,
   nil,   nil,   nil,   nil,    64,    51,   nil,    50,   nil,    50,
    93,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,
    50,   nil,   nil,   nil,   nil,   nil,   122,    33,   nil,   nil,
   123,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,    33,   162,   nil,    50,   nil,
    51,   182,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   195,   nil,   nil,   196,
   197,   198,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,   nil,   nil,   nil,   nil,   nil,   nil,    51,
   nil,   217,    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,    50,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,    50,   nil,   nil,    50,   nil,   nil,   271,   272,
   273,   274,   275,   276,   277,   278,   nil,   280,   281,   282,
   nil,   284,   285,   nil,   289,   290,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   356,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   360,   nil,   nil,   nil,   nil,   nil,   nil,   365,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   373,   374,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   381,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   395,
   396,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   122 ]

racc_goto_check = [
    35,     2,    63,     4,    41,    27,    56,    31,    70,    72,
     5,    87,    84,    57,    74,    44,    61,    41,    37,    66,
    45,    80,    54,    49,    46,    26,    31,    49,    76,    68,
     3,    35,    30,    23,     6,    35,    27,    56,    22,     8,
    64,    23,    10,    29,    62,    43,    24,    42,    22,     8,
    25,    30,    10,    71,    33,    73,    26,    48,    35,    75,
    67,    77,    78,    27,    79,    50,    76,    81,    44,    82,
    29,    83,    60,    85,    86,     1,   nil,    24,   nil,   nil,
   nil,    25,    29,    26,     3,   nil,     5,     6,    35,   nil,
   nil,    29,    29,    27,    64,     5,   nil,     6,    35,   nil,
   nil,    26,   nil,    27,   nil,   nil,   nil,   nil,    25,   nil,
   nil,    45,    68,    26,   nil,   nil,   nil,   nil,    45,   nil,
    35,   nil,     3,    26,   nil,   nil,    56,   nil,   nil,   nil,
    57,     3,   nil,   nil,    24,   nil,   nil,    49,    25,    70,
    72,    46,    45,    70,    24,    26,     5,   nil,    25,   nil,
   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,    25,   nil,
    29,    29,    25,   nil,   nil,   nil,   nil,    57,    66,   nil,
    25,   nil,    66,   nil,   nil,   nil,   nil,   nil,    35,   nil,
   nil,   nil,   nil,    27,    56,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,
   nil,   nil,   nil,    26,    45,   nil,   nil,   nil,    61,   nil,
    66,    66,    80,   nil,    45,   nil,   nil,   nil,    34,   nil,
   nil,   nil,    74,    44,    24,    37,    70,    57,    25,    54,
   nil,    84,   nil,    45,   nil,     3,    87,   nil,   nil,   nil,
     5,   nil,   nil,     5,   nil,    34,   nil,   nil,   nil,   nil,
   nil,    35,    40,   nil,    35,    35,   nil,    56,     4,    27,
    56,    56,   nil,    35,   nil,    35,   nil,   nil,    27,    56,
    27,   nil,    25,    70,    72,    34,    26,   nil,   nil,    26,
    26,    70,   nil,    40,   nil,    34,    35,   nil,    26,   nil,
    26,    27,    56,   nil,   nil,    34,   nil,   nil,   nil,    34,
    24,    25,   nil,   nil,    25,    25,   nil,    34,    41,    24,
    40,    26,   nil,    25,    35,    25,   nil,   nil,   nil,    27,
    56,   nil,   nil,    31,    36,   nil,    26,   nil,   nil,   nil,
   nil,   nil,    24,   nil,   nil,   nil,    25,   nil,    35,    26,
    40,   nil,   nil,   nil,    56,   nil,   nil,   nil,    63,   nil,
    40,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
    24,   nil,   nil,    26,    25,    34,   nil,   nil,    25,    35,
     2,    28,    40,     4,    27,    56,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,    35,   nil,   nil,    25,   nil,
   nil,    56,   nil,    35,    26,   nil,   nil,   nil,   nil,    56,
   nil,    35,    28,   nil,   nil,   nil,    27,    56,    35,    34,
    26,    35,    36,    27,    56,    24,    27,    56,    26,    25,
   nil,   nil,    36,   nil,    39,   nil,    26,   nil,   nil,    28,
    40,   nil,   nil,    26,   nil,    25,    26,   nil,    34,   nil,
   nil,    34,    34,    25,    36,   nil,   nil,    24,   nil,   nil,
    34,    25,    34,   nil,    24,    39,   nil,    24,    25,    28,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    34,    36,    40,   nil,    34,    40,    40,   nil,   nil,
   nil,   nil,    39,   nil,   nil,    40,   nil,    40,   nil,   nil,
   nil,   nil,    39,   nil,   nil,    34,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,    34,   nil,   nil,    36,   nil,   nil,    36,    36,
    34,   nil,   nil,   nil,   nil,   nil,   nil,    36,    34,    36,
    40,   nil,   nil,   nil,   nil,    34,   nil,   nil,    34,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,   nil,    28,    40,    36,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,    28,   nil,   nil,
    40,   nil,    36,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    39,    39,
   nil,   nil,   nil,   nil,    32,    28,   nil,    39,   nil,    39,
    32,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
    39,   nil,   nil,   nil,   nil,   nil,    32,    36,   nil,   nil,
    32,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,    36,    32,   nil,    39,   nil,
    28,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,    32,
    32,    32,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,    28,
   nil,    32,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,    39,   nil,   nil,    32,    32,
    32,    32,    32,    32,    32,    32,   nil,    32,    32,    32,
   nil,    32,    32,   nil,    32,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    75,     1,    30,   -28,  -168,    -1,   nil,   -49,   nil,
   -46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -50,    21,    46,    50,    25,     5,   371,   -27,
    15,   -10,   675,  -280,   187,     0,   324,   -40,   nil,   424,
   252,     3,   -11,   -89,   -43,  -120,   -89,   nil,    29,   -85,
  -253,   nil,   nil,   nil,   -36,   nil,     6,  -100,   nil,   nil,
  -255,     1,   -49,   -39,  -296,   nil,    -3,  -195,  -226,   nil,
  -112,   -67,  -111,  -196,   -34,    11,   -26,  -144,    40,   -37,
    -1,  -147,   -59,   -57,  -116,  -232,    -2,   -65,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   286,   226,    44,   nil,    53,     5,     8,    13,
    18,    21,    25,    30,    38,    43,    47,    52,     4,     7,
    12,   136,    20,   nil,    71,    74,    78,    80,    83,   nil,
   nil,    62,   185,   296,    69,    72,    75,    77,    79,    82,
    59,     6,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,
   228,   318,   219,   221,   nil,   139,    68,   146,   149,   240,
   241,   nil,   nil,   nil,   nil,    63,    19,   nil,   nil,   340,
    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   104,   nil,   nil,   nil,   nil,   nil,   nil,   191,    67 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  4, 84, :_reduce_50,
  5, 84, :_reduce_51,
  3, 84, :_reduce_52,
  2, 84, :_reduce_53,
  4, 84, :_reduce_54,
  5, 84, :_reduce_55,
  3, 84, :_reduce_56,
  2, 84, :_reduce_57,
  1, 100, :_reduce_58,
  3, 100, :_reduce_59,
  1, 99, :_reduce_60,
  3, 99, :_reduce_61,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 76, :_reduce_74,
  5, 76, :_reduce_75,
  5, 76, :_reduce_76,
  5, 88, :_reduce_77,
  2, 77, :_reduce_78,
  1, 117, :_reduce_79,
  2, 117, :_reduce_80,
  6, 78, :_reduce_81,
  2, 78, :_reduce_82,
  3, 118, :_reduce_83,
  3, 118, :_reduce_84,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  3, 119, :_reduce_87,
  1, 120, :_reduce_none,
  3, 120, :_reduce_89,
  1, 121, :_reduce_90,
  1, 121, :_reduce_91,
  3, 122, :_reduce_92,
  3, 122, :_reduce_93,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  4, 124, :_reduce_96,
  1, 112, :_reduce_97,
  3, 112, :_reduce_98,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 110, :_reduce_101,
  1, 104, :_reduce_102,
  1, 105, :_reduce_103,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  3, 79, :_reduce_111,
  3, 79, :_reduce_112,
  3, 89, :_reduce_113,
  0, 114, :_reduce_114,
  1, 114, :_reduce_115,
  3, 114, :_reduce_116,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 127, :_reduce_120,
  3, 129, :_reduce_121,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  0, 116, :_reduce_124,
  1, 116, :_reduce_125,
  3, 116, :_reduce_126,
  4, 109, :_reduce_127,
  3, 109, :_reduce_128,
  4, 109, :_reduce_129,
  3, 109, :_reduce_130,
  1, 96, :_reduce_131,
  2, 96, :_reduce_132,
  2, 131, :_reduce_133,
  1, 132, :_reduce_134,
  2, 132, :_reduce_135,
  1, 106, :_reduce_136,
  4, 94, :_reduce_137,
  4, 94, :_reduce_138,
  5, 82, :_reduce_139,
  4, 82, :_reduce_140,
  2, 81, :_reduce_141,
  5, 133, :_reduce_142,
  4, 133, :_reduce_143,
  0, 134, :_reduce_none,
  2, 134, :_reduce_145,
  4, 134, :_reduce_146,
  3, 134, :_reduce_147,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_150,
  3, 102, :_reduce_151,
  3, 102, :_reduce_152,
  3, 102, :_reduce_153,
  3, 102, :_reduce_154,
  3, 102, :_reduce_155,
  3, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158,
  2, 102, :_reduce_159,
  3, 102, :_reduce_160,
  3, 102, :_reduce_161,
  3, 102, :_reduce_162,
  3, 102, :_reduce_163,
  3, 102, :_reduce_164,
  3, 102, :_reduce_165,
  2, 102, :_reduce_166,
  3, 102, :_reduce_167,
  3, 102, :_reduce_168,
  3, 102, :_reduce_169,
  5, 80, :_reduce_170,
  1, 137, :_reduce_171,
  2, 137, :_reduce_172,
  5, 138, :_reduce_173,
  4, 138, :_reduce_174,
  1, 139, :_reduce_175,
  3, 139, :_reduce_176,
  3, 97, :_reduce_177,
  1, 141, :_reduce_none,
  4, 141, :_reduce_179,
  1, 143, :_reduce_none,
  3, 143, :_reduce_181,
  3, 142, :_reduce_182,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_191,
  1, 140, :_reduce_none,
  1, 144, :_reduce_193,
  1, 145, :_reduce_none,
  3, 145, :_reduce_195,
  2, 83, :_reduce_196,
  6, 85, :_reduce_197,
  5, 85, :_reduce_198,
  7, 86, :_reduce_199,
  6, 86, :_reduce_200,
  6, 87, :_reduce_201,
  5, 87, :_reduce_202,
  1, 111, :_reduce_203,
  1, 111, :_reduce_204,
  1, 148, :_reduce_205,
  3, 148, :_reduce_206,
  1, 150, :_reduce_207,
  1, 151, :_reduce_208,
  1, 151, :_reduce_209,
  1, 151, :_reduce_210,
  1, 151, :_reduce_none,
  0, 73, :_reduce_212,
  0, 152, :_reduce_213,
  1, 146, :_reduce_none,
  3, 146, :_reduce_215,
  4, 146, :_reduce_216,
  1, 153, :_reduce_none,
  3, 153, :_reduce_218,
  3, 154, :_reduce_219,
  1, 154, :_reduce_220,
  3, 154, :_reduce_221,
  1, 154, :_reduce_222,
  1, 149, :_reduce_none,
  2, 149, :_reduce_224,
  1, 147, :_reduce_none,
  2, 147, :_reduce_226,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 95, :_reduce_229,
  3, 107, :_reduce_230,
  4, 107, :_reduce_231,
  2, 107, :_reduce_232,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  0, 115, :_reduce_none,
  1, 115, :_reduce_236,
  1, 136, :_reduce_237,
  3, 135, :_reduce_238,
  4, 135, :_reduce_239,
  2, 135, :_reduce_240,
  1, 156, :_reduce_none,
  3, 156, :_reduce_242,
  3, 157, :_reduce_243,
  1, 158, :_reduce_244,
  1, 158, :_reduce_245,
  4, 126, :_reduce_246,
  1, 98, :_reduce_none,
  4, 98, :_reduce_248,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  3, 108, :_reduce_255 ]

racc_reduce_n = 256

racc_shift_n = 419

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :RUBY_FUNC => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "RUBY_FUNC",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "parameterlookup",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key",
  "resourceish" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 35)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 38)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 47)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 90)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 93)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 108)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 115)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 121)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 128)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 135)
  def _reduce_54(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_55(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 148)
  def _reduce_56(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 155)
  def _reduce_57(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 162)
  def _reduce_58(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 165)
  def _reduce_59(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 169)
  def _reduce_60(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_61(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'grammar.ra', 186)
  def _reduce_74(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 189)
  def _reduce_75(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 192)
  def _reduce_76(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_77(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 206)
  def _reduce_78(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 222)
  def _reduce_79(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 223)
  def _reduce_80(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 228)
  def _reduce_81(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 246)
  def _reduce_82(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 264)
  def _reduce_83(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 272)
  def _reduce_84(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 85 omitted

# reduce 86 omitted

module_eval(<<'.,.,', 'grammar.ra', 285)
  def _reduce_87(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'grammar.ra', 290)
  def _reduce_89(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 294)
  def _reduce_90(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 295)
  def _reduce_91(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 298)
  def _reduce_92(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 303)
  def _reduce_93(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 312)
  def _reduce_96(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 315)
  def _reduce_97(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_98(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.ra', 325)
  def _reduce_101(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 329)
  def _reduce_102(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 333)
  def _reduce_103(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_111(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 351)
  def _reduce_112(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 355)
  def _reduce_113(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_114(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_115(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 365)
  def _reduce_116(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_120(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 378)
  def _reduce_121(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'grammar.ra', 387)
  def _reduce_124(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 389)
  def _reduce_125(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 391)
  def _reduce_126(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 397)
  def _reduce_127(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 402)
  def _reduce_128(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 407)
  def _reduce_129(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 412)
  def _reduce_130(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 418)
  def _reduce_131(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 419)
  def _reduce_132(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_133(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 423)
  def _reduce_134(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 424)
  def _reduce_135(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 427)
  def _reduce_136(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 431)
  def _reduce_137(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 434)
  def _reduce_138(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 438)
  def _reduce_139(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 447)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]),
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 456)
  def _reduce_141(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_142(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 144 omitted

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_145(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_146(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 491)
  def _reduce_147(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_150(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_151(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_152(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_153(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_154(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_155(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_156(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_157(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 534)
  def _reduce_158(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 537)
  def _reduce_159(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 540)
  def _reduce_160(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 543)
  def _reduce_161(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_162(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_163(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 552)
  def _reduce_164(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 555)
  def _reduce_165(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 558)
  def _reduce_166(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_167(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 564)
  def _reduce_168(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 567)
  def _reduce_169(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_170(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 575)
  def _reduce_171(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_172(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 582)
  def _reduce_173(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_174(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 595)
  def _reduce_175(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_176(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 602)
  def _reduce_177(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 178 omitted

module_eval(<<'.,.,', 'grammar.ra', 607)
  def _reduce_179(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 180 omitted

module_eval(<<'.,.,', 'grammar.ra', 613)
  def _reduce_181(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 622)
  def _reduce_182(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_191(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 192 omitted

module_eval(<<'.,.,', 'grammar.ra', 639)
  def _reduce_193(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_195(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 644)
  def _reduce_196(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 654)
  def _reduce_197(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_198(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 670)
  def _reduce_199(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_200(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 686)
  def _reduce_201(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_202(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 696)
  def _reduce_204(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 701)
  def _reduce_205(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 704)
  def _reduce_206(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 709)
  def _reduce_207(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 712)
  def _reduce_208(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_209(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_210(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 718)
  def _reduce_212(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_213(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 214 omitted

module_eval(<<'.,.,', 'grammar.ra', 727)
  def _reduce_215(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 730)
  def _reduce_216(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_218(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 742)
  def _reduce_219(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 746)
  def _reduce_220(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 749)
  def _reduce_221(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 751)
  def _reduce_222(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 223 omitted

module_eval(<<'.,.,', 'grammar.ra', 756)
  def _reduce_224(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'grammar.ra', 761)
  def _reduce_226(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 227 omitted

# reduce 228 omitted

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_229(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_230(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_231(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_232(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_236(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 781)
  def _reduce_237(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 785)
  def _reduce_238(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 792)
  def _reduce_239(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 798)
  def _reduce_240(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'grammar.ra', 803)
  def _reduce_242(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 812)
  def _reduce_243(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 815)
  def _reduce_244(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 816)
  def _reduce_245(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 819)
  def _reduce_246(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'grammar.ra', 824)
  def _reduce_248(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

module_eval(<<'.,.,', 'grammar.ra', 835)
  def _reduce_255(val, _values, result)
      result = ast AST::ParameterLookup, :resource => val[0], :parameter => val[2][:value]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
