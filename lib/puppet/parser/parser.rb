#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 806)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'35,36,202,201,259,283,-113,88,359,84,248,358,280,92,161,217,212,91,338',
'160,279,161,87,-197,213,215,214,216,39,121,48,49,160,33,50,250,51,37',
'26,160,40,46,30,35,36,32,86,219,218,31,400,206,207,209,208,210,211,270',
'204,205,52,35,36,281,-178,203,38,120,259,257,122,39,349,48,49,305,33',
'50,306,51,37,26,256,40,46,30,35,36,32,52,277,276,31,-123,81,92,277,276',
'37,130,62,40,46,52,35,36,32,92,105,38,31,91,336,-244,39,88,48,49,32',
'33,50,52,51,37,26,97,40,46,30,35,36,32,-178,-184,96,31,310,81,-177,188',
'188,37,78,94,95,46,52,35,36,32,193,193,38,31,92,192,192,39,91,48,49',
'377,33,50,52,51,37,26,363,40,46,30,35,36,32,188,362,-179,31,399,81,92',
'121,188,37,130,193,40,46,52,121,192,32,62,193,38,31,35,36,192,39,271',
'48,49,225,33,50,52,51,37,26,340,40,46,30,35,36,32,204,205,120,31,397',
'122,359,203,341,358,120,35,36,122,52,35,36,228,352,270,38,236,204,205',
'52,39,343,48,49,203,33,50,52,51,37,26,268,40,46,30,35,36,32,259,366',
'-97,31,369,81,228,304,346,37,233,259,265,46,52,35,36,32,264,105,38,31',
'259,265,252,39,-185,48,49,266,33,50,52,51,37,26,332,40,46,30,35,36,32',
'-124,254,253,31,312,81,209,208,252,37,78,204,205,46,52,35,36,32,203',
'282,38,31,360,259,283,39,245,48,49,245,33,50,52,51,37,26,-131,40,46',
'30,35,36,32,242,84,183,31,379,81,209,208,164,37,233,204,205,46,52,96',
'-184,32,203,339,38,31,-242,259,283,39,-180,48,49,-183,33,50,52,51,37',
'26,-181,40,46,30,35,36,32,-241,105,-246,31,-177,-131,-131,-131,-131',
'274,-245,92,277,276,52,91,212,-243,-130,355,38,356,270,-182,213,139',
'137,141,136,138,81,134,142,143,180,171,329,133,165,35,36,328,32,-179',
'144,132,166,-44,-44,-44,-44,206,207,209,208,210,211,52,204,205,159,370',
'140,146,372,203,373,39,374,48,49,124,33,50,325,51,37,26,321,40,46,30',
'35,36,32,112,111,-180,31,394,381,93,35,36,83,62,105,112,106,52,56,57',
'58,59,-179,38,-38,-38,-38,-38,39,384,48,49,104,33,50,385,51,37,26,-180',
'40,46,30,81,387,32,61,37,78,31,-228,46,389,390,325,32,103,35,36,31,52',
'105,102,106,319,160,38,35,36,395,52,105,52,106,52,307,53,35,36,104,401',
'105,402,106,56,57,58,59,,104,81,,,,37,78,,,46,104,81,,32,103,37,78,31',
',46,102,81,,32,103,37,78,31,52,46,102,,,32,103,35,36,31,52,105,102,106',
',,,35,36,,52,105,,106,,,,35,36,104,,105,,106,-40,-40,-40,-40,,104,81',
',,,37,78,,,46,104,81,,32,103,37,78,31,,46,102,81,,32,103,37,78,31,52',
'46,102,,,32,103,35,36,31,52,105,102,106,,,,35,36,,52,105,,106,,,,35',
'36,104,,105,,106,,,,,,104,81,,,,37,78,,,46,104,81,,32,103,37,78,31,',
'46,102,81,,32,103,37,78,31,52,46,102,,,32,103,35,36,31,52,105,102,106',
',,,,,,52,,,,35,36,,,105,104,106,,,,,206,207,209,208,,81,,204,205,37',
'78,104,262,46,203,,,32,103,,,31,81,,102,,37,78,,,46,,52,,32,103,35,36',
'31,,79,102,-197,,,,35,36,,52,105,,106,,,,35,36,63,,105,,106,,,,,,104',
'81,,,,37,78,,,46,104,81,,32,,37,78,31,,46,,81,,32,103,37,78,31,52,46',
'102,,,32,103,35,36,31,52,105,102,106,,,,35,36,,52,105,,106,,,,35,36',
'104,157,105,,106,,,,,,104,81,,,,37,78,,,46,104,81,,32,103,37,78,31,',
'46,102,81,,32,103,37,78,31,52,46,102,,,32,103,35,36,31,52,105,102,106',
',,,35,36,,52,105,,106,,,,35,36,104,,105,,106,,,,,,104,81,,,,37,78,,',
'46,104,81,,32,103,37,78,31,,46,102,81,,32,103,37,78,31,52,46,102,,,32',
'103,35,36,31,52,105,102,106,,,,35,36,,52,105,,106,,,,35,36,104,,105',
',,,206,207,209,208,104,81,,204,205,37,78,,,46,203,81,,32,103,37,78,31',
',46,102,81,,32,103,37,233,31,52,46,102,255,,32,,,,31,52,,,217,212,,',
',,,52,,213,215,214,216,,,,,,,,35,36,,,105,,106,,,,,,219,218,,,206,207',
'209,208,210,211,104,204,205,35,36,,,105,203,106,,81,,,,37,78,,,46,,',
',32,103,104,,31,35,36,102,,105,163,106,,81,,52,,37,78,,,46,,,,32,103',
'104,,31,35,36,102,,105,,106,,81,,52,,37,78,,,46,,,,32,103,104,,31,35',
'36,102,,105,,106,,81,,52,,37,78,,,46,,,,32,103,104,,31,35,36,102,,105',
',106,,81,,52,,37,78,,,46,35,36,,32,103,104,,31,,,102,,,,,,81,,52,,37',
'78,,,46,,,,32,103,35,36,31,81,105,102,106,37,233,,,46,,52,,32,,35,36',
'31,,105,104,106,,,,,,,52,,,81,,,,37,78,104,,46,,,,32,103,,,31,81,,102',
',37,78,,,46,,52,,32,103,35,36,31,,105,102,106,,,,35,36,,52,105,,106',
',,,35,36,104,,105,,106,,,,,,104,81,,,,37,78,,,46,104,81,,32,103,37,78',
'31,,46,102,81,,32,103,37,78,31,52,46,102,,,32,103,35,36,31,52,105,102',
'106,,,,35,36,,52,105,,106,,,,35,36,104,,105,,106,,,,,,104,81,,,,37,78',
',,46,104,81,,32,103,37,78,31,,46,102,81,,32,103,37,78,31,52,46,102,',
',32,103,35,36,31,52,105,102,106,,,,35,36,,52,,,,,,,35,36,104,,105,,106',
',,,,,,81,,,,37,78,,,46,104,81,,32,103,37,233,31,,46,102,81,,32,,37,78',
'31,52,46,,,,32,103,35,36,31,52,105,102,106,,,,35,36,,52,105,,106,,,',
'35,36,104,,105,163,106,,,,,,104,81,,,,37,78,,,46,104,81,,32,103,37,78',
'31,,46,102,81,,32,103,37,78,31,52,46,102,284,,32,103,,,31,52,,102,217',
'212,,,,,,52,,213,215,214,216,,35,36,35,36,,,206,207,209,208,210,211',
',204,205,,,,219,218,203,,206,207,209,208,210,211,,204,205,,,81,,81,203',
'37,233,37,233,46,,46,,32,,32,,31,,31,35,36,,,105,,106,,52,231,52,,,',
',,,,217,212,,,104,,,,,213,215,214,216,,,81,,,,37,78,,,46,,,,32,103,',
',31,219,218,102,,206,207,209,208,210,211,52,204,205,230,,,,,203,,,,217',
'212,,,,,232,,,213,215,214,216,,,217,212,,,,,,,,213,215,214,216,,,,,219',
'218,,,206,207,209,208,210,211,,204,205,,,219,218,,203,206,207,209,208',
'210,211,,204,205,217,212,,,,203,,,,213,215,214,216,,,217,212,,,,,,,',
'213,215,214,216,,,,,,,,,206,207,209,208,210,211,,204,205,,,219,218,',
'203,206,207,209,208,210,211,,204,205,217,212,,,,203,,,,213,215,214,216',
',,217,212,,,,,,,,213,215,214,216,,,,,219,218,,,206,207,209,208,210,211',
',204,205,,,,,,203,206,207,209,208,210,211,,204,205,217,212,,,,203,,',
',213,215,214,216,,,217,212,,,,,,,,213,215,214,216,,,,,219,218,,,206',
'207,209,208,210,211,,204,205,,,219,218,,203,206,207,209,208,210,211',
',204,205,217,212,,,,203,,,303,213,215,214,216,,,217,212,,,,,,,,213,215',
'214,216,,,,,219,218,,,206,207,209,208,210,211,,204,205,,,219,218,,203',
'206,207,209,208,210,211,,204,205,217,212,,,,203,,,,213,215,214,216,',
',217,212,,,,,,,,213,215,214,216,,,,,219,218,,,206,207,209,208,210,211',
',204,205,,,219,218,,203,206,207,209,208,210,211,,204,205,217,212,,,',
'203,,,,213,215,214,216,,,217,212,,,,,,,,213,215,214,216,,,,,219,218',
',,206,207,209,208,210,211,,204,205,,,,,,203,206,207,209,208,210,211',
',204,205,217,212,,,,203,,,,213,215,214,216,,,217,212,,,,,,,,213,215',
'214,216,,,,,219,218,212,,206,207,209,208,210,211,213,204,205,,,,218',
'212,203,206,207,209,208,210,211,213,204,205,,,,,,203,,212,,206,207,209',
'208,210,211,213,204,205,,,,,,203,206,207,209,208,210,211,,204,205,,',
',,,203,,,,206,207,209,208,210,211,,204,205,139,137,141,136,138,203,134',
'142,143,150,182,,133,135,,,,,,144,132,145,139,137,141,136,138,,134,142',
'143,150,148,,133,135,,140,146,,,144,132,145,139,137,141,136,138,,134',
'142,143,150,182,,133,135,,140,146,,,144,132,145,139,137,141,136,138',
',134,142,143,150,148,,133,135,,140,146,,,144,132,145,139,137,141,136',
'138,,134,142,143,150,182,,133,135,,140,146,,,144,132,145,139,137,141',
'136,138,,134,142,143,150,148,,133,135,,140,146,,,144,132,145,206,207',
'209,208,210,211,,204,205,,,,,,203,140,146' ]
        racc_action_table = arr = ::Array.new(2416, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,99,99,261,261,171,28,356,28,117,356,189,50,78,99,99,50,261,171,189',
'130,28,130,99,99,99,99,0,51,0,0,78,0,0,117,0,0,0,130,0,0,0,393,393,0',
'28,99,99,0,393,99,99,99,99,99,99,345,99,99,0,55,55,194,174,99,0,51,156',
'156,51,393,278,393,393,224,393,393,224,393,393,393,156,393,393,393,2',
'2,393,51,194,194,393,256,55,55,278,278,55,55,73,55,55,393,159,159,55',
'29,159,393,55,29,257,73,2,68,2,2,29,2,2,55,2,2,2,34,2,2,2,230,230,2',
'68,34,33,2,230,159,173,188,275,159,159,33,33,159,2,60,60,159,188,275',
'2,159,328,188,275,230,328,230,230,328,230,230,159,230,230,230,315,230',
'230,230,385,385,230,87,315,172,230,385,60,60,250,86,60,60,87,60,60,230',
'248,87,60,178,86,230,60,106,106,86,385,169,385,385,106,385,385,60,385',
'385,385,265,385,385,385,384,384,385,292,292,250,385,384,250,312,292',
'267,312,248,306,306,248,385,111,111,106,306,168,385,111,291,291,250',
'384,269,384,384,291,384,384,248,384,384,384,167,384,384,384,321,321',
'384,317,317,166,384,321,111,306,223,272,111,111,223,223,111,384,319',
'319,111,162,319,384,111,162,162,273,321,165,321,321,164,321,321,111',
'321,321,321,251,321,321,321,231,231,321,157,151,148,321,231,319,290',
'290,147,319,319,290,290,319,321,313,313,319,290,195,321,319,313,195',
'195,231,116,231,231,115,231,231,319,231,231,231,264,231,231,231,329',
'329,231,114,89,85,231,329,313,289,289,82,313,313,289,289,313,231,81',
'80,313,289,263,231,313,71,263,263,329,71,329,329,77,329,329,313,329',
'329,329,76,329,329,329,83,83,329,67,83,75,329,67,264,264,264,264,184',
'74,49,184,184,329,49,297,72,180,309,329,311,181,69,297,83,83,83,83,83',
'83,83,83,83,83,83,247,83,83,308,308,246,83,66,83,83,83,9,9,9,9,297,297',
'297,297,297,297,83,297,297,64,322,83,83,323,297,325,308,326,308,308',
'53,308,308,245,308,308,308,243,308,308,308,374,374,308,48,41,176,308',
'374,347,30,254,254,27,25,254,242,254,308,20,20,20,20,23,308,5,5,5,5',
'374,359,374,374,254,374,374,362,374,374,374,22,374,374,374,254,364,374',
'21,254,254,374,366,254,368,371,372,254,254,219,219,254,374,219,254,219',
'237,233,374,218,218,378,254,218,204,218,205,227,1,279,279,219,396,279',
'398,279,19,19,19,19,,218,219,,,,219,219,,,219,279,218,,219,219,218,218',
'219,,218,219,279,,218,218,279,279,218,219,279,218,,,279,279,217,217',
'279,218,217,279,217,,,,216,216,,279,216,,216,,,,36,36,217,,36,,36,7',
'7,7,7,,216,217,,,,217,217,,,217,36,216,,217,217,216,216,217,,216,217',
'36,,216,216,36,36,216,217,36,216,,,36,36,38,38,36,216,38,36,38,,,,39',
'39,,36,39,,39,,,,40,40,38,,40,,40,,,,,,39,38,,,,38,38,,,38,40,39,,38',
'38,39,39,38,,39,38,40,,39,39,40,40,39,38,40,39,,,40,40,161,161,40,39',
'161,40,161,,,,,,,40,,,,160,160,,,160,161,160,,,,,293,293,293,293,,161',
',293,293,161,161,160,160,161,293,,,161,161,,,161,160,,161,,160,160,',
',160,,161,,160,160,26,26,160,,26,160,26,,,,280,280,,160,280,,280,,,',
'215,215,26,,215,,215,,,,,,280,26,,,,26,26,,,26,215,280,,26,,280,280',
'26,,280,,215,,280,280,215,215,280,26,215,280,,,215,215,63,63,215,280',
'63,215,63,,,,258,258,,215,258,,258,,,,214,214,63,63,214,,214,,,,,,258',
'63,,,,63,63,,,63,214,258,,63,63,258,258,63,,258,63,214,,258,258,214',
'214,258,63,214,258,,,214,214,213,213,214,258,213,214,213,,,,358,358',
',214,358,,358,,,,307,307,213,,307,,307,,,,,,358,213,,,,213,213,,,213',
'307,358,,213,213,358,358,213,,358,213,307,,358,358,307,307,358,213,307',
'358,,,307,307,212,212,307,358,212,307,212,,,,211,211,,307,211,,211,',
',,268,268,212,,268,,,,294,294,294,294,211,212,,294,294,212,212,,,212',
'294,211,,212,212,211,211,212,,211,212,268,,211,211,268,268,211,212,268',
'211,155,,268,,,,268,211,,,155,155,,,,,,268,,155,155,155,155,,,,,,,,210',
'210,,,210,,210,,,,,,155,155,,,155,155,155,155,155,155,210,155,155,209',
'209,,,209,155,209,,210,,,,210,210,,,210,,,,210,210,209,,210,79,79,210',
',79,79,79,,209,,210,,209,209,,,209,,,,209,209,79,,209,208,208,209,,208',
',208,,79,,209,,79,79,,,79,,,,79,79,208,,79,207,207,79,,207,,207,,208',
',79,,208,208,,,208,,,,208,208,207,,208,206,206,208,,206,,206,,207,,208',
',207,207,,,207,363,363,,207,207,206,,207,,,207,,,,,,206,,207,,206,206',
',,206,,,,206,206,253,253,206,363,253,206,253,363,363,,,363,,206,,363',
',373,373,363,,373,253,373,,,,,,,363,,,253,,,,253,253,373,,253,,,,253',
'253,,,253,373,,253,,373,373,,,373,,253,,373,373,203,203,373,,203,373',
'203,,,,202,202,,373,202,,202,,,,88,88,203,,88,,88,,,,,,202,203,,,,203',
'203,,,203,88,202,,203,203,202,202,203,,202,203,88,,202,202,88,88,202',
'203,88,202,,,88,88,94,94,88,202,94,88,94,,,,95,95,,88,95,,95,,,,96,96',
'94,,96,,96,,,,,,95,94,,,,94,94,,,94,96,95,,94,94,95,95,94,,95,94,96',
',95,95,96,96,95,94,96,95,,,96,96,97,97,96,95,97,96,97,,,,365,365,,96',
',,,,,,102,102,97,,102,,102,,,,,,,97,,,,97,97,,,97,102,365,,97,97,365',
'365,97,,365,97,102,,365,,102,102,365,97,102,,,,102,102,103,103,102,365',
'103,102,103,,,,104,104,,102,104,,104,,,,105,105,103,,105,105,105,,,',
',,104,103,,,,103,103,,,103,105,104,,103,103,104,104,103,,104,103,105',
',104,104,105,105,104,103,105,104,198,,105,105,,,105,104,,105,198,198',
',,,,,105,,198,198,198,198,,236,236,232,232,,,295,295,295,295,295,295',
',295,295,,,,198,198,295,,198,198,198,198,198,198,,198,198,,,236,,232',
'198,236,236,232,232,236,,232,,236,,232,,236,,232,62,62,,,62,,62,,236',
'109,232,,,,,,,,109,109,,,62,,,,,109,109,109,109,,,62,,,,62,62,,,62,',
',,62,62,,,62,109,109,62,,109,109,109,109,109,109,62,109,109,107,,,,',
'109,,,,107,107,,,,,110,,,107,107,107,107,,,110,110,,,,,,,,110,110,110',
'110,,,,,107,107,,,107,107,107,107,107,107,,107,107,,,110,110,,107,110',
'110,110,110,110,110,,110,110,301,301,,,,110,,,,301,301,301,301,,,199',
'199,,,,,,,,199,199,199,199,,,,,,,,,301,301,301,301,301,301,,301,301',
',,199,199,,301,199,199,199,199,199,199,,199,199,392,392,,,,199,,,,392',
'392,392,392,,,351,351,,,,,,,,351,351,351,351,,,,,392,392,,,392,392,392',
'392,392,392,,392,392,,,,,,392,351,351,351,351,351,351,,351,351,196,196',
',,,351,,,,196,196,196,196,,,354,354,,,,,,,,354,354,354,354,,,,,196,196',
',,196,196,196,196,196,196,,196,196,,,354,354,,196,354,354,354,354,354',
'354,,354,354,222,222,,,,354,,,222,222,222,222,222,,,158,158,,,,,,,,158',
'158,158,158,,,,,222,222,,,222,222,222,222,222,222,,222,222,,,158,158',
',222,158,158,158,158,158,158,,158,158,334,334,,,,158,,,,334,334,334',
'334,,,335,335,,,,,,,,335,335,335,335,,,,,334,334,,,334,334,334,334,334',
'334,,334,334,,,335,335,,334,335,335,335,335,335,335,,335,335,337,337',
',,,335,,,,337,337,337,337,,,350,350,,,,,,,,350,350,350,350,,,,,337,337',
',,337,337,337,337,337,337,,337,337,,,,,,337,350,350,350,350,350,350',
',350,350,197,197,,,,350,,,,197,197,197,197,,,302,302,,,,,,,,302,302',
'302,302,,,,,197,197,300,,197,197,197,197,197,197,300,197,197,,,,302',
'298,197,302,302,302,302,302,302,298,302,302,,,,,,302,,299,,300,300,300',
'300,300,300,299,300,300,,,,,,300,298,298,298,298,298,298,,298,298,,',
',,,298,,,,299,299,299,299,299,299,,299,299,271,271,271,271,271,299,271',
'271,271,271,271,,271,271,,,,,,271,271,271,61,61,61,61,61,,61,61,61,61',
'61,,61,61,,271,271,,,61,61,61,270,270,270,270,270,,270,270,270,270,270',
',270,270,,61,61,,,270,270,270,252,252,252,252,252,,252,252,252,252,252',
',252,252,,270,270,,,252,252,252,84,84,84,84,84,,84,84,84,84,84,,84,84',
',252,252,,,84,84,84,183,183,183,183,183,,183,183,183,183,183,,183,183',
',84,84,,,183,183,183,296,296,296,296,296,296,,296,296,,,,,,296,183,183' ]
        racc_action_check = arr = ::Array.new(2416, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   548,    84,   nil,   nil,   433,   nil,   560,   nil,   374,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   493,
   427,   510,   488,   471,   nil,   479,   792,   476,     1,    71,
   437,   nil,   nil,   128,   110,   nil,   614,   nil,   661,   671,
   681,   453,   nil,   nil,   nil,   nil,   nil,   nil,   473,   365,
   -23,    27,   nil,   461,   nil,    59,   nil,   nil,   nil,   nil,
   145,  2259,  1662,   859,   438,   nil,   410,   371,   109,   390,
   nil,   350,   388,    94,   381,   373,   360,   353,     8,  1136,
   340,   356,   336,   385,  2325,   341,   159,   151,  1342,   340,
   nil,   nil,   nil,   nil,  1389,  1399,  1409,  1456,   nil,    -2,
   nil,   nil,  1476,  1523,  1533,  1543,   195,  1719,   nil,  1665,
  1734,   231,   nil,   nil,   335,   309,   306,    -2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   300,   254,   nil,
   nil,   294,   nil,   nil,   nil,  1051,    57,   281,  1974,   102,
   745,   728,   272,   nil,   250,   264,   240,   213,   225,   181,
   nil,    -5,   154,   115,    41,   nil,   454,   nil,   187,   nil,
   385,   400,   nil,  2347,   353,   nil,   nil,   nil,   115,    -6,
   nil,   nil,   nil,   nil,    41,   316,  1899,  2139,  1581,  1794,
   nil,   nil,  1332,  1322,   482,   484,  1211,  1186,  1161,  1111,
  1086,  1003,   993,   926,   879,   812,   604,   594,   537,   527,
   nil,   nil,  1959,   261,    66,   nil,   nil,   536,   nil,   nil,
   127,   299,  1612,   513,   nil,   nil,  1610,   525,   nil,   nil,
   nil,   nil,   485,   460,   nil,   429,   394,   418,   188,   nil,
   180,   288,  2303,  1258,   480,   nil,    70,    87,   869,   nil,
   nil,    -7,   nil,   359,   332,   204,   nil,   217,  1013,   235,
  2281,  2237,   260,   273,   nil,   116,   nil,   nil,    47,   547,
   802,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   298,
   255,   180,   158,   705,   970,  1565,  2346,   388,  2187,  2205,
  2172,  1779,  2154,   nil,   nil,   nil,   227,   946,   427,   400,
   nil,   402,   193,   317,   nil,   156,   nil,   250,   nil,   274,
   nil,   256,   426,   442,   nil,   441,   450,   nil,   118,   342,
   nil,   nil,   nil,   nil,  2019,  2034,   nil,  2079,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   471,   nil,   nil,
  2094,  1854,   nil,   nil,  1914,   nil,   -23,   nil,   936,   493,
   nil,   nil,   499,  1228,   507,  1466,   513,   nil,   515,   nil,
   nil,   500,   491,  1275,   470,   nil,   nil,   nil,   532,   nil,
   nil,   nil,   nil,   nil,   213,   170,   nil,   nil,   nil,   nil,
   nil,   nil,  1839,    41,   nil,   nil,   543,   nil,   545,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -206,  -248,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
  -248,   -39,   -41,   -42,   -43,   -45,   -98,  -248,  -178,  -248,
   -75,   -97,   -99,  -221,  -239,  -125,  -248,  -130,  -248,  -248,
  -248,  -248,  -177,  -181,  -182,  -183,  -185,  -186,  -248,  -248,
  -198,  -248,  -229,  -248,    -4,  -248,   -46,   -47,   -48,   -49,
  -248,  -120,  -248,  -248,   -53,   -54,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -98,  -248,
  -239,  -221,  -248,  -110,  -110,   -78,  -206,  -206,  -248,  -248,
   -74,  -197,  -198,   -76,  -248,  -248,  -248,  -248,  -126,  -248,
  -142,  -143,  -248,  -248,  -248,  -248,  -248,  -248,  -135,  -248,
  -248,  -248,  -187,  -188,  -190,  -206,  -206,  -206,  -199,  -201,
  -202,  -203,  -204,  -205,   403,   -37,   -38,   -39,   -40,   -44,
   -98,   -36,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,
   -29,   -30,   -31,   -32,   -33,   -34,   -35,  -227,  -113,  -114,
  -115,  -248,  -118,  -119,  -121,  -248,  -248,   -52,   -56,  -248,
  -248,  -248,  -248,  -224,  -248,   -24,   -34,   -95,  -227,  -248,
   -93,   -98,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -111,
  -115,  -227,  -113,  -120,  -248,   -81,   -82,   -84,  -206,  -248,
   -90,   -91,   -98,  -221,  -248,  -248,  -107,  -109,  -248,  -108,
  -127,  -128,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -153,  -160,  -248,  -248,  -248,  -232,  -233,  -248,  -236,  -237,
  -248,  -248,  -248,   -98,  -171,  -172,  -248,  -248,  -178,  -179,
  -180,  -184,  -248,  -248,  -208,  -207,  -206,  -248,  -248,  -215,
  -248,  -248,  -228,  -248,  -248,  -240,   -50,  -226,  -248,  -225,
   -55,  -248,  -124,  -248,  -222,  -226,  -247,  -248,   -96,  -248,
  -228,  -110,  -248,  -227,   -79,  -248,   -86,   -87,  -248,  -248,
  -248,   -80,  -132,  -226,  -238,  -129,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -154,  -155,  -156,  -157,  -158,
  -159,  -161,  -162,  -163,  -222,  -230,  -248,  -248,    -5,  -248,
  -134,  -248,  -138,  -248,  -165,  -248,  -169,  -227,  -174,  -248,
  -189,  -248,  -248,  -227,  -211,  -214,  -248,  -217,  -248,  -248,
  -200,  -216,   -73,  -122,  -117,  -116,   -51,   -57,  -123,  -131,
  -223,   -70,   -94,   -71,  -112,  -227,   -72,  -248,   -83,   -85,
   -88,   -89,  -231,  -234,  -235,  -133,  -138,  -137,  -248,  -248,
  -164,  -166,  -248,  -248,  -248,  -248,  -226,  -176,  -248,  -192,
  -209,  -248,  -228,  -248,  -248,  -218,  -219,  -220,  -248,  -196,
   -92,   -77,  -136,  -139,  -248,  -248,  -170,  -173,  -175,  -191,
  -210,  -212,  -213,  -248,  -194,  -195,  -248,  -141,  -248,  -168,
  -193,  -140,  -167 ]

racc_goto_table = [
    28,     2,    28,    42,    54,    42,   108,   235,    65,   115,
   116,   226,   118,   237,   251,    44,   113,    44,    43,   123,
    43,   177,   170,    98,   324,   168,   181,     3,   147,    89,
    90,   314,    25,   357,    25,   269,   179,   179,    55,    60,
   309,   311,   125,   184,   194,    85,   129,   131,   272,   156,
    24,   129,    24,   313,   128,    28,   126,   333,    42,   128,
    28,   126,   348,    42,   234,   162,   243,   246,   200,   317,
    44,   267,   114,    43,   195,    44,   167,   382,    43,   326,
   117,   247,   365,   174,   331,   322,   173,    25,   323,   191,
   191,   223,    25,    64,   375,   224,     1,   nil,    44,   nil,
   nil,    43,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,
    24,   238,   361,   nil,    42,   178,   nil,   nil,    34,   nil,
    34,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,    43,
   nil,   368,   318,   175,   316,   nil,   nil,   nil,   237,   378,
   347,   260,   244,   244,   249,   278,   261,   263,   nil,   nil,
   273,   391,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   287,   288,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   364,    23,   nil,   nil,   nil,   285,
   371,   191,   nil,   nil,   396,   398,   nil,   nil,    21,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   177,   342,   nil,   330,
   320,   353,   380,   345,   nil,   316,   123,   nil,   123,   nil,
   nil,   nil,   nil,   344,   179,   nil,   nil,   nil,   nil,   241,
    28,    28,   238,    42,    42,    42,   238,   nil,    23,    42,
   nil,   nil,   nil,    23,   nil,    44,    44,    44,    43,    43,
    43,    44,   nil,   127,    43,   nil,   nil,   nil,   127,   nil,
   nil,   388,    25,    25,   nil,   386,   172,   237,   174,   nil,
   nil,   173,   nil,   327,   nil,   nil,   nil,   nil,   191,   nil,
    24,    24,   nil,    44,   nil,   nil,    43,   nil,   376,   229,
   nil,   nil,   nil,   nil,   239,   nil,   nil,   nil,   nil,   nil,
   178,   367,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,
    54,    42,   nil,   238,   nil,   nil,    42,   nil,   175,   nil,
   nil,    28,   nil,    44,    42,   383,    43,   nil,    44,    28,
   nil,    43,    42,   nil,   nil,   nil,    44,   nil,   nil,    43,
    25,   nil,   nil,   nil,    44,   nil,   nil,    43,    34,    34,
   241,   nil,   nil,    25,   241,   nil,   nil,   nil,    24,   nil,
   nil,    25,   nil,   238,   nil,   238,    42,    22,    42,    22,
   nil,    24,   nil,   nil,    28,   393,   nil,    42,    44,    24,
    44,    43,   nil,    43,    28,    28,   nil,    42,    42,    44,
   nil,   nil,    43,    28,   nil,    54,    42,   nil,   nil,    44,
    44,   nil,    43,    43,   nil,   nil,    25,   nil,    44,   nil,
   nil,    43,   nil,    23,    23,   239,    25,    25,   nil,   239,
   nil,   nil,    22,   nil,    24,    25,    34,    22,    21,    21,
   nil,   241,   nil,   nil,    24,    24,   nil,   nil,   nil,    34,
    45,   nil,    45,    24,   nil,   nil,   nil,    34,   nil,   nil,
   176,   172,   nil,   190,   190,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    99,   nil,   107,   109,   110,   240,   nil,
   nil,   241,   nil,   241,   nil,   nil,   nil,   nil,   nil,   229,
   nil,    23,    34,   nil,   nil,    45,   239,   nil,   nil,   155,
    45,   nil,    34,    34,    23,   nil,    21,   nil,   nil,   nil,
   nil,    34,    23,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,    45,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   196,   197,   198,   199,   nil,   nil,   nil,   nil,   220,
   221,   222,   nil,   nil,   nil,   nil,   239,   nil,   239,   nil,
   nil,    45,   nil,   nil,   nil,   190,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,
   nil,   nil,    21,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,    21,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    22,    22,   240,
   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   176,   nil,   nil,   nil,    99,
   286,   nil,   190,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,    45,    45,   nil,   nil,    22,    45,   nil,   nil,   nil,
   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   334,   335,   nil,   nil,   nil,   337,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   350,   351,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   240,   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,   nil,   nil,   354,   nil,   nil,   nil,    45,   nil,
   nil,    22,    22,    45,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,   nil,    45,   nil,   nil,   nil,   nil,
   392,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45 ]

racc_goto_check = [
    35,     2,    35,    34,     4,    34,    63,    72,    31,    41,
    41,    87,    80,    70,    45,    36,    74,    36,    39,    66,
    39,    37,    54,    61,    84,    44,    44,     3,    46,    35,
     6,    68,    28,    64,    28,    45,    57,    57,    23,    23,
     5,     5,    22,    49,    49,    48,    10,    22,    45,    29,
    27,    10,    27,    67,     8,    35,     6,    60,    34,     8,
    35,     6,    50,    34,    71,    29,    76,    76,    62,    73,
    36,    43,    75,    39,    29,    36,    42,    64,    39,    77,
    78,    79,    33,    35,    81,    82,    34,    28,    83,    34,
    34,    29,    28,    30,    85,    86,     1,   nil,    36,   nil,
   nil,    39,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,
    27,    35,    68,   nil,    34,    28,   nil,   nil,    56,   nil,
    56,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,    39,
   nil,     5,    72,    27,    70,   nil,   nil,   nil,    70,     5,
    45,    31,     3,     3,     3,    49,    29,    29,   nil,   nil,
    46,    84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,    66,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    45,    26,   nil,   nil,   nil,    61,
    45,    34,   nil,   nil,     5,     5,   nil,   nil,    24,   nil,
    24,   nil,   nil,   nil,   nil,   nil,    37,    54,   nil,    80,
    74,    87,    45,    44,   nil,    70,    66,   nil,    66,   nil,
   nil,   nil,   nil,    57,    57,   nil,   nil,   nil,   nil,    56,
    35,    35,    35,    34,    34,    34,    35,   nil,    26,    34,
   nil,   nil,   nil,    26,   nil,    36,    36,    36,    39,    39,
    39,    36,   nil,    24,    39,   nil,   nil,   nil,    24,   nil,
   nil,    72,    28,    28,   nil,    70,    26,    70,    35,   nil,
   nil,    34,   nil,     3,   nil,   nil,   nil,   nil,    34,   nil,
    27,    27,   nil,    36,   nil,   nil,    39,   nil,    41,    26,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
    28,    31,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,
     4,    34,   nil,    35,   nil,   nil,    34,   nil,    27,   nil,
   nil,    35,   nil,    36,    34,    63,    39,   nil,    36,    35,
   nil,    39,    34,   nil,   nil,   nil,    36,   nil,   nil,    39,
    28,   nil,   nil,   nil,    36,   nil,   nil,    39,    56,    56,
    56,   nil,   nil,    28,    56,   nil,   nil,   nil,    27,   nil,
   nil,    28,   nil,    35,   nil,    35,    34,    25,    34,    25,
   nil,    27,   nil,   nil,    35,     2,   nil,    34,    36,    27,
    36,    39,   nil,    39,    35,    35,   nil,    34,    34,    36,
   nil,   nil,    39,    35,   nil,     4,    34,   nil,   nil,    36,
    36,   nil,    39,    39,   nil,   nil,    28,   nil,    36,   nil,
   nil,    39,   nil,    26,    26,    26,    28,    28,   nil,    26,
   nil,   nil,    25,   nil,    27,    28,    56,    25,    24,    24,
   nil,    56,   nil,   nil,    27,    27,   nil,   nil,   nil,    56,
    40,   nil,    40,    27,   nil,   nil,   nil,    56,   nil,   nil,
    25,    26,   nil,    25,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,    32,    32,    32,    25,   nil,
   nil,    56,   nil,    56,   nil,   nil,   nil,   nil,   nil,    26,
   nil,    26,    56,   nil,   nil,    40,    26,   nil,   nil,    32,
    40,   nil,    56,    56,    26,   nil,    24,   nil,   nil,   nil,
   nil,    56,    26,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,   nil,   nil,    40,   nil,   nil,   nil,    24,   nil,   nil,
   nil,    32,    32,    32,    32,   nil,   nil,   nil,   nil,    32,
    32,    32,   nil,   nil,   nil,   nil,    26,   nil,    26,   nil,
   nil,    40,   nil,   nil,   nil,    25,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,
   nil,   nil,    24,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,    25,    25,    25,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,    32,
    32,   nil,    25,    32,    32,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    40,    40,    40,   nil,   nil,    25,    40,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
    32,    32,   nil,   nil,   nil,    32,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    32,   nil,   nil,   nil,    40,   nil,
   nil,    25,    25,    40,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,    40,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40 ]

racc_goto_pointer = [
   nil,    96,     1,    27,     2,  -190,     1,   nil,    -1,   nil,
    -9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -13,    19,   198,   367,   183,    50,    32,   -14,
    67,   -18,   437,  -235,     3,     0,    15,   -62,   nil,    18,
   440,   -40,    -7,   -96,   -58,  -133,   -33,   nil,    17,   -43,
  -213,   nil,   nil,   nil,   -61,   nil,   118,   -47,   nil,   nil,
  -195,   -13,   -31,   -33,  -279,   nil,   -32,  -179,  -201,   nil,
   -98,   -47,  -104,  -167,   -32,    24,   -49,  -167,    29,   -36,
   -39,  -166,  -160,  -157,  -221,  -234,   -11,   -95,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   308,   185,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   149,    20,   nil,    75,    71,    66,    70,    73,   nil,
   nil,   100,   158,   258,    67,    68,    69,    72,    74,    76,
    77,    27,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   186,   275,   187,   189,   nil,   169,    80,   152,   151,   153,
   154,   nil,   nil,   nil,   nil,   101,    47,   nil,   nil,   315,
    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   119,   nil,   nil,   nil,   nil,   nil,   nil,   227,    82 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  4, 83, :_reduce_50,
  5, 83, :_reduce_51,
  3, 83, :_reduce_52,
  2, 83, :_reduce_53,
  1, 99, :_reduce_54,
  3, 99, :_reduce_55,
  1, 98, :_reduce_56,
  3, 98, :_reduce_57,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  5, 75, :_reduce_70,
  5, 75, :_reduce_71,
  5, 75, :_reduce_72,
  5, 87, :_reduce_73,
  2, 76, :_reduce_74,
  1, 116, :_reduce_75,
  2, 116, :_reduce_76,
  6, 77, :_reduce_77,
  2, 77, :_reduce_78,
  3, 117, :_reduce_79,
  3, 117, :_reduce_80,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_83,
  1, 119, :_reduce_none,
  3, 119, :_reduce_85,
  1, 120, :_reduce_86,
  1, 120, :_reduce_87,
  3, 121, :_reduce_88,
  3, 121, :_reduce_89,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_92,
  1, 111, :_reduce_93,
  3, 111, :_reduce_94,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_97,
  1, 103, :_reduce_98,
  1, 104, :_reduce_99,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 78, :_reduce_107,
  3, 78, :_reduce_108,
  3, 88, :_reduce_109,
  0, 113, :_reduce_110,
  1, 113, :_reduce_111,
  3, 113, :_reduce_112,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_116,
  3, 128, :_reduce_117,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_120,
  1, 115, :_reduce_121,
  3, 115, :_reduce_122,
  4, 108, :_reduce_123,
  3, 108, :_reduce_124,
  1, 95, :_reduce_125,
  2, 95, :_reduce_126,
  2, 130, :_reduce_127,
  1, 131, :_reduce_128,
  2, 131, :_reduce_129,
  1, 105, :_reduce_130,
  4, 93, :_reduce_131,
  4, 93, :_reduce_132,
  5, 81, :_reduce_133,
  4, 81, :_reduce_134,
  2, 80, :_reduce_135,
  5, 132, :_reduce_136,
  4, 132, :_reduce_137,
  0, 133, :_reduce_none,
  2, 133, :_reduce_139,
  4, 133, :_reduce_140,
  3, 133, :_reduce_141,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 101, :_reduce_144,
  3, 101, :_reduce_145,
  3, 101, :_reduce_146,
  3, 101, :_reduce_147,
  3, 101, :_reduce_148,
  3, 101, :_reduce_149,
  3, 101, :_reduce_150,
  3, 101, :_reduce_151,
  3, 101, :_reduce_152,
  2, 101, :_reduce_153,
  3, 101, :_reduce_154,
  3, 101, :_reduce_155,
  3, 101, :_reduce_156,
  3, 101, :_reduce_157,
  3, 101, :_reduce_158,
  3, 101, :_reduce_159,
  2, 101, :_reduce_160,
  3, 101, :_reduce_161,
  3, 101, :_reduce_162,
  3, 101, :_reduce_163,
  5, 79, :_reduce_164,
  1, 136, :_reduce_165,
  2, 136, :_reduce_166,
  5, 137, :_reduce_167,
  4, 137, :_reduce_168,
  1, 138, :_reduce_169,
  3, 138, :_reduce_170,
  3, 96, :_reduce_171,
  1, 140, :_reduce_none,
  4, 140, :_reduce_173,
  1, 142, :_reduce_none,
  3, 142, :_reduce_175,
  3, 141, :_reduce_176,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_185,
  1, 139, :_reduce_none,
  1, 143, :_reduce_187,
  1, 144, :_reduce_none,
  3, 144, :_reduce_189,
  2, 82, :_reduce_190,
  6, 84, :_reduce_191,
  5, 84, :_reduce_192,
  7, 85, :_reduce_193,
  6, 85, :_reduce_194,
  6, 86, :_reduce_195,
  5, 86, :_reduce_196,
  1, 110, :_reduce_197,
  1, 110, :_reduce_198,
  1, 147, :_reduce_199,
  3, 147, :_reduce_200,
  1, 149, :_reduce_201,
  1, 150, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_204,
  1, 150, :_reduce_none,
  0, 72, :_reduce_206,
  0, 151, :_reduce_207,
  1, 145, :_reduce_none,
  3, 145, :_reduce_209,
  4, 145, :_reduce_210,
  1, 152, :_reduce_none,
  3, 152, :_reduce_212,
  3, 153, :_reduce_213,
  1, 153, :_reduce_214,
  1, 148, :_reduce_none,
  2, 148, :_reduce_216,
  1, 146, :_reduce_none,
  2, 146, :_reduce_218,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 94, :_reduce_221,
  3, 106, :_reduce_222,
  4, 106, :_reduce_223,
  2, 106, :_reduce_224,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_228,
  1, 135, :_reduce_229,
  3, 134, :_reduce_230,
  4, 134, :_reduce_231,
  2, 134, :_reduce_232,
  1, 155, :_reduce_none,
  3, 155, :_reduce_234,
  3, 156, :_reduce_235,
  1, 157, :_reduce_236,
  1, 157, :_reduce_237,
  4, 125, :_reduce_238,
  1, 97, :_reduce_none,
  4, 97, :_reduce_240,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 107, :_reduce_247 ]

racc_reduce_n = 248

racc_shift_n = 403

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "parameterlookup",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key",
  "resourceish" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 158)
  def _reduce_70(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_71(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 164)
  def _reduce_72(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_73(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_74(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_76(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_77(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_78(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 236)
  def _reduce_79(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_80(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_83(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'grammar.ra', 262)
  def _reduce_85(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_87(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 270)
  def _reduce_88(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 275)
  def _reduce_89(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 284)
  def _reduce_92(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_93(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 289)
  def _reduce_94(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'grammar.ra', 297)
  def _reduce_97(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 301)
  def _reduce_98(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_99(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_107(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_108(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 327)
  def _reduce_109(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 333)
  def _reduce_110(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 335)
  def _reduce_111(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_112(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 350)
  def _reduce_117(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_120(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_121(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_122(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 369)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_124(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_126(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 383)
  def _reduce_127(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_129(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 389)
  def _reduce_130(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 393)
  def _reduce_131(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 396)
  def _reduce_132(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 400)
  def _reduce_133(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 409)
  def _reduce_134(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 418)
  def _reduce_135(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 422)
  def _reduce_136(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 433)
  def _reduce_137(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'grammar.ra', 446)
  def _reduce_139(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 449)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 453)
  def _reduce_141(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_144(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_146(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 514)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 517)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 520)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 523)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 537)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 544)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 547)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 557)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 564)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 569)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 575)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 584)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 596)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 601)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 616)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 624)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 632)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 639)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 653)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 657)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_198(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 663)
  def _reduce_199(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_200(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 671)
  def _reduce_201(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 680)
  def _reduce_206(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 684)
  def _reduce_207(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_209(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_210(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_212(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 704)
  def _reduce_213(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 705)
  def _reduce_214(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'grammar.ra', 709)
  def _reduce_216(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_218(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_221(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 724)
  def _reduce_223(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_224(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'grammar.ra', 731)
  def _reduce_228(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_229(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_230(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 745)
  def _reduce_231(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 751)
  def _reduce_232(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'grammar.ra', 756)
  def _reduce_234(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 765)
  def _reduce_235(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_236(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 769)
  def _reduce_237(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_238(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'grammar.ra', 777)
  def _reduce_240(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

module_eval(<<'.,.,', 'grammar.ra', 788)
  def _reduce_247(val, _values, result)
      result = ast AST::ParameterLookup, :resource => val[0], :parameter => val[2][:value]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
